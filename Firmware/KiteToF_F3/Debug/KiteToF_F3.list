
KiteToF_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005568  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080056f8  080056f8  000156f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005890  08005890  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  08005890  08005890  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005890  08005890  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08005898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          000000c8  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a9c  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002310  00000000  00000000  00031ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00033fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c28  00000000  00000000  00034d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eeb7  00000000  00000000  00035948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010244  00000000  00000000  000547ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1af9  00000000  00000000  00064a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011653c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ff0  00000000  00000000  0011658c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056e0 	.word	0x080056e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080056e0 	.word	0x080056e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HandleError>:
 * Handle Error
 *
 * Set err on display and loop forever
 * @param err Error case code
 */
void HandleError(int err){
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    char msg[16];
    sprintf(msg,"Er%d", err);
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	4902      	ldr	r1, [pc, #8]	; (8000288 <HandleError+0x18>)
 8000280:	4618      	mov	r0, r3
 8000282:	f004 f8e9 	bl	8004458 <siprintf>
    while(1){};
 8000286:	e7fe      	b.n	8000286 <HandleError+0x16>
 8000288:	080056f8 	.word	0x080056f8

0800028c <DetectSensors>:
 * Reset all sensor then do presence detection
 *
 * All present devices are data initiated and assigned to their final I2C address
 * @return
 */
int DetectSensors(int SetDisplay) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
    int status;
    int FinalAddress;

    // EK unused char PresentMsg[5]="    ";
    /* Reset all */
    nDevPresent = 0;
 8000294:	4b49      	ldr	r3, [pc, #292]	; (80003bc <DetectSensors+0x130>)
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
    // what is that code doing - something about an expander? why?

    /* detect all sensors (even on-board)*/
    // EK no need for for loop for (i = 0; i < 3; i++) {

    i = 0; // EK: in case anything is out there using i
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]

    		VL53L0X_Dev_t *pDev;
        pDev = &VL53L0XDev; // EK: only using one //&VL53L0XDevs[i];
 800029e:	4b48      	ldr	r3, [pc, #288]	; (80003c0 <DetectSensors+0x134>)
 80002a0:	617b      	str	r3, [r7, #20]
        pDev->I2cDevAddr = 0x29; // EK: documentation says address is 0x29, why did the code say 0x52? //0x52;
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	2229      	movs	r2, #41	; 0x29
 80002a6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        pDev->Present = 0;
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	2200      	movs	r2, #0
 80002ae:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        status = 1; // EK: is this needed? XNUCLEO53L0A1_ResetId( pDev->Id, 1);
 80002b2:	2301      	movs	r3, #1
 80002b4:	61fb      	str	r3, [r7, #28]
        HAL_Delay(2); // EK: why is this here
 80002b6:	2002      	movs	r0, #2
 80002b8:	f001 fd04 	bl	8001cc4 <HAL_Delay>
        FinalAddress= 0x29; // EK: see comment a few lines above about address // 0x52+(i+1)*2;
 80002bc:	2329      	movs	r3, #41	; 0x29
 80002be:	613b      	str	r3, [r7, #16]
        	/* Set I2C standard mode (400 KHz) before doing the first register access */
        	// EK: why is this, just do it  if (status == VL53L0X_ERROR_NONE)
        	// EK let's not do this status = VL53L0X_WrByte(pDev, 0x88, 0x00);

        	/* Try to read one register using default 0x52 address */
            status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 80002c0:	f107 030e 	add.w	r3, r7, #14
 80002c4:	461a      	mov	r2, r3
 80002c6:	21c0      	movs	r1, #192	; 0xc0
 80002c8:	6978      	ldr	r0, [r7, #20]
 80002ca:	f000 fc3d 	bl	8000b48 <VL53L0X_RdWord>
 80002ce:	4603      	mov	r3, r0
 80002d0:	61fb      	str	r3, [r7, #28]
            if (status) {
 80002d2:	69fb      	ldr	r3, [r7, #28]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d004      	beq.n	80002e2 <DetectSensors+0x56>
                printf("#%d Read id fail\n", i);
 80002d8:	69b9      	ldr	r1, [r7, #24]
 80002da:	483a      	ldr	r0, [pc, #232]	; (80003c4 <DetectSensors+0x138>)
 80002dc:	f004 f8a4 	bl	8004428 <iprintf>
                break;
 80002e0:	e05f      	b.n	80003a2 <DetectSensors+0x116>
            }
            if (Id == 0xEEAA) {
 80002e2:	89fb      	ldrh	r3, [r7, #14]
 80002e4:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d152      	bne.n	8000392 <DetectSensors+0x106>
				/* Sensor is found => Change its I2C address to final one */
                status = VL53L0X_SetDeviceAddress(pDev,FinalAddress);
 80002ec:	693b      	ldr	r3, [r7, #16]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	6978      	ldr	r0, [r7, #20]
 80002f4:	f000 fcd8 	bl	8000ca8 <VL53L0X_SetDeviceAddress>
 80002f8:	4603      	mov	r3, r0
 80002fa:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d004      	beq.n	800030c <DetectSensors+0x80>
                    printf("#%d VL53L0X_SetDeviceAddress fail\n", i);
 8000302:	69b9      	ldr	r1, [r7, #24]
 8000304:	4830      	ldr	r0, [pc, #192]	; (80003c8 <DetectSensors+0x13c>)
 8000306:	f004 f88f 	bl	8004428 <iprintf>
                    break;
 800030a:	e04a      	b.n	80003a2 <DetectSensors+0x116>
                }
                pDev->I2cDevAddr = FinalAddress;
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                /* Check all is OK with the new I2C address and initialize the sensor */
                status = VL53L0X_RdWord(pDev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &Id);
 8000316:	f107 030e 	add.w	r3, r7, #14
 800031a:	461a      	mov	r2, r3
 800031c:	21c0      	movs	r1, #192	; 0xc0
 800031e:	6978      	ldr	r0, [r7, #20]
 8000320:	f000 fc12 	bl	8000b48 <VL53L0X_RdWord>
 8000324:	4603      	mov	r3, r0
 8000326:	61fb      	str	r3, [r7, #28]
                if (status != 0) {
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d004      	beq.n	8000338 <DetectSensors+0xac>
					printf("#%d VL53L0X_RdWord fail\n", i);
 800032e:	69b9      	ldr	r1, [r7, #24]
 8000330:	4826      	ldr	r0, [pc, #152]	; (80003cc <DetectSensors+0x140>)
 8000332:	f004 f879 	bl	8004428 <iprintf>
					break;
 8000336:	e034      	b.n	80003a2 <DetectSensors+0x116>
				}

                status = VL53L0X_DataInit(pDev);
 8000338:	6978      	ldr	r0, [r7, #20]
 800033a:	f000 fccd 	bl	8000cd8 <VL53L0X_DataInit>
 800033e:	4603      	mov	r3, r0
 8000340:	61fb      	str	r3, [r7, #28]
                if( status == 0 ){
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d11f      	bne.n	8000388 <DetectSensors+0xfc>
                    pDev->Present = 1;
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	2201      	movs	r2, #1
 800034c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                }
                else{
                    printf("VL53L0X_DataInit %d fail\n", i);
                    break;
                }
                printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800035c:	461a      	mov	r2, r3
 800035e:	481c      	ldr	r0, [pc, #112]	; (80003d0 <DetectSensors+0x144>)
 8000360:	f004 f862 	bl	8004428 <iprintf>
                nDevPresent++;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <DetectSensors+0x130>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	4a14      	ldr	r2, [pc, #80]	; (80003bc <DetectSensors+0x130>)
 800036c:	6013      	str	r3, [r2, #0]
                nDevMask |= 1 << i;
 800036e:	2201      	movs	r2, #1
 8000370:	69bb      	ldr	r3, [r7, #24]
 8000372:	409a      	lsls	r2, r3
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <DetectSensors+0x148>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4313      	orrs	r3, r2
 800037a:	4a16      	ldr	r2, [pc, #88]	; (80003d4 <DetectSensors+0x148>)
 800037c:	6013      	str	r3, [r2, #0]
                pDev->Present = 1;
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	2201      	movs	r2, #1
 8000382:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8000386:	e00c      	b.n	80003a2 <DetectSensors+0x116>
                    printf("VL53L0X_DataInit %d fail\n", i);
 8000388:	69b9      	ldr	r1, [r7, #24]
 800038a:	4813      	ldr	r0, [pc, #76]	; (80003d8 <DetectSensors+0x14c>)
 800038c:	f004 f84c 	bl	8004428 <iprintf>
                    break;
 8000390:	e007      	b.n	80003a2 <DetectSensors+0x116>
            }
            else {
                printf("#%d unknown ID %x\n", i, Id);
 8000392:	89fb      	ldrh	r3, [r7, #14]
 8000394:	461a      	mov	r2, r3
 8000396:	69b9      	ldr	r1, [r7, #24]
 8000398:	4810      	ldr	r0, [pc, #64]	; (80003dc <DetectSensors+0x150>)
 800039a:	f004 f845 	bl	8004428 <iprintf>
                status = 1;
 800039e:	2301      	movs	r3, #1
 80003a0:	61fb      	str	r3, [r7, #28]
            }
        } while (0);
        /* if fail r can't use for any reason then put the  device back to reset */
        if (status) {
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <DetectSensors+0x122>
        	  printf("something failed"); // EK
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <DetectSensors+0x154>)
 80003aa:	f004 f83d 	bl	8004428 <iprintf>
        XNUCLEO53L0A1_SetDisplayString(PresentMsg);
        HAL_Delay(1000);
    }
    */

    return nDevPresent;
 80003ae:	4b03      	ldr	r3, [pc, #12]	; (80003bc <DetectSensors+0x130>)
 80003b0:	681b      	ldr	r3, [r3, #0]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000268 	.word	0x20000268
 80003c0:	20000000 	.word	0x20000000
 80003c4:	08005700 	.word	0x08005700
 80003c8:	08005714 	.word	0x08005714
 80003cc:	08005738 	.word	0x08005738
 80003d0:	08005770 	.word	0x08005770
 80003d4:	2000026c 	.word	0x2000026c
 80003d8:	08005754 	.word	0x08005754
 80003dc:	080057a0 	.word	0x080057a0
 80003e0:	080057b4 	.word	0x080057b4

080003e4 <ResetAndDetectSensor>:

void ResetAndDetectSensor(int SetDisplay){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
    int nSensor;
    nSensor = DetectSensors(SetDisplay);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff4d 	bl	800028c <DetectSensors>
 80003f2:	60f8      	str	r0, [r7, #12]

    // EK added this
    if( VL53L0XDev.Present==0 )
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <ResetAndDetectSensor+0x38>)
 80003f6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d103      	bne.n	8000406 <ResetAndDetectSensor+0x22>
    {
    	HandleError(ERR_DETECT);
 80003fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000402:	f7ff ff35 	bl	8000270 <HandleError>
    }

    /* at least one sensor and if one it must be the built-in one  */
    if( (nSensor <=0) ) { // EK ||  (nSensor ==1 && VL53L0XDevs[1].Present==0) ){
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	2b00      	cmp	r3, #0
 800040a:	dc03      	bgt.n	8000414 <ResetAndDetectSensor+0x30>
        HandleError(ERR_DETECT);
 800040c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000410:	f7ff ff2e 	bl	8000270 <HandleError>
    }
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000000 	.word	0x20000000

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000424:	f001 fbe8 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000428:	f000 f808 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042c:	f000 f89c 	bl	8000568 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000430:	f000 f85a 	bl	80004e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter
 8000434:	2001      	movs	r0, #1
 8000436:	f7ff ffd5 	bl	80003e4 <ResetAndDetectSensor>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043a:	e7fe      	b.n	800043a <main+0x1a>

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b09e      	sub	sp, #120	; 0x78
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f003 ffe4 	bl	8004418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	463b      	mov	r3, r7
 8000462:	223c      	movs	r2, #60	; 0x3c
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f003 ffd6 	bl	8004418 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046c:	2302      	movs	r3, #2
 800046e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	2301      	movs	r3, #1
 8000472:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000474:	2310      	movs	r3, #16
 8000476:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000478:	2302      	movs	r3, #2
 800047a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800047c:	2300      	movs	r3, #0
 800047e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000480:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000484:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fbb8 	bl	8002c00 <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000496:	f000 f91b 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	230f      	movs	r3, #15
 800049c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	2302      	movs	r3, #2
 80004a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fbe0 	bl	8003c7c <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004c2:	f000 f905 	bl	80006d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80004c6:	2340      	movs	r3, #64	; 0x40
 80004c8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ce:	463b      	mov	r3, r7
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 fdb9 	bl	8004048 <HAL_RCCEx_PeriphCLKConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80004dc:	f000 f8f8 	bl	80006d0 <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3778      	adds	r7, #120	; 0x78
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_I2C2_Init+0x74>)
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <MX_I2C2_Init+0x78>)
 80004f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_I2C2_Init+0x74>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_I2C2_Init+0x7c>)
 80004f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_I2C2_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_I2C2_Init+0x74>)
 8000500:	2201      	movs	r2, #1
 8000502:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_I2C2_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_I2C2_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_I2C2_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_I2C2_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_I2C2_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <MX_I2C2_Init+0x74>)
 8000524:	f001 fe6a 	bl	80021fc <HAL_I2C_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800052e:	f000 f8cf 	bl	80006d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <MX_I2C2_Init+0x74>)
 8000536:	f002 facb 	bl	8002ad0 <HAL_I2CEx_ConfigAnalogFilter>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000540:	f000 f8c6 	bl	80006d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000544:	2100      	movs	r1, #0
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_I2C2_Init+0x74>)
 8000548:	f002 fb0d 	bl	8002b66 <HAL_I2CEx_ConfigDigitalFilter>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000552:	f000 f8bd 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000021c 	.word	0x2000021c
 8000560:	40005800 	.word	0x40005800
 8000564:	2000090e 	.word	0x2000090e

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	4b51      	ldr	r3, [pc, #324]	; (80006c4 <MX_GPIO_Init+0x15c>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a50      	ldr	r2, [pc, #320]	; (80006c4 <MX_GPIO_Init+0x15c>)
 8000584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b4e      	ldr	r3, [pc, #312]	; (80006c4 <MX_GPIO_Init+0x15c>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	4b4b      	ldr	r3, [pc, #300]	; (80006c4 <MX_GPIO_Init+0x15c>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a4a      	ldr	r2, [pc, #296]	; (80006c4 <MX_GPIO_Init+0x15c>)
 800059c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b48      	ldr	r3, [pc, #288]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a44      	ldr	r2, [pc, #272]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b3f      	ldr	r3, [pc, #252]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a3e      	ldr	r2, [pc, #248]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b3c      	ldr	r3, [pc, #240]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a38      	ldr	r2, [pc, #224]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b36      	ldr	r3, [pc, #216]	; (80006c4 <MX_GPIO_Init+0x15c>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005f6:	2200      	movs	r2, #0
 80005f8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005fc:	4832      	ldr	r0, [pc, #200]	; (80006c8 <MX_GPIO_Init+0x160>)
 80005fe:	f001 fde5 	bl	80021cc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000602:	2337      	movs	r3, #55	; 0x37
 8000604:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000606:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	482c      	ldr	r0, [pc, #176]	; (80006c8 <MX_GPIO_Init+0x160>)
 8000618:	f001 fc5e 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800061c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000620:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	4824      	ldr	r0, [pc, #144]	; (80006c8 <MX_GPIO_Init+0x160>)
 8000636:	f001 fc4f 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063a:	2301      	movs	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fc42 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000654:	23e0      	movs	r3, #224	; 0xe0
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000664:	2305      	movs	r3, #5
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f001 fc31 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000676:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000688:	230e      	movs	r3, #14
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f001 fc1f 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800069a:	23c0      	movs	r3, #192	; 0xc0
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069e:	2312      	movs	r3, #18
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006aa:	2304      	movs	r3, #4
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_GPIO_Init+0x164>)
 80006b6:	f001 fc0f 	bl	8001ed8 <HAL_GPIO_Init>

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48001000 	.word	0x48001000
 80006cc:	48000400 	.word	0x48000400

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x44>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x44>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x44>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000712:	2007      	movs	r0, #7
 8000714:	f001 fbac 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <HAL_I2C_MspInit+0x80>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d129      	bne.n	800079a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800075e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000764:	2312      	movs	r3, #18
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000770:	2304      	movs	r3, #4
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f001 fbab 	bl	8001ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_I2C_MspInit+0x84>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40005800 	.word	0x40005800
 80007a8:	40021000 	.word	0x40021000

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <NMI_Handler+0x4>

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f001 fa44 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00a      	b.n	8000828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000812:	f3af 8000 	nop.w
 8000816:	4601      	mov	r1, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf0      	blt.n	8000812 <_read+0x12>
	}

return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e009      	b.n	8000860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf1      	blt.n	800084c <_write+0x12>
	}
	return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_close>:

int _close(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089a:	605a      	str	r2, [r3, #4]
	return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <_isatty>:

int _isatty(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
	return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
	return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f003 fd4c 	bl	80043a8 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	; (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000a000 	.word	0x2000a000
 800093c:	00000400 	.word	0x00000400
 8000940:	20000270 	.word	0x20000270
 8000944:	200002c8 	.word	0x200002c8

08000948 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SystemInit+0x20>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <SystemInit+0x20>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af02      	add	r7, sp, #8
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	330a      	adds	r3, #10
 800097c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800098a:	b299      	uxth	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	b29a      	uxth	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	4613      	mov	r3, r2
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f001 fcc0 	bl	800231c <HAL_I2C_Master_Transmit>
 800099c:	4603      	mov	r3, r0
 800099e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80009a0:	693b      	ldr	r3, [r7, #16]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b088      	sub	sp, #32
 80009ae:	af02      	add	r7, sp, #8
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	330a      	adds	r3, #10
 80009ba:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	b299      	uxth	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	4613      	mov	r3, r2
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f001 fd92 	bl	8002504 <HAL_I2C_Master_Receive>
 80009e0:	4603      	mov	r3, r0
 80009e2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80009e4:	693b      	ldr	r3, [r7, #16]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <VL53L0X_WrByte>:
done:
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
 80009fc:	4613      	mov	r3, r2
 80009fe:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <VL53L0X_WrByte+0x44>)
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <VL53L0X_WrByte+0x44>)
 8000a0c:	78bb      	ldrb	r3, [r7, #2]
 8000a0e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000a10:	2202      	movs	r2, #2
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <VL53L0X_WrByte+0x44>)
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffa9 	bl	800096c <_I2CWrite>
 8000a1a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000a22:	23ec      	movs	r3, #236	; 0xec
 8000a24:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000274 	.word	0x20000274

08000a38 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
 8000a44:	4613      	mov	r3, r2
 8000a46:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <VL53L0X_WrWord+0x50>)
 8000a4e:	78fb      	ldrb	r3, [r7, #3]
 8000a50:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8000a52:	883b      	ldrh	r3, [r7, #0]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <VL53L0X_WrWord+0x50>)
 8000a5c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8000a5e:	883b      	ldrh	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <VL53L0X_WrWord+0x50>)
 8000a64:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8000a66:	2203      	movs	r2, #3
 8000a68:	4907      	ldr	r1, [pc, #28]	; (8000a88 <VL53L0X_WrWord+0x50>)
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff7e 	bl	800096c <_I2CWrite>
 8000a70:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000a78:	23ec      	movs	r3, #236	; 0xec
 8000a7a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000274 	.word	0x20000274

08000a8c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	4608      	mov	r0, r1
 8000a96:	4611      	mov	r1, r2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	70fb      	strb	r3, [r7, #3]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70bb      	strb	r3, [r7, #2]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8000aaa:	f107 020e 	add.w	r2, r7, #14
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f81e 	bl	8000af4 <VL53L0X_RdByte>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8000abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d110      	bne.n	8000ae6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8000ac4:	7bba      	ldrb	r2, [r7, #14]
 8000ac6:	78bb      	ldrb	r3, [r7, #2]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	787b      	ldrb	r3, [r7, #1]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8000ad4:	7bba      	ldrb	r2, [r7, #14]
 8000ad6:	78fb      	ldrb	r3, [r7, #3]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ff88 	bl	80009f0 <VL53L0X_WrByte>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e000      	b.n	8000ae8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8000ae6:	bf00      	nop
done:
    return Status;
 8000ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	460b      	mov	r3, r1
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000b06:	f107 030b 	add.w	r3, r7, #11
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff ff2c 	bl	800096c <_I2CWrite>
 8000b14:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000b1c:	23ec      	movs	r3, #236	; 0xec
 8000b1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b20:	e00c      	b.n	8000b3c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8000b22:	2201      	movs	r2, #1
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ff3f 	bl	80009aa <_I2CRead>
 8000b2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d002      	beq.n	8000b3a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000b34:	23ec      	movs	r3, #236	; 0xec
 8000b36:	75fb      	strb	r3, [r7, #23]
 8000b38:	e000      	b.n	8000b3c <VL53L0X_RdByte+0x48>
    }
done:
 8000b3a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8000b3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3718      	adds	r7, #24
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	460b      	mov	r3, r1
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000b5a:	f107 030b 	add.w	r3, r7, #11
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4619      	mov	r1, r3
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff ff02 	bl	800096c <_I2CWrite>
 8000b68:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000b70:	23ec      	movs	r3, #236	; 0xec
 8000b72:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b74:	e017      	b.n	8000ba6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8000b76:	2202      	movs	r2, #2
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <VL53L0X_RdWord+0x6c>)
 8000b7a:	68f8      	ldr	r0, [r7, #12]
 8000b7c:	f7ff ff15 	bl	80009aa <_I2CRead>
 8000b80:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d002      	beq.n	8000b8e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000b88:	23ec      	movs	r3, #236	; 0xec
 8000b8a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b8c:	e00b      	b.n	8000ba6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <VL53L0X_RdWord+0x6c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <VL53L0X_RdWord+0x6c>)
 8000b9a:	785b      	ldrb	r3, [r3, #1]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8000ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000274 	.word	0x20000274

08000bb8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000bca:	f107 030b 	add.w	r3, r7, #11
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff feca 	bl	800096c <_I2CWrite>
 8000bd8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000be0:	23ec      	movs	r3, #236	; 0xec
 8000be2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000be4:	e01b      	b.n	8000c1e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8000be6:	2204      	movs	r2, #4
 8000be8:	4910      	ldr	r1, [pc, #64]	; (8000c2c <VL53L0X_RdDWord+0x74>)
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fedd 	bl	80009aa <_I2CRead>
 8000bf0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000bf8:	23ec      	movs	r3, #236	; 0xec
 8000bfa:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000bfc:	e00f      	b.n	8000c1e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <VL53L0X_RdDWord+0x74>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	061a      	lsls	r2, r3, #24
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <VL53L0X_RdDWord+0x74>)
 8000c06:	785b      	ldrb	r3, [r3, #1]
 8000c08:	041b      	lsls	r3, r3, #16
 8000c0a:	441a      	add	r2, r3
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <VL53L0X_RdDWord+0x74>)
 8000c0e:	789b      	ldrb	r3, [r3, #2]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	4413      	add	r3, r2
 8000c14:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <VL53L0X_RdDWord+0x74>)
 8000c16:	78d2      	ldrb	r2, [r2, #3]
 8000c18:	441a      	add	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8000c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000274 	.word	0x20000274

08000c30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopForever+0xe>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopForever+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c5a:	f7ff fe75 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f003 fba9 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c62:	f7ff fbdd 	bl	8000420 <main>

08000c66 <LoopForever>:

LoopForever:
    b LoopForever
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c68:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8000c74:	08005898 	.word	0x08005898
  ldr r2, =_sbss
 8000c78:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8000c7c:	200002c8 	.word	0x200002c8

08000c80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC1_2_IRQHandler>

08000c82 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 fd36 	bl	8001704 <VL53L0X_get_offset_calibration_data_micro_meter>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	085b      	lsrs	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	218a      	movs	r1, #138	; 0x8a
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fe94 	bl	80009f0 <VL53L0X_WrByte>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b096      	sub	sp, #88	; 0x58
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000ce6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d107      	bne.n	8000cfe <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2188      	movs	r1, #136	; 0x88
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fe7c 	bl	80009f0 <VL53L0X_WrByte>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d16:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a9e      	ldr	r2, [pc, #632]	; (8000f98 <VL53L0X_DataInit+0x2c0>)
 8000d1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a9d      	ldr	r2, [pc, #628]	; (8000f9c <VL53L0X_DataInit+0x2c4>)
 8000d26:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 f932 	bl	8000fa0 <VL53L0X_GetDeviceParameters>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000d42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d112      	bne.n	8000d70 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f103 0410 	add.w	r4, r3, #16
 8000d58:	f107 0510 	add.w	r5, r7, #16
 8000d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2264      	movs	r2, #100	; 0x64
 8000d74:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000d7e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d88:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000d92:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fe24 	bl	80009f0 <VL53L0X_WrByte>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000db0:	4313      	orrs	r3, r2
 8000db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000db6:	2201      	movs	r2, #1
 8000db8:	21ff      	movs	r1, #255	; 0xff
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fe18 	bl	80009f0 <VL53L0X_WrByte>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fe0c 	bl	80009f0 <VL53L0X_WrByte>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000de0:	4313      	orrs	r3, r2
 8000de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8000de6:	f107 030f 	add.w	r3, r7, #15
 8000dea:	461a      	mov	r2, r3
 8000dec:	2191      	movs	r1, #145	; 0x91
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fe80 	bl	8000af4 <VL53L0X_RdByte>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fdee 	bl	80009f0 <VL53L0X_WrByte>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000e22:	2200      	movs	r2, #0
 8000e24:	21ff      	movs	r1, #255	; 0xff
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fde2 	bl	80009f0 <VL53L0X_WrByte>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e34:	4313      	orrs	r3, r2
 8000e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2180      	movs	r1, #128	; 0x80
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff fdd6 	bl	80009f0 <VL53L0X_WrByte>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	653b      	str	r3, [r7, #80]	; 0x50
 8000e56:	e014      	b.n	8000e82 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8000e58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d114      	bne.n	8000e8a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8000e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2201      	movs	r2, #1
 8000e66:	4619      	mov	r1, r3
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fa79 	bl	8001360 <VL53L0X_SetLimitCheckEnable>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	461a      	mov	r2, r3
 8000e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e76:	4313      	orrs	r3, r2
 8000e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e7e:	3301      	adds	r3, #1
 8000e80:	653b      	str	r3, [r7, #80]	; 0x50
 8000e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	dde7      	ble.n	8000e58 <VL53L0X_DataInit+0x180>
 8000e88:	e000      	b.n	8000e8c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8000e8a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8000e8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d107      	bne.n	8000ea4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fa61 	bl	8001360 <VL53L0X_SetLimitCheckEnable>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000ea4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d107      	bne.n	8000ebc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000eac:	2200      	movs	r2, #0
 8000eae:	2103      	movs	r1, #3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fa55 	bl	8001360 <VL53L0X_SetLimitCheckEnable>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000ebc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d107      	bne.n	8000ed4 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fa49 	bl	8001360 <VL53L0X_SetLimitCheckEnable>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000ed4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d107      	bne.n	8000eec <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000edc:	2200      	movs	r2, #0
 8000ede:	2105      	movs	r1, #5
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fa3d 	bl	8001360 <VL53L0X_SetLimitCheckEnable>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8000eec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d108      	bne.n	8000f06 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000ef4:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8000ef8:	2100      	movs	r1, #0
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fae0 	bl	80014c0 <VL53L0X_SetLimitCheckValue>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8000f06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d108      	bne.n	8000f20 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f12:	2101      	movs	r1, #1
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 fad3 	bl	80014c0 <VL53L0X_SetLimitCheckValue>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d108      	bne.n	8000f3a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f28:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 fac6 	bl	80014c0 <VL53L0X_SetLimitCheckValue>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f3a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d107      	bne.n	8000f52 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f42:	2200      	movs	r2, #0
 8000f44:	2103      	movs	r1, #3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 faba 	bl	80014c0 <VL53L0X_SetLimitCheckValue>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10f      	bne.n	8000f7a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	22ff      	movs	r2, #255	; 0xff
 8000f5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	2101      	movs	r1, #1
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fd42 	bl	80009f0 <VL53L0X_WrByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8000f7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d103      	bne.n	8000f8a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8000f8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3758      	adds	r7, #88	; 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	00016b85 	.word	0x00016b85
 8000f9c:	000970a4 	.word	0x000970a4

08000fa0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f884 	bl	80010c0 <VL53L0X_GetDeviceMode>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d107      	bne.n	8000fd4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f960 	bl	8001290 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d107      	bne.n	8000ffa <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	3310      	adds	r3, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f981 	bl	80012f8 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d107      	bne.n	8001012 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3314      	adds	r3, #20
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fe3a 	bl	8000c82 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d134      	bne.n	8001084 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	e02a      	b.n	8001076 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d12a      	bne.n	800107e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	b299      	uxth	r1, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	3308      	adds	r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	4413      	add	r3, r2
 8001036:	3304      	adds	r3, #4
 8001038:	461a      	mov	r2, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 faa2 	bl	8001584 <VL53L0X_GetLimitCheckValue>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4313      	orrs	r3, r2
 8001048:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d117      	bne.n	8001082 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	b299      	uxth	r1, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3318      	adds	r3, #24
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	4413      	add	r3, r2
 800105e:	461a      	mov	r2, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fa09 	bl	8001478 <VL53L0X_GetLimitCheckEnable>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	4313      	orrs	r3, r2
 800106e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	3301      	adds	r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b05      	cmp	r3, #5
 800107a:	ddd1      	ble.n	8001020 <VL53L0X_GetDeviceParameters+0x80>
 800107c:	e002      	b.n	8001084 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800107e:	bf00      	nop
 8001080:	e000      	b.n	8001084 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8001082:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d107      	bne.n	800109c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	333c      	adds	r3, #60	; 0x3c
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fb04 	bl	80016a0 <VL53L0X_GetWrapAroundCheckEnable>
 8001098:	4603      	mov	r3, r0
 800109a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800109c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d107      	bne.n	80010b4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3304      	adds	r3, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f81b 	bl	80010e6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <VL53L0X_GetDeviceMode>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7c1a      	ldrb	r2, [r3, #16]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fccc 	bl	8001a94 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8001100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	460b      	mov	r3, r1
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4619      	mov	r1, r3
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 fc7e 	bl	8001a26 <VL53L0X_get_vcsel_pulse_period>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800112e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <sequence_step_enabled>:
}

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	72fb      	strb	r3, [r7, #11]
 800114a:	4613      	mov	r3, r2
 800114c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8001158:	7afb      	ldrb	r3, [r7, #11]
 800115a:	2b04      	cmp	r3, #4
 800115c:	d836      	bhi.n	80011cc <sequence_step_enabled+0x90>
 800115e:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <sequence_step_enabled+0x28>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	08001179 	.word	0x08001179
 8001168:	0800118b 	.word	0x0800118b
 800116c:	0800119d 	.word	0x0800119d
 8001170:	080011af 	.word	0x080011af
 8001174:	080011c1 	.word	0x080011c1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	111b      	asrs	r3, r3, #4
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	701a      	strb	r2, [r3, #0]
		break;
 8001188:	e022      	b.n	80011d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800118a:	7abb      	ldrb	r3, [r7, #10]
 800118c:	10db      	asrs	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	701a      	strb	r2, [r3, #0]
		break;
 800119a:	e019      	b.n	80011d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800119c:	7abb      	ldrb	r3, [r7, #10]
 800119e:	109b      	asrs	r3, r3, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	701a      	strb	r2, [r3, #0]
		break;
 80011ac:	e010      	b.n	80011d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80011ae:	7abb      	ldrb	r3, [r7, #10]
 80011b0:	119b      	asrs	r3, r3, #6
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	701a      	strb	r2, [r3, #0]
		break;
 80011be:	e007      	b.n	80011d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80011c0:	7abb      	ldrb	r3, [r7, #10]
 80011c2:	09db      	lsrs	r3, r3, #7
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	701a      	strb	r2, [r3, #0]
		break;
 80011ca:	e001      	b.n	80011d0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80011cc:	23fc      	movs	r3, #252	; 0xfc
 80011ce:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80011d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80011f2:	f107 030e 	add.w	r3, r7, #14
 80011f6:	461a      	mov	r2, r3
 80011f8:	2101      	movs	r1, #1
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fc7a 	bl	8000af4 <VL53L0X_RdByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800120c:	7bba      	ldrb	r2, [r7, #14]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2100      	movs	r1, #0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ff92 	bl	800113c <sequence_step_enabled>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8001224:	7bba      	ldrb	r2, [r7, #14]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3302      	adds	r3, #2
 800122a:	2101      	movs	r1, #1
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff85 	bl	800113c <sequence_step_enabled>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d108      	bne.n	8001250 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800123e:	7bba      	ldrb	r2, [r7, #14]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	2102      	movs	r1, #2
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff78 	bl	800113c <sequence_step_enabled>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d108      	bne.n	800126a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8001258:	7bba      	ldrb	r2, [r7, #14]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3303      	adds	r3, #3
 800125e:	2103      	movs	r1, #3
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff6b 	bl	800113c <sequence_step_enabled>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d108      	bne.n	8001284 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8001272:	7bba      	ldrb	r2, [r7, #14]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3304      	adds	r3, #4
 8001278:	2104      	movs	r1, #4
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff5e 	bl	800113c <sequence_step_enabled>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	461a      	mov	r2, r3
 80012a4:	21f8      	movs	r1, #248	; 0xf8
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fc4e 	bl	8000b48 <VL53L0X_RdWord>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d108      	bne.n	80012ca <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	461a      	mov	r2, r3
 80012be:	2104      	movs	r1, #4
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fc79 	bl	8000bb8 <VL53L0X_RdDWord>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80012d2:	89bb      	ldrh	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	89ba      	ldrh	r2, [r7, #12]
 80012dc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001306:	f107 030e 	add.w	r3, r7, #14
 800130a:	461a      	mov	r2, r3
 800130c:	2120      	movs	r1, #32
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fc1a 	bl	8000b48 <VL53L0X_RdWord>
 8001314:	4603      	mov	r3, r0
 8001316:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001318:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d118      	bne.n	8001352 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
 8001338:	e00b      	b.n	8001352 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001352:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]
 800136c:	4613      	mov	r3, r2
 800136e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d902      	bls.n	800138c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001386:	23fc      	movs	r3, #252	; 0xfc
 8001388:	75fb      	strb	r3, [r7, #23]
 800138a:	e05b      	b.n	8001444 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800139a:	2301      	movs	r3, #1
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	e00a      	b.n	80013b6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	330c      	adds	r3, #12
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d841      	bhi.n	8001440 <VL53L0X_SetLimitCheckEnable+0xe0>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	080013e7 	.word	0x080013e7
 80013cc:	080013fd 	.word	0x080013fd
 80013d0:	08001407 	.word	0x08001407
 80013d4:	08001411 	.word	0x08001411
 80013d8:	08001429 	.word	0x08001429

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80013e4:	e02e      	b.n	8001444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	461a      	mov	r2, r3
 80013ee:	2144      	movs	r1, #68	; 0x44
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fb21 	bl	8000a38 <VL53L0X_WrWord>
 80013f6:	4603      	mov	r3, r0
 80013f8:	75fb      	strb	r3, [r7, #23]

			break;
 80013fa:	e023      	b.n	8001444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8001404:	e01e      	b.n	8001444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800140e:	e019      	b.n	8001444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	22fe      	movs	r2, #254	; 0xfe
 800141a:	2160      	movs	r1, #96	; 0x60
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fb35 	bl	8000a8c <VL53L0X_UpdateByte>
 8001422:	4603      	mov	r3, r0
 8001424:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001426:	e00d      	b.n	8001444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800142e:	7b7b      	ldrb	r3, [r7, #13]
 8001430:	22ef      	movs	r2, #239	; 0xef
 8001432:	2160      	movs	r1, #96	; 0x60
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fb29 	bl	8000a8c <VL53L0X_UpdateByte>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800143e:	e001      	b.n	8001444 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001440:	23fc      	movs	r3, #252	; 0xfc
 8001442:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10f      	bne.n	800146c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800145e:	e005      	b.n	800146c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800146c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	460b      	mov	r3, r1
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800148a:	897b      	ldrh	r3, [r7, #10]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d905      	bls.n	800149c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001490:	23fc      	movs	r3, #252	; 0xfc
 8001492:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e008      	b.n	80014ae <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014a6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7dba      	ldrb	r2, [r7, #22]
 80014ac:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80014ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	371c      	adds	r7, #28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	460b      	mov	r3, r1
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80014d2:	897b      	ldrh	r3, [r7, #10]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014dc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80014de:	7dbb      	ldrb	r3, [r7, #22]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80014e4:	897b      	ldrh	r3, [r7, #10]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	330c      	adds	r3, #12
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	e040      	b.n	8001576 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80014f4:	897b      	ldrh	r3, [r7, #10]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d830      	bhi.n	800155c <VL53L0X_SetLimitCheckValue+0x9c>
 80014fa:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <VL53L0X_SetLimitCheckValue+0x40>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	08001519 	.word	0x08001519
 8001504:	08001521 	.word	0x08001521
 8001508:	08001537 	.word	0x08001537
 800150c:	0800153f 	.word	0x0800153f
 8001510:	08001547 	.word	0x08001547
 8001514:	08001547 	.word	0x08001547

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800151e:	e01f      	b.n	8001560 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001524:	b29b      	uxth	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	2144      	movs	r1, #68	; 0x44
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff fa84 	bl	8000a38 <VL53L0X_WrWord>
 8001530:	4603      	mov	r3, r0
 8001532:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001534:	e014      	b.n	8001560 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800153c:	e010      	b.n	8001560 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8001544:	e00c      	b.n	8001560 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800154a:	b29b      	uxth	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	2164      	movs	r1, #100	; 0x64
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff fa71 	bl	8000a38 <VL53L0X_WrWord>
 8001556:	4603      	mov	r3, r0
 8001558:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800155a:	e001      	b.n	8001560 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800155c:	23fc      	movs	r3, #252	; 0xfc
 800155e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001568:	897b      	ldrh	r3, [r7, #10]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	330c      	adds	r3, #12
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop

08001584 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	460b      	mov	r3, r1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001592:	2300      	movs	r3, #0
 8001594:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800159a:	897b      	ldrh	r3, [r7, #10]
 800159c:	2b05      	cmp	r3, #5
 800159e:	d847      	bhi.n	8001630 <VL53L0X_GetLimitCheckValue+0xac>
 80015a0:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <VL53L0X_GetLimitCheckValue+0x24>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015c1 	.word	0x080015c1
 80015ac:	080015cd 	.word	0x080015cd
 80015b0:	080015f3 	.word	0x080015f3
 80015b4:	080015ff 	.word	0x080015ff
 80015b8:	0800160b 	.word	0x0800160b
 80015bc:	0800160b 	.word	0x0800160b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	77bb      	strb	r3, [r7, #30]
		break;
 80015ca:	e033      	b.n	8001634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80015cc:	f107 0316 	add.w	r3, r7, #22
 80015d0:	461a      	mov	r2, r3
 80015d2:	2144      	movs	r1, #68	; 0x44
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7ff fab7 	bl	8000b48 <VL53L0X_RdWord>
 80015da:	4603      	mov	r3, r0
 80015dc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80015de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80015e6:	8afb      	ldrh	r3, [r7, #22]
 80015e8:	025b      	lsls	r3, r3, #9
 80015ea:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	77bb      	strb	r3, [r7, #30]
		break;
 80015f0:	e020      	b.n	8001634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	77bb      	strb	r3, [r7, #30]
		break;
 80015fc:	e01a      	b.n	8001634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	77bb      	strb	r3, [r7, #30]
		break;
 8001608:	e014      	b.n	8001634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800160a:	f107 0316 	add.w	r3, r7, #22
 800160e:	461a      	mov	r2, r3
 8001610:	2164      	movs	r1, #100	; 0x64
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff fa98 	bl	8000b48 <VL53L0X_RdWord>
 8001618:	4603      	mov	r3, r0
 800161a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800161c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	77bb      	strb	r3, [r7, #30]
		break;
 800162e:	e001      	b.n	8001634 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001630:	23fc      	movs	r3, #252	; 0xfc
 8001632:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001634:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d12a      	bne.n	8001692 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800163c:	7fbb      	ldrb	r3, [r7, #30]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d124      	bne.n	800168c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d110      	bne.n	800166a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001648:	897b      	ldrh	r3, [r7, #10]
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	330c      	adds	r3, #12
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800165c:	897b      	ldrh	r3, [r7, #10]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4413      	add	r3, r2
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001668:	e013      	b.n	8001692 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001670:	897b      	ldrh	r3, [r7, #10]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	330c      	adds	r3, #12
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800167e:	897b      	ldrh	r3, [r7, #10]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800168a:	e002      	b.n	8001692 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001692:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001696:	4618      	mov	r0, r3
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop

080016a0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80016ae:	f107 030e 	add.w	r3, r7, #14
 80016b2:	461a      	mov	r2, r3
 80016b4:	2101      	movs	r1, #1
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fa1c 	bl	8000af4 <VL53L0X_RdByte>
 80016bc:	4603      	mov	r3, r0
 80016be:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80016c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10e      	bne.n	80016e6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80016c8:	7bba      	ldrb	r2, [r7, #14]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80016d0:	7bbb      	ldrb	r3, [r7, #14]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da03      	bge.n	80016e0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	e002      	b.n	80016e6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d104      	bne.n	80016f8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8001712:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001716:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	461a      	mov	r2, r3
 8001724:	2128      	movs	r1, #40	; 0x28
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fa0e 	bl	8000b48 <VL53L0X_RdWord>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11e      	bne.n	8001776 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8001738:	893b      	ldrh	r3, [r7, #8]
 800173a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173e:	b29b      	uxth	r3, r3
 8001740:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8001742:	893b      	ldrh	r3, [r7, #8]
 8001744:	461a      	mov	r2, r3
 8001746:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800174a:	429a      	cmp	r2, r3
 800174c:	dd0b      	ble.n	8001766 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800174e:	893a      	ldrh	r2, [r7, #8]
 8001750:	897b      	ldrh	r3, [r7, #10]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21b      	sxth	r3, r3
 8001758:	461a      	mov	r2, r3
					* 250;
 800175a:	23fa      	movs	r3, #250	; 0xfa
 800175c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8001766:	893b      	ldrh	r3, [r7, #8]
 8001768:	b21b      	sxth	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	23fa      	movs	r3, #250	; 0xfa
 800176e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <VL53L0X_decode_vcsel_period>:
	return Status;
}


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	3301      	adds	r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <VL53L0X_calc_macro_period_ps>:
	return Status;
}


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80017b4:	f240 6277 	movw	r2, #1655	; 0x677
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80017c0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80017c4:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	fb02 f303 	mul.w	r3, r2, r3
 80017d4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80017d6:	68bb      	ldr	r3, [r7, #8]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <VL53L0X_decode_timeout>:
	return encoded_timeout;

}

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80017f6:	88fa      	ldrh	r2, [r7, #6]
 80017f8:	0a12      	lsrs	r2, r2, #8
 80017fa:	b292      	uxth	r2, r2
 80017fc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ffbd 	bl	80017a8 <VL53L0X_calc_macro_period_ps>
 800182e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <VL53L0X_calc_timeout_us+0x50>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <VL53L0X_calc_timeout_us+0x50>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8001856:	697b      	ldr	r3, [r7, #20]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	10624dd3 	.word	0x10624dd3

08001864 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	; 0x30
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	460b      	mov	r3, r1
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800188a:	7afb      	ldrb	r3, [r7, #11]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <get_sequence_step_timeout+0x38>
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d002      	beq.n	800189c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d128      	bne.n	80018ee <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800189c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80018a0:	461a      	mov	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff fc31 	bl	800110c <VL53L0X_GetVcselPulsePeriod>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80018b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	461a      	mov	r2, r3
 80018be:	2146      	movs	r1, #70	; 0x46
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff f917 	bl	8000af4 <VL53L0X_RdByte>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80018cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff86 	bl	80017e4 <VL53L0X_decode_timeout>
 80018d8:	4603      	mov	r3, r0
 80018da:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80018dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80018e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018e2:	4619      	mov	r1, r3
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff ff93 	bl	8001810 <VL53L0X_calc_timeout_us>
 80018ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80018ec:	e092      	b.n	8001a14 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d135      	bne.n	8001960 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80018f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80018f8:	461a      	mov	r2, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff fc05 	bl	800110c <VL53L0X_GetVcselPulsePeriod>
 8001902:	4603      	mov	r3, r0
 8001904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8001908:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8081 	bne.w	8001a14 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8001912:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8001916:	461a      	mov	r2, r3
 8001918:	2100      	movs	r1, #0
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fbf6 	bl	800110c <VL53L0X_GetVcselPulsePeriod>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8001926:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800192e:	f107 031e 	add.w	r3, r7, #30
 8001932:	461a      	mov	r2, r3
 8001934:	2151      	movs	r1, #81	; 0x51
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff f906 	bl	8000b48 <VL53L0X_RdWord>
 800193c:	4603      	mov	r3, r0
 800193e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8001942:	8bfb      	ldrh	r3, [r7, #30]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff4d 	bl	80017e4 <VL53L0X_decode_timeout>
 800194a:	4603      	mov	r3, r0
 800194c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800194e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001954:	4619      	mov	r1, r3
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff ff5a 	bl	8001810 <VL53L0X_calc_timeout_us>
 800195c:	62b8      	str	r0, [r7, #40]	; 0x28
 800195e:	e059      	b.n	8001a14 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	2b04      	cmp	r3, #4
 8001964:	d156      	bne.n	8001a14 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff fc37 	bl	80011e0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01d      	beq.n	80019b8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800197c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8001980:	461a      	mov	r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f7ff fbc1 	bl	800110c <VL53L0X_GetVcselPulsePeriod>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8001990:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10f      	bne.n	80019b8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8001998:	f107 031e 	add.w	r3, r7, #30
 800199c:	461a      	mov	r2, r3
 800199e:	2151      	movs	r1, #81	; 0x51
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff f8d1 	bl	8000b48 <VL53L0X_RdWord>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80019ac:	8bfb      	ldrh	r3, [r7, #30]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff18 	bl	80017e4 <VL53L0X_decode_timeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80019b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80019c0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80019c4:	461a      	mov	r2, r3
 80019c6:	2101      	movs	r1, #1
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f7ff fb9f 	bl	800110c <VL53L0X_GetVcselPulsePeriod>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80019d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10f      	bne.n	80019fc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	461a      	mov	r2, r3
 80019e2:	2171      	movs	r1, #113	; 0x71
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff f8af 	bl	8000b48 <VL53L0X_RdWord>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80019f0:	8bbb      	ldrh	r3, [r7, #28]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fef6 	bl	80017e4 <VL53L0X_decode_timeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80019fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8001a04:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff feff 	bl	8001810 <VL53L0X_calc_timeout_us>
 8001a12:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a18:	601a      	str	r2, [r3, #0]

	return Status;
 8001a1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3730      	adds	r7, #48	; 0x30
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d00a      	beq.n	8001a58 <VL53L0X_get_vcsel_pulse_period+0x32>
 8001a42:	e013      	b.n	8001a6c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8001a44:	f107 0316 	add.w	r3, r7, #22
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2150      	movs	r1, #80	; 0x50
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f7ff f851 	bl	8000af4 <VL53L0X_RdByte>
 8001a52:	4603      	mov	r3, r0
 8001a54:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8001a56:	e00b      	b.n	8001a70 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8001a58:	f107 0316 	add.w	r3, r7, #22
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2170      	movs	r1, #112	; 0x70
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff f847 	bl	8000af4 <VL53L0X_RdByte>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8001a6a:	e001      	b.n	8001a70 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001a6c:	23fc      	movs	r3, #252	; 0xfc
 8001a6e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8001a70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8001a78:	7dbb      	ldrb	r3, [r7, #22]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fe81 	bl	8001782 <VL53L0X_decode_vcsel_period>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	701a      	strb	r2, [r3, #0]

	return Status;
 8001a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
	return Status;
}

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	; 0x40
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8001aa4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aa8:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8001aaa:	f240 7376 	movw	r3, #1910	; 0x776
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8001ab0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8001ab6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8001abc:	f240 234e 	movw	r3, #590	; 0x24e
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8001ac2:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8001ac8:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8001ace:	f240 2326 	movw	r3, #550	; 0x226
 8001ad2:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8001ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001adc:	441a      	add	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff fb79 	bl	80011e0 <VL53L0X_GetSequenceStepEnables>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8001af4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8001afc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b00:	e075      	b.n	8001bee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8001b02:	7e3b      	ldrb	r3, [r7, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8001b08:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8001b0e:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d030      	beq.n	8001b76 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fea1 	bl	8001864 <get_sequence_step_timeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8001b28:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d122      	bne.n	8001b76 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8001b30:	7e3b      	ldrb	r3, [r7, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8001b3a:	6939      	ldr	r1, [r7, #16]
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8001b40:	441a      	add	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8001b46:	7ebb      	ldrb	r3, [r7, #26]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8001b50:	6939      	ldr	r1, [r7, #16]
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	440b      	add	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8001b58:	441a      	add	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e00a      	b.n	8001b76 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8001b60:	7e7b      	ldrb	r3, [r7, #25]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d007      	beq.n	8001b76 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8001b70:	441a      	add	r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001b76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d114      	bne.n	8001ba8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8001b7e:	7efb      	ldrb	r3, [r7, #27]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d011      	beq.n	8001ba8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fe69 	bl	8001864 <get_sequence_step_timeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8001ba2:	441a      	add	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001ba8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d114      	bne.n	8001bda <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8001bb0:	7f3b      	ldrb	r3, [r7, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d011      	beq.n	8001bda <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fe50 	bl	8001864 <get_sequence_step_timeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8001bce:	6979      	ldr	r1, [r7, #20]
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8001bd4:	441a      	add	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001bda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001bea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3740      	adds	r7, #64	; 0x40
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x28>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f931 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7fe fd62 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f93b 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c60:	f000 f911 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000190 	.word	0x20000190
 8001c7c:	20000198 	.word	0x20000198
 8001c80:	20000194 	.word	0x20000194

08001c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000198 	.word	0x20000198
 8001ca8:	200002b4 	.word	0x200002b4

08001cac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200002b4 	.word	0x200002b4

08001cc4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_Delay+0x44>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000198 	.word	0x20000198

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff47 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff5c 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffb0 	bl	8001e2c <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee6:	e154      	b.n	8002192 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8146 	beq.w	800218c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d005      	beq.n	8001f18 <HAL_GPIO_Init+0x40>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d130      	bne.n	8001f7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f4e:	2201      	movs	r2, #1
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	f003 0201 	and.w	r2, r3, #1
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d017      	beq.n	8001fb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2203      	movs	r2, #3
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d123      	bne.n	800200a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	08da      	lsrs	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3208      	adds	r2, #8
 8001fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	6939      	ldr	r1, [r7, #16]
 8002006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0203 	and.w	r2, r3, #3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80a0 	beq.w	800218c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204c:	4b58      	ldr	r3, [pc, #352]	; (80021b0 <HAL_GPIO_Init+0x2d8>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_GPIO_Init+0x2d8>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b55      	ldr	r3, [pc, #340]	; (80021b0 <HAL_GPIO_Init+0x2d8>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002064:	4a53      	ldr	r2, [pc, #332]	; (80021b4 <HAL_GPIO_Init+0x2dc>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800208e:	d019      	beq.n	80020c4 <HAL_GPIO_Init+0x1ec>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a49      	ldr	r2, [pc, #292]	; (80021b8 <HAL_GPIO_Init+0x2e0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_GPIO_Init+0x1e8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a48      	ldr	r2, [pc, #288]	; (80021bc <HAL_GPIO_Init+0x2e4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d00d      	beq.n	80020bc <HAL_GPIO_Init+0x1e4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a47      	ldr	r2, [pc, #284]	; (80021c0 <HAL_GPIO_Init+0x2e8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d007      	beq.n	80020b8 <HAL_GPIO_Init+0x1e0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a46      	ldr	r2, [pc, #280]	; (80021c4 <HAL_GPIO_Init+0x2ec>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <HAL_GPIO_Init+0x1dc>
 80020b0:	2304      	movs	r3, #4
 80020b2:	e008      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020b4:	2305      	movs	r3, #5
 80020b6:	e006      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020b8:	2303      	movs	r3, #3
 80020ba:	e004      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020bc:	2302      	movs	r3, #2
 80020be:	e002      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_GPIO_Init+0x1ee>
 80020c4:	2300      	movs	r3, #0
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	f002 0203 	and.w	r2, r2, #3
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	4093      	lsls	r3, r2
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d6:	4937      	ldr	r1, [pc, #220]	; (80021b4 <HAL_GPIO_Init+0x2dc>)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	3302      	adds	r3, #2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e4:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002108:	4a2f      	ldr	r2, [pc, #188]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800210e:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002132:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002138:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	43db      	mvns	r3, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002186:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <HAL_GPIO_Init+0x2f0>)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3301      	adds	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f aea3 	bne.w	8001ee8 <HAL_GPIO_Init+0x10>
  }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	48000800 	.word	0x48000800
 80021c0:	48000c00 	.word	0x48000c00
 80021c4:	48001000 	.word	0x48001000
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e081      	b.n	8002312 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fa7e 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800224c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	e006      	b.n	8002284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d104      	bne.n	8002296 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69d9      	ldr	r1, [r3, #28]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	461a      	mov	r2, r3
 8002328:	460b      	mov	r3, r1
 800232a:	817b      	strh	r3, [r7, #10]
 800232c:	4613      	mov	r3, r2
 800232e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b20      	cmp	r3, #32
 800233a:	f040 80da 	bne.w	80024f2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_I2C_Master_Transmit+0x30>
 8002348:	2302      	movs	r3, #2
 800234a:	e0d3      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x1d8>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002354:	f7ff fcaa 	bl	8001cac <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2319      	movs	r3, #25
 8002360:	2201      	movs	r2, #1
 8002362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f9e6 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0be      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2210      	movs	r2, #16
 8002382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	893a      	ldrh	r2, [r7, #8]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2bff      	cmp	r3, #255	; 0xff
 80023a6:	d90e      	bls.n	80023c6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	22ff      	movs	r2, #255	; 0xff
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	8979      	ldrh	r1, [r7, #10]
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_I2C_Master_Transmit+0x1e0>)
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fb58 	bl	8002a74 <I2C_TransferConfig>
 80023c4:	e06c      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	8979      	ldrh	r1, [r7, #10]
 80023d8:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_I2C_Master_Transmit+0x1e0>)
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fb47 	bl	8002a74 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023e6:	e05b      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	6a39      	ldr	r1, [r7, #32]
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f9e3 	bl	80027b8 <I2C_WaitOnTXISFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e07b      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d034      	beq.n	80024a0 <HAL_I2C_Master_Transmit+0x184>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d130      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2200      	movs	r2, #0
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f975 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e04d      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2bff      	cmp	r3, #255	; 0xff
 8002460:	d90e      	bls.n	8002480 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	b2da      	uxtb	r2, r3
 800246e:	8979      	ldrh	r1, [r7, #10]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fafb 	bl	8002a74 <I2C_TransferConfig>
 800247e:	e00f      	b.n	80024a0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	b2da      	uxtb	r2, r3
 8002490:	8979      	ldrh	r1, [r7, #10]
 8002492:	2300      	movs	r3, #0
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 faea 	bl	8002a74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d19e      	bne.n	80023e8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	6a39      	ldr	r1, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f9c2 	bl	8002838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e01a      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2220      	movs	r2, #32
 80024c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_I2C_Master_Transmit+0x1e4>)
 80024d2:	400b      	ands	r3, r1
 80024d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e000      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
  }
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	80002000 	.word	0x80002000
 8002500:	fe00e800 	.word	0xfe00e800

08002504 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	461a      	mov	r2, r3
 8002510:	460b      	mov	r3, r1
 8002512:	817b      	strh	r3, [r7, #10]
 8002514:	4613      	mov	r3, r2
 8002516:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	f040 80db 	bne.w	80026dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2C_Master_Receive+0x30>
 8002530:	2302      	movs	r3, #2
 8002532:	e0d4      	b.n	80026de <HAL_I2C_Master_Receive+0x1da>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800253c:	f7ff fbb6 	bl	8001cac <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2319      	movs	r3, #25
 8002548:	2201      	movs	r2, #1
 800254a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f8f2 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0bf      	b.n	80026de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2222      	movs	r2, #34	; 0x22
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2210      	movs	r2, #16
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	893a      	ldrh	r2, [r7, #8]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	2bff      	cmp	r3, #255	; 0xff
 800258e:	d90e      	bls.n	80025ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	b2da      	uxtb	r2, r3
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <HAL_I2C_Master_Receive+0x1e4>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa64 	bl	8002a74 <I2C_TransferConfig>
 80025ac:	e06d      	b.n	800268a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	8979      	ldrh	r1, [r7, #10]
 80025c0:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_I2C_Master_Receive+0x1e4>)
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa53 	bl	8002a74 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025ce:	e05c      	b.n	800268a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	6a39      	ldr	r1, [r7, #32]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f96b 	bl	80028b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e07c      	b.n	80026de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d034      	beq.n	800268a <HAL_I2C_Master_Receive+0x186>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d130      	bne.n	800268a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	2200      	movs	r2, #0
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f880 	bl	8002738 <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e04d      	b.n	80026de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	2bff      	cmp	r3, #255	; 0xff
 800264a:	d90e      	bls.n	800266a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	22ff      	movs	r2, #255	; 0xff
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	b2da      	uxtb	r2, r3
 8002658:	8979      	ldrh	r1, [r7, #10]
 800265a:	2300      	movs	r3, #0
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fa06 	bl	8002a74 <I2C_TransferConfig>
 8002668:	e00f      	b.n	800268a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	b2da      	uxtb	r2, r3
 800267a:	8979      	ldrh	r1, [r7, #10]
 800267c:	2300      	movs	r3, #0
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f9f5 	bl	8002a74 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d19d      	bne.n	80025d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6a39      	ldr	r1, [r7, #32]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f8cd 	bl	8002838 <I2C_WaitOnSTOPFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e01a      	b.n	80026de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2220      	movs	r2, #32
 80026ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_I2C_Master_Receive+0x1e8>)
 80026bc:	400b      	ands	r3, r1
 80026be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	80002400 	.word	0x80002400
 80026ec:	fe00e800 	.word	0xfe00e800

080026f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d103      	bne.n	800270e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2200      	movs	r2, #0
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d007      	beq.n	800272c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	619a      	str	r2, [r3, #24]
  }
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002748:	e022      	b.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002750:	d01e      	beq.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7ff faab 	bl	8001cac <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d113      	bne.n	8002790 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e00f      	b.n	80027b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	4013      	ands	r3, r2
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	429a      	cmp	r2, r3
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d0cd      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027c4:	e02c      	b.n	8002820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f8dc 	bl	8002988 <I2C_IsAcknowledgeFailed>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02a      	b.n	8002830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e0:	d01e      	beq.n	8002820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7ff fa63 	bl	8001cac <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d113      	bne.n	8002820 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e007      	b.n	8002830 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d1cb      	bne.n	80027c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002844:	e028      	b.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f89c 	bl	8002988 <I2C_IsAcknowledgeFailed>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e026      	b.n	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7ff fa27 	bl	8001cac <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d113      	bne.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e007      	b.n	80028a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d1cf      	bne.n	8002846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028bc:	e055      	b.n	800296a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f860 	bl	8002988 <I2C_IsAcknowledgeFailed>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e053      	b.n	800297a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d129      	bne.n	8002934 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d105      	bne.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e03f      	b.n	800297a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2220      	movs	r2, #32
 8002900:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800290e:	400b      	ands	r3, r1
 8002910:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e022      	b.n	800297a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002934:	f7ff f9ba 	bl	8001cac <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d302      	bcc.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f043 0220 	orr.w	r2, r3, #32
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e007      	b.n	800297a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d1a2      	bne.n	80028be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	fe00e800 	.word	0xfe00e800

08002988 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d161      	bne.n	8002a66 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029b0:	d02b      	beq.n	8002a0a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029c2:	e022      	b.n	8002a0a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ca:	d01e      	beq.n	8002a0a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029cc:	f7ff f96e 	bl	8001cac <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d302      	bcc.n	80029e2 <I2C_IsAcknowledgeFailed+0x5a>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d113      	bne.n	8002a0a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e02e      	b.n	8002a68 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d1d5      	bne.n	80029c4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2220      	movs	r2, #32
 8002a26:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fe61 	bl	80026f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <I2C_IsAcknowledgeFailed+0xe8>)
 8002a3a:	400b      	ands	r3, r1
 8002a3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	fe00e800 	.word	0xfe00e800

08002a74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	817b      	strh	r3, [r7, #10]
 8002a82:	4613      	mov	r3, r2
 8002a84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	0d5b      	lsrs	r3, r3, #21
 8002a90:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <I2C_TransferConfig+0x58>)
 8002a96:	430b      	orrs	r3, r1
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	ea02 0103 	and.w	r1, r2, r3
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002aa4:	7a7b      	ldrb	r3, [r7, #9]
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	03ff63ff 	.word	0x03ff63ff

08002ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d138      	bne.n	8002b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e032      	b.n	8002b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	e000      	b.n	8002b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
  }
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b20      	cmp	r3, #32
 8002b7a:	d139      	bne.n	8002bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e033      	b.n	8002bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2224      	movs	r2, #36	; 0x24
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f001 b823 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 817d 	beq.w	8002f36 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c3c:	4bbc      	ldr	r3, [pc, #752]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 030c 	and.w	r3, r3, #12
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d00c      	beq.n	8002c62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c48:	4bb9      	ldr	r3, [pc, #740]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d15c      	bne.n	8002d0e <HAL_RCC_OscConfig+0x10e>
 8002c54:	4bb6      	ldr	r3, [pc, #728]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d155      	bne.n	8002d0e <HAL_RCC_OscConfig+0x10e>
 8002c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d102      	bne.n	8002c94 <HAL_RCC_OscConfig+0x94>
 8002c8e:	4ba8      	ldr	r3, [pc, #672]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	e015      	b.n	8002cc0 <HAL_RCC_OscConfig+0xc0>
 8002c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c98:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002cb0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002cbc:	4b9c      	ldr	r3, [pc, #624]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002cc8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ccc:	fa92 f2a2 	rbit	r2, r2
 8002cd0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002cd4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f002 021f 	and.w	r2, r2, #31
 8002ce8:	2101      	movs	r1, #1
 8002cea:	fa01 f202 	lsl.w	r2, r1, r2
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 811f 	beq.w	8002f34 <HAL_RCC_OscConfig+0x334>
 8002cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 8116 	bne.w	8002f34 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f000 bfaf 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12e>
 8002d20:	4b83      	ldr	r3, [pc, #524]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a82      	ldr	r2, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	e036      	b.n	8002d9c <HAL_RCC_OscConfig+0x19c>
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x158>
 8002d3e:	4b7c      	ldr	r3, [pc, #496]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a7b      	ldr	r2, [pc, #492]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a78      	ldr	r2, [pc, #480]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e021      	b.n	8002d9c <HAL_RCC_OscConfig+0x19c>
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x184>
 8002d6a:	4b71      	ldr	r3, [pc, #452]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a70      	ldr	r2, [pc, #448]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6d      	ldr	r2, [pc, #436]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0x19c>
 8002d84:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a66      	ldr	r2, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d9c:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	f023 020f 	bic.w	r2, r3, #15
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	495f      	ldr	r1, [pc, #380]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d059      	beq.n	8002e7a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe ff71 	bl	8001cac <HAL_GetTick>
 8002dca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe ff6c 	bl	8001cac <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d902      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	f000 bf43 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
 8002de6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002dfa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d102      	bne.n	8002e18 <HAL_RCC_OscConfig+0x218>
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e015      	b.n	8002e44 <HAL_RCC_OscConfig+0x244>
 8002e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e48:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e50:	fa92 f2a2 	rbit	r2, r2
 8002e54:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e5c:	fab2 f282 	clz	r2, r2
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f042 0220 	orr.w	r2, r2, #32
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f002 021f 	and.w	r2, r2, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ab      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x1d0>
 8002e78:	e05d      	b.n	8002f36 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe ff17 	bl	8001cac <HAL_GetTick>
 8002e7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e84:	f7fe ff12 	bl	8001cac <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d902      	bls.n	8002e9a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	f000 bee9 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
 8002e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e9e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002eae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d102      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2cc>
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	e015      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2f8>
 8002ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ee4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ee8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_RCC_OscConfig+0x330>)
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002efc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f00:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f04:	fa92 f2a2 	rbit	r2, r2
 8002f08:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f10:	fab2 f282 	clz	r2, r2
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f002 021f 	and.w	r2, r2, #31
 8002f20:	2101      	movs	r1, #1
 8002f22:	fa01 f202 	lsl.w	r2, r1, r2
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ab      	bne.n	8002e84 <HAL_RCC_OscConfig+0x284>
 8002f2c:	e003      	b.n	8002f36 <HAL_RCC_OscConfig+0x336>
 8002f2e:	bf00      	nop
 8002f30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 817d 	beq.w	8003246 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f4c:	4ba6      	ldr	r3, [pc, #664]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f58:	4ba3      	ldr	r3, [pc, #652]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d172      	bne.n	800304a <HAL_RCC_OscConfig+0x44a>
 8002f64:	4ba0      	ldr	r3, [pc, #640]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d16c      	bne.n	800304a <HAL_RCC_OscConfig+0x44a>
 8002f70:	2302      	movs	r3, #2
 8002f72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002f82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3a0>
 8002f9a:	4b93      	ldr	r3, [pc, #588]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	e013      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3c8>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002fc4:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002fce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002fd2:	fa92 f2a2 	rbit	r2, r2
 8002fd6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002fda:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCC_OscConfig+0x410>
 8002ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d002      	beq.n	8003010 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f000 be2e 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b75      	ldr	r3, [pc, #468]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	21f8      	movs	r1, #248	; 0xf8
 8003026:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800302e:	fa91 f1a1 	rbit	r1, r1
 8003032:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003036:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800303a:	fab1 f181 	clz	r1, r1
 800303e:	b2c9      	uxtb	r1, r1
 8003040:	408b      	lsls	r3, r1
 8003042:	4969      	ldr	r1, [pc, #420]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003048:	e0fd      	b.n	8003246 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8088 	beq.w	800316c <HAL_RCC_OscConfig+0x56c>
 800305c:	2301      	movs	r3, #1
 800305e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800306e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800307c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	461a      	mov	r2, r3
 8003084:	2301      	movs	r3, #1
 8003086:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fe10 	bl	8001cac <HAL_GetTick>
 800308c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe fe0b 	bl	8001cac <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	f000 bde2 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d102      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4d8>
 80030d2:	4b45      	ldr	r3, [pc, #276]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	e013      	b.n	8003100 <HAL_RCC_OscConfig+0x500>
 80030d8:	2302      	movs	r3, #2
 80030da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80030ea:	2302      	movs	r3, #2
 80030ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80030f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80030fc:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2202      	movs	r2, #2
 8003102:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003106:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800310a:	fa92 f2a2 	rbit	r2, r2
 800310e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003112:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003116:	fab2 f282 	clz	r2, r2
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	f042 0220 	orr.w	r2, r2, #32
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	f002 021f 	and.w	r2, r2, #31
 8003126:	2101      	movs	r1, #1
 8003128:	fa01 f202 	lsl.w	r2, r1, r2
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0af      	beq.n	8003092 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	21f8      	movs	r1, #248	; 0xf8
 8003148:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003150:	fa91 f1a1 	rbit	r1, r1
 8003154:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003158:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800315c:	fab1 f181 	clz	r1, r1
 8003160:	b2c9      	uxtb	r1, r1
 8003162:	408b      	lsls	r3, r1
 8003164:	4920      	ldr	r1, [pc, #128]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
 800316a:	e06c      	b.n	8003246 <HAL_RCC_OscConfig+0x646>
 800316c:	2301      	movs	r3, #1
 800316e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800317e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800318c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	461a      	mov	r2, r3
 8003194:	2300      	movs	r3, #0
 8003196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fd88 	bl	8001cac <HAL_GetTick>
 800319c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fe fd83 	bl	8001cac <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	f000 bd5a 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
 80031b8:	2302      	movs	r3, #2
 80031ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d104      	bne.n	80031ec <HAL_RCC_OscConfig+0x5ec>
 80031e2:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <HAL_RCC_OscConfig+0x5e8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	e015      	b.n	8003214 <HAL_RCC_OscConfig+0x614>
 80031e8:	40021000 	.word	0x40021000
 80031ec:	2302      	movs	r3, #2
 80031ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031fe:	2302      	movs	r3, #2
 8003200:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003204:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003210:	4bc8      	ldr	r3, [pc, #800]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2202      	movs	r2, #2
 8003216:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800321a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800321e:	fa92 f2a2 	rbit	r2, r2
 8003222:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003226:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800322a:	fab2 f282 	clz	r2, r2
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	f042 0220 	orr.w	r2, r2, #32
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	f002 021f 	and.w	r2, r2, #31
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ad      	bne.n	80031a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8110 	beq.w	800347c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d079      	beq.n	8003360 <HAL_RCC_OscConfig+0x760>
 800326c:	2301      	movs	r3, #1
 800326e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800327e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4bab      	ldr	r3, [pc, #684]	; (8003538 <HAL_RCC_OscConfig+0x938>)
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	461a      	mov	r2, r3
 8003292:	2301      	movs	r3, #1
 8003294:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7fe fd09 	bl	8001cac <HAL_GetTick>
 800329a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fe fd04 	bl	8001cac <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d902      	bls.n	80032b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	f000 bcdb 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
 80032b6:	2302      	movs	r3, #2
 80032b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032d0:	2202      	movs	r2, #2
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	fa93 f2a3 	rbit	r2, r3
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032f4:	2202      	movs	r2, #2
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	fa93 f2a3 	rbit	r2, r3
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800330e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003310:	4b88      	ldr	r3, [pc, #544]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 8003312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003318:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800331c:	2102      	movs	r1, #2
 800331e:	6019      	str	r1, [r3, #0]
 8003320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003324:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	fa93 f1a3 	rbit	r1, r3
 800332e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003332:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003336:	6019      	str	r1, [r3, #0]
  return result;
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2101      	movs	r1, #1
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0a0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x6a0>
 800335e:	e08d      	b.n	800347c <HAL_RCC_OscConfig+0x87c>
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003382:	601a      	str	r2, [r3, #0]
  return result;
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800338c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	4b68      	ldr	r3, [pc, #416]	; (8003538 <HAL_RCC_OscConfig+0x938>)
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	461a      	mov	r2, r3
 800339e:	2300      	movs	r3, #0
 80033a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7fe fc83 	bl	8001cac <HAL_GetTick>
 80033a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fe fc7e 	bl	8001cac <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d902      	bls.n	80033c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	f000 bc55 	b.w	8003c6c <HAL_RCC_OscConfig+0x106c>
 80033c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033ca:	2202      	movs	r2, #2
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033ee:	2202      	movs	r2, #2
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003412:	2202      	movs	r2, #2
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fa93 f2a3 	rbit	r2, r3
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800342c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 8003430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003436:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800343a:	2102      	movs	r1, #2
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	fa93 f1a3 	rbit	r1, r3
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003454:	6019      	str	r1, [r3, #0]
  return result;
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d197      	bne.n	80033ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 81a1 	beq.w	80037d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003498:	4b26      	ldr	r3, [pc, #152]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d116      	bne.n	80034d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4a22      	ldr	r2, [pc, #136]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	61d3      	str	r3, [r2, #28]
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_RCC_OscConfig+0x93c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11a      	bne.n	8003514 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_RCC_OscConfig+0x93c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a16      	ldr	r2, [pc, #88]	; (800353c <HAL_RCC_OscConfig+0x93c>)
 80034e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ea:	f7fe fbdf 	bl	8001cac <HAL_GetTick>
 80034ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	e009      	b.n	8003508 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7fe fbda 	bl	8001cac <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b64      	cmp	r3, #100	; 0x64
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e3b1      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_RCC_OscConfig+0x93c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ef      	beq.n	80034f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10d      	bne.n	8003540 <HAL_RCC_OscConfig+0x940>
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a02      	ldr	r2, [pc, #8]	; (8003534 <HAL_RCC_OscConfig+0x934>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e03c      	b.n	80035ac <HAL_RCC_OscConfig+0x9ac>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	10908120 	.word	0x10908120
 800353c:	40007000 	.word	0x40007000
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10c      	bne.n	800356a <HAL_RCC_OscConfig+0x96a>
 8003550:	4bc1      	ldr	r3, [pc, #772]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4ac0      	ldr	r2, [pc, #768]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	4bbe      	ldr	r3, [pc, #760]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	4abd      	ldr	r2, [pc, #756]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003562:	f023 0304 	bic.w	r3, r3, #4
 8003566:	6213      	str	r3, [r2, #32]
 8003568:	e020      	b.n	80035ac <HAL_RCC_OscConfig+0x9ac>
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b05      	cmp	r3, #5
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x994>
 800357a:	4bb7      	ldr	r3, [pc, #732]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4ab6      	ldr	r2, [pc, #728]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	6213      	str	r3, [r2, #32]
 8003586:	4bb4      	ldr	r3, [pc, #720]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4ab3      	ldr	r2, [pc, #716]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0x9ac>
 8003594:	4bb0      	ldr	r3, [pc, #704]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4aaf      	ldr	r2, [pc, #700]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6213      	str	r3, [r2, #32]
 80035a0:	4bad      	ldr	r3, [pc, #692]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4aac      	ldr	r2, [pc, #688]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 80035a6:	f023 0304 	bic.w	r3, r3, #4
 80035aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8081 	beq.w	80036c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035be:	f7fe fb75 	bl	8001cac <HAL_GetTick>
 80035c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c6:	e00b      	b.n	80035e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fe fb70 	bl	8001cac <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e345      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035e8:	2202      	movs	r2, #2
 80035ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800360c:	2202      	movs	r2, #2
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003626:	601a      	str	r2, [r3, #0]
  return result;
 8003628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003630:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0302 	orr.w	r3, r3, #2
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d102      	bne.n	800364c <HAL_RCC_OscConfig+0xa4c>
 8003646:	4b84      	ldr	r3, [pc, #528]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	e013      	b.n	8003674 <HAL_RCC_OscConfig+0xa74>
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003654:	2202      	movs	r2, #2
 8003656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	4b79      	ldr	r3, [pc, #484]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003678:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800367c:	2102      	movs	r1, #2
 800367e:	6011      	str	r1, [r2, #0]
 8003680:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003684:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	fa92 f1a2 	rbit	r1, r2
 800368e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003692:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003696:	6011      	str	r1, [r2, #0]
  return result;
 8003698:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800369c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	fab2 f282 	clz	r2, r2
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	f002 021f 	and.w	r2, r2, #31
 80036b2:	2101      	movs	r1, #1
 80036b4:	fa01 f202 	lsl.w	r2, r1, r2
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d084      	beq.n	80035c8 <HAL_RCC_OscConfig+0x9c8>
 80036be:	e07f      	b.n	80037c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7fe faf4 	bl	8001cac <HAL_GetTick>
 80036c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c8:	e00b      	b.n	80036e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe faef 	bl	8001cac <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e2c4      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036ea:	2202      	movs	r2, #2
 80036ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	fa93 f2a3 	rbit	r2, r3
 80036fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003700:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800370e:	2202      	movs	r2, #2
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	fa93 f2a3 	rbit	r2, r3
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003728:	601a      	str	r2, [r3, #0]
  return result;
 800372a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003732:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	fab3 f383 	clz	r3, r3
 8003738:	b2db      	uxtb	r3, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d102      	bne.n	800374e <HAL_RCC_OscConfig+0xb4e>
 8003748:	4b43      	ldr	r3, [pc, #268]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	e013      	b.n	8003776 <HAL_RCC_OscConfig+0xb76>
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003756:	2202      	movs	r2, #2
 8003758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	fa93 f2a3 	rbit	r2, r3
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800377a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800377e:	2102      	movs	r1, #2
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003786:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	fa92 f1a2 	rbit	r1, r2
 8003790:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003794:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003798:	6011      	str	r1, [r2, #0]
  return result;
 800379a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800379e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	fab2 f282 	clz	r2, r2
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	f002 021f 	and.w	r2, r2, #31
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d184      	bne.n	80036ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4a22      	ldr	r2, [pc, #136]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8242 	beq.w	8003c6a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <HAL_RCC_OscConfig+0xc58>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	f000 8213 	beq.w	8003c1a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2b02      	cmp	r3, #2
 8003802:	f040 8162 	bne.w	8003aca <HAL_RCC_OscConfig+0xeca>
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800380e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fa93 f2a3 	rbit	r2, r3
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800382a:	601a      	str	r2, [r3, #0]
  return result;
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003834:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003840:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	461a      	mov	r2, r3
 8003848:	2300      	movs	r3, #0
 800384a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe fa2e 	bl	8001cac <HAL_GetTick>
 8003850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003854:	e00c      	b.n	8003870 <HAL_RCC_OscConfig+0xc70>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe fa26 	bl	8001cac <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1fd      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
 8003870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003874:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800387c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003894:	601a      	str	r2, [r3, #0]
  return result;
 8003896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800389e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d102      	bne.n	80038ba <HAL_RCC_OscConfig+0xcba>
 80038b4:	4bb0      	ldr	r3, [pc, #704]	; (8003b78 <HAL_RCC_OscConfig+0xf78>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	e027      	b.n	800390a <HAL_RCC_OscConfig+0xd0a>
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	fa93 f2a3 	rbit	r2, r3
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	4b9c      	ldr	r3, [pc, #624]	; (8003b78 <HAL_RCC_OscConfig+0xf78>)
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003912:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003916:	6011      	str	r1, [r2, #0]
 8003918:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	fa92 f1a2 	rbit	r1, r2
 8003926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800392a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800392e:	6011      	str	r1, [r2, #0]
  return result;
 8003930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003934:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	fab2 f282 	clz	r2, r2
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	f042 0220 	orr.w	r2, r2, #32
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	f002 021f 	and.w	r2, r2, #31
 800394a:	2101      	movs	r1, #1
 800394c:	fa01 f202 	lsl.w	r2, r1, r2
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d182      	bne.n	800385c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003956:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCC_OscConfig+0xf78>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800395e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800396a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	430b      	orrs	r3, r1
 8003978:	497f      	ldr	r1, [pc, #508]	; (8003b78 <HAL_RCC_OscConfig+0xf78>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
 800397e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003982:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800398a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	fa93 f2a3 	rbit	r2, r3
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039a2:	601a      	str	r2, [r3, #0]
  return result;
 80039a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ae:	fab3 f383 	clz	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	461a      	mov	r2, r3
 80039c0:	2301      	movs	r3, #1
 80039c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe f972 	bl	8001cac <HAL_GetTick>
 80039c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039cc:	e009      	b.n	80039e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fe f96d 	bl	8001cac <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e144      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	fa93 f2a3 	rbit	r2, r3
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a06:	601a      	str	r2, [r3, #0]
  return result;
 8003a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_OscConfig+0xe2c>
 8003a26:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <HAL_RCC_OscConfig+0xf78>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	e027      	b.n	8003a7c <HAL_RCC_OscConfig+0xe7c>
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	fa93 f2a3 	rbit	r2, r3
 8003a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	fa93 f2a3 	rbit	r2, r3
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <HAL_RCC_OscConfig+0xf78>)
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a88:	6011      	str	r1, [r2, #0]
 8003a8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	fa92 f1a2 	rbit	r1, r2
 8003a98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003aa0:	6011      	str	r1, [r2, #0]
  return result;
 8003aa2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aa6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	fab2 f282 	clz	r2, r2
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	f042 0220 	orr.w	r2, r2, #32
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	f002 021f 	and.w	r2, r2, #31
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d082      	beq.n	80039ce <HAL_RCC_OscConfig+0xdce>
 8003ac8:	e0cf      	b.n	8003c6a <HAL_RCC_OscConfig+0x106a>
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	fa93 f2a3 	rbit	r2, r3
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003aee:	601a      	str	r2, [r3, #0]
  return result;
 8003af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003af8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b10:	f7fe f8cc 	bl	8001cac <HAL_GetTick>
 8003b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b18:	e009      	b.n	8003b2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fe f8c7 	bl	8001cac <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e09e      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	fa93 f2a3 	rbit	r2, r3
 8003b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b52:	601a      	str	r2, [r3, #0]
  return result;
 8003b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d104      	bne.n	8003b7c <HAL_RCC_OscConfig+0xf7c>
 8003b72:	4b01      	ldr	r3, [pc, #4]	; (8003b78 <HAL_RCC_OscConfig+0xf78>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e029      	b.n	8003bcc <HAL_RCC_OscConfig+0xfcc>
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003baa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	fa93 f2a3 	rbit	r2, r3
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <HAL_RCC_OscConfig+0x1078>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003bd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	fa92 f1a2 	rbit	r1, r2
 8003be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bf0:	6011      	str	r1, [r2, #0]
  return result;
 8003bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bf6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	fab2 f282 	clz	r2, r2
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	f042 0220 	orr.w	r2, r2, #32
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	f002 021f 	and.w	r2, r2, #31
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d180      	bne.n	8003b1a <HAL_RCC_OscConfig+0xf1a>
 8003c18:	e027      	b.n	8003c6a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e01e      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_OscConfig+0x1078>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c3a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d10b      	bne.n	8003c66 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b09e      	sub	sp, #120	; 0x78
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e162      	b.n	8003f5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b90      	ldr	r3, [pc, #576]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 0207 	bic.w	r2, r3, #7
 8003caa:	498b      	ldr	r1, [pc, #556]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b89      	ldr	r3, [pc, #548]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e14a      	b.n	8003f5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b82      	ldr	r3, [pc, #520]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	497f      	ldr	r1, [pc, #508]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 80dc 	beq.w	8003ea8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d13c      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xf6>
 8003cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d08:	fab3 f383 	clz	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d102      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xa6>
 8003d1c:	4b6f      	ldr	r3, [pc, #444]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	e00f      	b.n	8003d42 <HAL_RCC_ClockConfig+0xc6>
 8003d22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d2a:	fa93 f3a3 	rbit	r3, r3
 8003d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d34:	663b      	str	r3, [r7, #96]	; 0x60
 8003d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d3e:	4b67      	ldr	r3, [pc, #412]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d46:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d4a:	fa92 f2a2 	rbit	r2, r2
 8003d4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d52:	fab2 f282 	clz	r2, r2
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	f042 0220 	orr.w	r2, r2, #32
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	f002 021f 	and.w	r2, r2, #31
 8003d62:	2101      	movs	r1, #1
 8003d64:	fa01 f202 	lsl.w	r2, r1, r2
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d17b      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0f3      	b.n	8003f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d13c      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x178>
 8003d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x128>
 8003d9e:	4b4f      	ldr	r3, [pc, #316]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	e00f      	b.n	8003dc4 <HAL_RCC_ClockConfig+0x148>
 8003da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
 8003db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
 8003db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc0:	4b46      	ldr	r3, [pc, #280]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dcc:	fa92 f2a2 	rbit	r2, r2
 8003dd0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd4:	fab2 f282 	clz	r2, r2
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	f042 0220 	orr.w	r2, r2, #32
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f002 021f 	and.w	r2, r2, #31
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d13a      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b2      	b.n	8003f5a <HAL_RCC_ClockConfig+0x2de>
 8003df4:	2302      	movs	r3, #2
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d102      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x1a0>
 8003e16:	4b31      	ldr	r3, [pc, #196]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	e00d      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1bc>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	2302      	movs	r3, #2
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2202      	movs	r2, #2
 8003e3a:	61ba      	str	r2, [r7, #24]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	fa92 f2a2 	rbit	r2, r2
 8003e42:	617a      	str	r2, [r7, #20]
  return result;
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	fab2 f282 	clz	r2, r2
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	f042 0220 	orr.w	r2, r2, #32
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f002 021f 	and.w	r2, r2, #31
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e079      	b.n	8003f5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f023 0203 	bic.w	r2, r3, #3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	491a      	ldr	r1, [pc, #104]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e78:	f7fd ff18 	bl	8001cac <HAL_GetTick>
 8003e7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e80:	f7fd ff14 	bl	8001cac <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e061      	b.n	8003f5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 020c 	and.w	r2, r3, #12
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d1eb      	bne.n	8003e80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d214      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 0207 	bic.w	r2, r3, #7
 8003ebe:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <HAL_RCC_ClockConfig+0x25c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e040      	b.n	8003f5a <HAL_RCC_ClockConfig+0x2de>
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eec:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <HAL_RCC_ClockConfig+0x2e8>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	491a      	ldr	r1, [pc, #104]	; (8003f64 <HAL_RCC_ClockConfig+0x2e8>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <HAL_RCC_ClockConfig+0x2e8>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4912      	ldr	r1, [pc, #72]	; (8003f64 <HAL_RCC_ClockConfig+0x2e8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f1e:	f000 f829 	bl	8003f74 <HAL_RCC_GetSysClockFreq>
 8003f22:	4601      	mov	r1, r0
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <HAL_RCC_ClockConfig+0x2e8>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2c:	22f0      	movs	r2, #240	; 0xf0
 8003f2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	fa92 f2a2 	rbit	r2, r2
 8003f36:	60fa      	str	r2, [r7, #12]
  return result;
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	fab2 f282 	clz	r2, r2
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	40d3      	lsrs	r3, r2
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <HAL_RCC_ClockConfig+0x2ec>)
 8003f44:	5cd3      	ldrb	r3, [r2, r3]
 8003f46:	fa21 f303 	lsr.w	r3, r1, r3
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <HAL_RCC_ClockConfig+0x2f0>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCC_ClockConfig+0x2f4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd fe66 	bl	8001c24 <HAL_InitTick>
  
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3778      	adds	r7, #120	; 0x78
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40021000 	.word	0x40021000
 8003f68:	080057c8 	.word	0x080057c8
 8003f6c:	20000190 	.word	0x20000190
 8003f70:	20000194 	.word	0x20000194

08003f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b08b      	sub	sp, #44	; 0x2c
 8003f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	2300      	movs	r3, #0
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0x36>
 8003fa2:	e03c      	b.n	800401e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fa4:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fa6:	623b      	str	r3, [r7, #32]
      break;
 8003fa8:	e03c      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003fb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003fb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	fa92 f2a2 	rbit	r2, r2
 8003fbc:	607a      	str	r2, [r7, #4]
  return result;
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	fab2 f282 	clz	r2, r2
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	40d3      	lsrs	r3, r2
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fca:	5cd3      	ldrb	r3, [r2, r3]
 8003fcc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	fa92 f2a2 	rbit	r2, r2
 8003fe0:	60fa      	str	r2, [r7, #12]
  return result;
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	fab2 f282 	clz	r2, r2
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	40d3      	lsrs	r3, r2
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ffc:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	fbb2 f2f3 	udiv	r2, r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	e004      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	4a0c      	ldr	r2, [pc, #48]	; (8004044 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	623b      	str	r3, [r7, #32]
      break;
 800401c:	e002      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004020:	623b      	str	r3, [r7, #32]
      break;
 8004022:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004024:	6a3b      	ldr	r3, [r7, #32]
}
 8004026:	4618      	mov	r0, r3
 8004028:	372c      	adds	r7, #44	; 0x2c
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	007a1200 	.word	0x007a1200
 800403c:	080057d8 	.word	0x080057d8
 8004040:	080057e8 	.word	0x080057e8
 8004044:	003d0900 	.word	0x003d0900

08004048 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b092      	sub	sp, #72	; 0x48
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 80d4 	beq.w	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800406c:	4b4e      	ldr	r3, [pc, #312]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10e      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004078:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004082:	61d3      	str	r3, [r2, #28]
 8004084:	4b48      	ldr	r3, [pc, #288]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004096:	4b45      	ldr	r3, [pc, #276]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d118      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a41      	ldr	r2, [pc, #260]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ae:	f7fd fdfd 	bl	8001cac <HAL_GetTick>
 80040b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	e008      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fd fdf9 	bl	8001cac <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b64      	cmp	r3, #100	; 0x64
 80040c2:	d901      	bls.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e169      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040d4:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8084 	beq.w	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d07c      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040f4:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004102:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800410e:	fab3 f383 	clz	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	461a      	mov	r2, r3
 800411e:	2301      	movs	r3, #1
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004146:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d04b      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd fda9 	bl	8001cac <HAL_GetTick>
 800415a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fd fda5 	bl	8001cac <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e113      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004174:	2302      	movs	r3, #2
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
 8004180:	2302      	movs	r3, #2
 8004182:	623b      	str	r3, [r7, #32]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	fa93 f3a3 	rbit	r3, r3
 800418a:	61fb      	str	r3, [r7, #28]
  return result;
 800418c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	fab3 f383 	clz	r3, r3
 8004192:	b2db      	uxtb	r3, r3
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f043 0302 	orr.w	r3, r3, #2
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d108      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041a2:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	e00d      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
 80041b0:	10908100 	.word	0x10908100
 80041b4:	2302      	movs	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	4b78      	ldr	r3, [pc, #480]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	2202      	movs	r2, #2
 80041c6:	613a      	str	r2, [r7, #16]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	fa92 f2a2 	rbit	r2, r2
 80041ce:	60fa      	str	r2, [r7, #12]
  return result;
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	fab2 f282 	clz	r2, r2
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f002 021f 	and.w	r2, r2, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f202 	lsl.w	r2, r1, r2
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0b7      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041ee:	4b6d      	ldr	r3, [pc, #436]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	496a      	ldr	r1, [pc, #424]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004208:	4b66      	ldr	r3, [pc, #408]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	4a65      	ldr	r2, [pc, #404]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004220:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004224:	f023 0203 	bic.w	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	495d      	ldr	r1, [pc, #372]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800423e:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	4956      	ldr	r1, [pc, #344]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800425c:	4b51      	ldr	r3, [pc, #324]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	494e      	ldr	r1, [pc, #312]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	f023 0210 	bic.w	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4947      	ldr	r1, [pc, #284]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004298:	4b42      	ldr	r3, [pc, #264]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	493f      	ldr	r1, [pc, #252]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042b6:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f023 0220 	bic.w	r2, r3, #32
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4938      	ldr	r1, [pc, #224]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042d4:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	4930      	ldr	r1, [pc, #192]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	4929      	ldr	r1, [pc, #164]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004310:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	4921      	ldr	r1, [pc, #132]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	491a      	ldr	r1, [pc, #104]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800434c:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	4912      	ldr	r1, [pc, #72]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	490b      	ldr	r1, [pc, #44]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004378:	4313      	orrs	r3, r2
 800437a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004388:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004396:	4313      	orrs	r3, r2
 8004398:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3748      	adds	r7, #72	; 0x48
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000019c 	.word	0x2000019c

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f001 f98a 	bl	80056e0 <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08005890 	.word	0x08005890
 80043f0:	08005890 	.word	0x08005890
 80043f4:	08005890 	.word	0x08005890
 80043f8:	08005894 	.word	0x08005894

080043fc <memcpy>:
 80043fc:	440a      	add	r2, r1
 80043fe:	4291      	cmp	r1, r2
 8004400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004404:	d100      	bne.n	8004408 <memcpy+0xc>
 8004406:	4770      	bx	lr
 8004408:	b510      	push	{r4, lr}
 800440a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004412:	4291      	cmp	r1, r2
 8004414:	d1f9      	bne.n	800440a <memcpy+0xe>
 8004416:	bd10      	pop	{r4, pc}

08004418 <memset>:
 8004418:	4402      	add	r2, r0
 800441a:	4603      	mov	r3, r0
 800441c:	4293      	cmp	r3, r2
 800441e:	d100      	bne.n	8004422 <memset+0xa>
 8004420:	4770      	bx	lr
 8004422:	f803 1b01 	strb.w	r1, [r3], #1
 8004426:	e7f9      	b.n	800441c <memset+0x4>

08004428 <iprintf>:
 8004428:	b40f      	push	{r0, r1, r2, r3}
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <iprintf+0x2c>)
 800442c:	b513      	push	{r0, r1, r4, lr}
 800442e:	681c      	ldr	r4, [r3, #0]
 8004430:	b124      	cbz	r4, 800443c <iprintf+0x14>
 8004432:	69a3      	ldr	r3, [r4, #24]
 8004434:	b913      	cbnz	r3, 800443c <iprintf+0x14>
 8004436:	4620      	mov	r0, r4
 8004438:	f000 f886 	bl	8004548 <__sinit>
 800443c:	ab05      	add	r3, sp, #20
 800443e:	9a04      	ldr	r2, [sp, #16]
 8004440:	68a1      	ldr	r1, [r4, #8]
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	4620      	mov	r0, r4
 8004446:	f000 fb39 	bl	8004abc <_vfiprintf_r>
 800444a:	b002      	add	sp, #8
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	b004      	add	sp, #16
 8004452:	4770      	bx	lr
 8004454:	2000019c 	.word	0x2000019c

08004458 <siprintf>:
 8004458:	b40e      	push	{r1, r2, r3}
 800445a:	b500      	push	{lr}
 800445c:	b09c      	sub	sp, #112	; 0x70
 800445e:	ab1d      	add	r3, sp, #116	; 0x74
 8004460:	9002      	str	r0, [sp, #8]
 8004462:	9006      	str	r0, [sp, #24]
 8004464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004468:	4809      	ldr	r0, [pc, #36]	; (8004490 <siprintf+0x38>)
 800446a:	9107      	str	r1, [sp, #28]
 800446c:	9104      	str	r1, [sp, #16]
 800446e:	4909      	ldr	r1, [pc, #36]	; (8004494 <siprintf+0x3c>)
 8004470:	f853 2b04 	ldr.w	r2, [r3], #4
 8004474:	9105      	str	r1, [sp, #20]
 8004476:	6800      	ldr	r0, [r0, #0]
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	a902      	add	r1, sp, #8
 800447c:	f000 f9f4 	bl	8004868 <_svfiprintf_r>
 8004480:	9b02      	ldr	r3, [sp, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	b01c      	add	sp, #112	; 0x70
 8004488:	f85d eb04 	ldr.w	lr, [sp], #4
 800448c:	b003      	add	sp, #12
 800448e:	4770      	bx	lr
 8004490:	2000019c 	.word	0x2000019c
 8004494:	ffff0208 	.word	0xffff0208

08004498 <std>:
 8004498:	2300      	movs	r3, #0
 800449a:	b510      	push	{r4, lr}
 800449c:	4604      	mov	r4, r0
 800449e:	e9c0 3300 	strd	r3, r3, [r0]
 80044a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044a6:	6083      	str	r3, [r0, #8]
 80044a8:	8181      	strh	r1, [r0, #12]
 80044aa:	6643      	str	r3, [r0, #100]	; 0x64
 80044ac:	81c2      	strh	r2, [r0, #14]
 80044ae:	6183      	str	r3, [r0, #24]
 80044b0:	4619      	mov	r1, r3
 80044b2:	2208      	movs	r2, #8
 80044b4:	305c      	adds	r0, #92	; 0x5c
 80044b6:	f7ff ffaf 	bl	8004418 <memset>
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <std+0x38>)
 80044bc:	6263      	str	r3, [r4, #36]	; 0x24
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <std+0x3c>)
 80044c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <std+0x40>)
 80044c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <std+0x44>)
 80044c8:	6224      	str	r4, [r4, #32]
 80044ca:	6323      	str	r3, [r4, #48]	; 0x30
 80044cc:	bd10      	pop	{r4, pc}
 80044ce:	bf00      	nop
 80044d0:	08005065 	.word	0x08005065
 80044d4:	08005087 	.word	0x08005087
 80044d8:	080050bf 	.word	0x080050bf
 80044dc:	080050e3 	.word	0x080050e3

080044e0 <_cleanup_r>:
 80044e0:	4901      	ldr	r1, [pc, #4]	; (80044e8 <_cleanup_r+0x8>)
 80044e2:	f000 b8af 	b.w	8004644 <_fwalk_reent>
 80044e6:	bf00      	nop
 80044e8:	080053bd 	.word	0x080053bd

080044ec <__sfmoreglue>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	2268      	movs	r2, #104	; 0x68
 80044f0:	1e4d      	subs	r5, r1, #1
 80044f2:	4355      	muls	r5, r2
 80044f4:	460e      	mov	r6, r1
 80044f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044fa:	f000 f8e5 	bl	80046c8 <_malloc_r>
 80044fe:	4604      	mov	r4, r0
 8004500:	b140      	cbz	r0, 8004514 <__sfmoreglue+0x28>
 8004502:	2100      	movs	r1, #0
 8004504:	e9c0 1600 	strd	r1, r6, [r0]
 8004508:	300c      	adds	r0, #12
 800450a:	60a0      	str	r0, [r4, #8]
 800450c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004510:	f7ff ff82 	bl	8004418 <memset>
 8004514:	4620      	mov	r0, r4
 8004516:	bd70      	pop	{r4, r5, r6, pc}

08004518 <__sfp_lock_acquire>:
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <__sfp_lock_acquire+0x8>)
 800451a:	f000 b8b3 	b.w	8004684 <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	200002b9 	.word	0x200002b9

08004524 <__sfp_lock_release>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__sfp_lock_release+0x8>)
 8004526:	f000 b8ae 	b.w	8004686 <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	200002b9 	.word	0x200002b9

08004530 <__sinit_lock_acquire>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__sinit_lock_acquire+0x8>)
 8004532:	f000 b8a7 	b.w	8004684 <__retarget_lock_acquire_recursive>
 8004536:	bf00      	nop
 8004538:	200002ba 	.word	0x200002ba

0800453c <__sinit_lock_release>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__sinit_lock_release+0x8>)
 800453e:	f000 b8a2 	b.w	8004686 <__retarget_lock_release_recursive>
 8004542:	bf00      	nop
 8004544:	200002ba 	.word	0x200002ba

08004548 <__sinit>:
 8004548:	b510      	push	{r4, lr}
 800454a:	4604      	mov	r4, r0
 800454c:	f7ff fff0 	bl	8004530 <__sinit_lock_acquire>
 8004550:	69a3      	ldr	r3, [r4, #24]
 8004552:	b11b      	cbz	r3, 800455c <__sinit+0x14>
 8004554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004558:	f7ff bff0 	b.w	800453c <__sinit_lock_release>
 800455c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004560:	6523      	str	r3, [r4, #80]	; 0x50
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <__sinit+0x68>)
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <__sinit+0x6c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	62a2      	str	r2, [r4, #40]	; 0x28
 800456a:	42a3      	cmp	r3, r4
 800456c:	bf04      	itt	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	61a3      	streq	r3, [r4, #24]
 8004572:	4620      	mov	r0, r4
 8004574:	f000 f820 	bl	80045b8 <__sfp>
 8004578:	6060      	str	r0, [r4, #4]
 800457a:	4620      	mov	r0, r4
 800457c:	f000 f81c 	bl	80045b8 <__sfp>
 8004580:	60a0      	str	r0, [r4, #8]
 8004582:	4620      	mov	r0, r4
 8004584:	f000 f818 	bl	80045b8 <__sfp>
 8004588:	2200      	movs	r2, #0
 800458a:	60e0      	str	r0, [r4, #12]
 800458c:	2104      	movs	r1, #4
 800458e:	6860      	ldr	r0, [r4, #4]
 8004590:	f7ff ff82 	bl	8004498 <std>
 8004594:	68a0      	ldr	r0, [r4, #8]
 8004596:	2201      	movs	r2, #1
 8004598:	2109      	movs	r1, #9
 800459a:	f7ff ff7d 	bl	8004498 <std>
 800459e:	68e0      	ldr	r0, [r4, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	2112      	movs	r1, #18
 80045a4:	f7ff ff78 	bl	8004498 <std>
 80045a8:	2301      	movs	r3, #1
 80045aa:	61a3      	str	r3, [r4, #24]
 80045ac:	e7d2      	b.n	8004554 <__sinit+0xc>
 80045ae:	bf00      	nop
 80045b0:	080057f8 	.word	0x080057f8
 80045b4:	080044e1 	.word	0x080044e1

080045b8 <__sfp>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	4607      	mov	r7, r0
 80045bc:	f7ff ffac 	bl	8004518 <__sfp_lock_acquire>
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <__sfp+0x84>)
 80045c2:	681e      	ldr	r6, [r3, #0]
 80045c4:	69b3      	ldr	r3, [r6, #24]
 80045c6:	b913      	cbnz	r3, 80045ce <__sfp+0x16>
 80045c8:	4630      	mov	r0, r6
 80045ca:	f7ff ffbd 	bl	8004548 <__sinit>
 80045ce:	3648      	adds	r6, #72	; 0x48
 80045d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	d503      	bpl.n	80045e0 <__sfp+0x28>
 80045d8:	6833      	ldr	r3, [r6, #0]
 80045da:	b30b      	cbz	r3, 8004620 <__sfp+0x68>
 80045dc:	6836      	ldr	r6, [r6, #0]
 80045de:	e7f7      	b.n	80045d0 <__sfp+0x18>
 80045e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045e4:	b9d5      	cbnz	r5, 800461c <__sfp+0x64>
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <__sfp+0x88>)
 80045e8:	60e3      	str	r3, [r4, #12]
 80045ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045ee:	6665      	str	r5, [r4, #100]	; 0x64
 80045f0:	f000 f847 	bl	8004682 <__retarget_lock_init_recursive>
 80045f4:	f7ff ff96 	bl	8004524 <__sfp_lock_release>
 80045f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004600:	6025      	str	r5, [r4, #0]
 8004602:	61a5      	str	r5, [r4, #24]
 8004604:	2208      	movs	r2, #8
 8004606:	4629      	mov	r1, r5
 8004608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800460c:	f7ff ff04 	bl	8004418 <memset>
 8004610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004618:	4620      	mov	r0, r4
 800461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800461c:	3468      	adds	r4, #104	; 0x68
 800461e:	e7d9      	b.n	80045d4 <__sfp+0x1c>
 8004620:	2104      	movs	r1, #4
 8004622:	4638      	mov	r0, r7
 8004624:	f7ff ff62 	bl	80044ec <__sfmoreglue>
 8004628:	4604      	mov	r4, r0
 800462a:	6030      	str	r0, [r6, #0]
 800462c:	2800      	cmp	r0, #0
 800462e:	d1d5      	bne.n	80045dc <__sfp+0x24>
 8004630:	f7ff ff78 	bl	8004524 <__sfp_lock_release>
 8004634:	230c      	movs	r3, #12
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	e7ee      	b.n	8004618 <__sfp+0x60>
 800463a:	bf00      	nop
 800463c:	080057f8 	.word	0x080057f8
 8004640:	ffff0001 	.word	0xffff0001

08004644 <_fwalk_reent>:
 8004644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004648:	4606      	mov	r6, r0
 800464a:	4688      	mov	r8, r1
 800464c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004650:	2700      	movs	r7, #0
 8004652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004656:	f1b9 0901 	subs.w	r9, r9, #1
 800465a:	d505      	bpl.n	8004668 <_fwalk_reent+0x24>
 800465c:	6824      	ldr	r4, [r4, #0]
 800465e:	2c00      	cmp	r4, #0
 8004660:	d1f7      	bne.n	8004652 <_fwalk_reent+0xe>
 8004662:	4638      	mov	r0, r7
 8004664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004668:	89ab      	ldrh	r3, [r5, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d907      	bls.n	800467e <_fwalk_reent+0x3a>
 800466e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004672:	3301      	adds	r3, #1
 8004674:	d003      	beq.n	800467e <_fwalk_reent+0x3a>
 8004676:	4629      	mov	r1, r5
 8004678:	4630      	mov	r0, r6
 800467a:	47c0      	blx	r8
 800467c:	4307      	orrs	r7, r0
 800467e:	3568      	adds	r5, #104	; 0x68
 8004680:	e7e9      	b.n	8004656 <_fwalk_reent+0x12>

08004682 <__retarget_lock_init_recursive>:
 8004682:	4770      	bx	lr

08004684 <__retarget_lock_acquire_recursive>:
 8004684:	4770      	bx	lr

08004686 <__retarget_lock_release_recursive>:
 8004686:	4770      	bx	lr

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0e      	ldr	r6, [pc, #56]	; (80046c4 <sbrk_aligned+0x3c>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fcd6 	bl	8005044 <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fcd1 	bl	8005044 <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d00a      	beq.n	80046bc <sbrk_aligned+0x34>
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d007      	beq.n	80046c0 <sbrk_aligned+0x38>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fcc6 	bl	8005044 <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d101      	bne.n	80046c0 <sbrk_aligned+0x38>
 80046bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046c0:	4620      	mov	r0, r4
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	200002c0 	.word	0x200002c0

080046c8 <_malloc_r>:
 80046c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	1ccd      	adds	r5, r1, #3
 80046ce:	f025 0503 	bic.w	r5, r5, #3
 80046d2:	3508      	adds	r5, #8
 80046d4:	2d0c      	cmp	r5, #12
 80046d6:	bf38      	it	cc
 80046d8:	250c      	movcc	r5, #12
 80046da:	2d00      	cmp	r5, #0
 80046dc:	4607      	mov	r7, r0
 80046de:	db01      	blt.n	80046e4 <_malloc_r+0x1c>
 80046e0:	42a9      	cmp	r1, r5
 80046e2:	d905      	bls.n	80046f0 <_malloc_r+0x28>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	2600      	movs	r6, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046f0:	4e2e      	ldr	r6, [pc, #184]	; (80047ac <_malloc_r+0xe4>)
 80046f2:	f000 ff31 	bl	8005558 <__malloc_lock>
 80046f6:	6833      	ldr	r3, [r6, #0]
 80046f8:	461c      	mov	r4, r3
 80046fa:	bb34      	cbnz	r4, 800474a <_malloc_r+0x82>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4638      	mov	r0, r7
 8004700:	f7ff ffc2 	bl	8004688 <sbrk_aligned>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	4604      	mov	r4, r0
 8004708:	d14d      	bne.n	80047a6 <_malloc_r+0xde>
 800470a:	6834      	ldr	r4, [r6, #0]
 800470c:	4626      	mov	r6, r4
 800470e:	2e00      	cmp	r6, #0
 8004710:	d140      	bne.n	8004794 <_malloc_r+0xcc>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	4631      	mov	r1, r6
 8004716:	4638      	mov	r0, r7
 8004718:	eb04 0803 	add.w	r8, r4, r3
 800471c:	f000 fc92 	bl	8005044 <_sbrk_r>
 8004720:	4580      	cmp	r8, r0
 8004722:	d13a      	bne.n	800479a <_malloc_r+0xd2>
 8004724:	6821      	ldr	r1, [r4, #0]
 8004726:	3503      	adds	r5, #3
 8004728:	1a6d      	subs	r5, r5, r1
 800472a:	f025 0503 	bic.w	r5, r5, #3
 800472e:	3508      	adds	r5, #8
 8004730:	2d0c      	cmp	r5, #12
 8004732:	bf38      	it	cc
 8004734:	250c      	movcc	r5, #12
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ffa5 	bl	8004688 <sbrk_aligned>
 800473e:	3001      	adds	r0, #1
 8004740:	d02b      	beq.n	800479a <_malloc_r+0xd2>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	442b      	add	r3, r5
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	e00e      	b.n	8004768 <_malloc_r+0xa0>
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	1b52      	subs	r2, r2, r5
 800474e:	d41e      	bmi.n	800478e <_malloc_r+0xc6>
 8004750:	2a0b      	cmp	r2, #11
 8004752:	d916      	bls.n	8004782 <_malloc_r+0xba>
 8004754:	1961      	adds	r1, r4, r5
 8004756:	42a3      	cmp	r3, r4
 8004758:	6025      	str	r5, [r4, #0]
 800475a:	bf18      	it	ne
 800475c:	6059      	strne	r1, [r3, #4]
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	bf08      	it	eq
 8004762:	6031      	streq	r1, [r6, #0]
 8004764:	5162      	str	r2, [r4, r5]
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	4638      	mov	r0, r7
 800476a:	f104 060b 	add.w	r6, r4, #11
 800476e:	f000 fef9 	bl	8005564 <__malloc_unlock>
 8004772:	f026 0607 	bic.w	r6, r6, #7
 8004776:	1d23      	adds	r3, r4, #4
 8004778:	1af2      	subs	r2, r6, r3
 800477a:	d0b6      	beq.n	80046ea <_malloc_r+0x22>
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	50a3      	str	r3, [r4, r2]
 8004780:	e7b3      	b.n	80046ea <_malloc_r+0x22>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	bf0c      	ite	eq
 8004788:	6032      	streq	r2, [r6, #0]
 800478a:	605a      	strne	r2, [r3, #4]
 800478c:	e7ec      	b.n	8004768 <_malloc_r+0xa0>
 800478e:	4623      	mov	r3, r4
 8004790:	6864      	ldr	r4, [r4, #4]
 8004792:	e7b2      	b.n	80046fa <_malloc_r+0x32>
 8004794:	4634      	mov	r4, r6
 8004796:	6876      	ldr	r6, [r6, #4]
 8004798:	e7b9      	b.n	800470e <_malloc_r+0x46>
 800479a:	230c      	movs	r3, #12
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4638      	mov	r0, r7
 80047a0:	f000 fee0 	bl	8005564 <__malloc_unlock>
 80047a4:	e7a1      	b.n	80046ea <_malloc_r+0x22>
 80047a6:	6025      	str	r5, [r4, #0]
 80047a8:	e7de      	b.n	8004768 <_malloc_r+0xa0>
 80047aa:	bf00      	nop
 80047ac:	200002bc 	.word	0x200002bc

080047b0 <__ssputs_r>:
 80047b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b4:	688e      	ldr	r6, [r1, #8]
 80047b6:	429e      	cmp	r6, r3
 80047b8:	4682      	mov	sl, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	4690      	mov	r8, r2
 80047be:	461f      	mov	r7, r3
 80047c0:	d838      	bhi.n	8004834 <__ssputs_r+0x84>
 80047c2:	898a      	ldrh	r2, [r1, #12]
 80047c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047c8:	d032      	beq.n	8004830 <__ssputs_r+0x80>
 80047ca:	6825      	ldr	r5, [r4, #0]
 80047cc:	6909      	ldr	r1, [r1, #16]
 80047ce:	eba5 0901 	sub.w	r9, r5, r1
 80047d2:	6965      	ldr	r5, [r4, #20]
 80047d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047dc:	3301      	adds	r3, #1
 80047de:	444b      	add	r3, r9
 80047e0:	106d      	asrs	r5, r5, #1
 80047e2:	429d      	cmp	r5, r3
 80047e4:	bf38      	it	cc
 80047e6:	461d      	movcc	r5, r3
 80047e8:	0553      	lsls	r3, r2, #21
 80047ea:	d531      	bpl.n	8004850 <__ssputs_r+0xa0>
 80047ec:	4629      	mov	r1, r5
 80047ee:	f7ff ff6b 	bl	80046c8 <_malloc_r>
 80047f2:	4606      	mov	r6, r0
 80047f4:	b950      	cbnz	r0, 800480c <__ssputs_r+0x5c>
 80047f6:	230c      	movs	r3, #12
 80047f8:	f8ca 3000 	str.w	r3, [sl]
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480c:	6921      	ldr	r1, [r4, #16]
 800480e:	464a      	mov	r2, r9
 8004810:	f7ff fdf4 	bl	80043fc <memcpy>
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800481a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481e:	81a3      	strh	r3, [r4, #12]
 8004820:	6126      	str	r6, [r4, #16]
 8004822:	6165      	str	r5, [r4, #20]
 8004824:	444e      	add	r6, r9
 8004826:	eba5 0509 	sub.w	r5, r5, r9
 800482a:	6026      	str	r6, [r4, #0]
 800482c:	60a5      	str	r5, [r4, #8]
 800482e:	463e      	mov	r6, r7
 8004830:	42be      	cmp	r6, r7
 8004832:	d900      	bls.n	8004836 <__ssputs_r+0x86>
 8004834:	463e      	mov	r6, r7
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	4632      	mov	r2, r6
 800483a:	4641      	mov	r1, r8
 800483c:	f000 fe72 	bl	8005524 <memmove>
 8004840:	68a3      	ldr	r3, [r4, #8]
 8004842:	1b9b      	subs	r3, r3, r6
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	4433      	add	r3, r6
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	2000      	movs	r0, #0
 800484e:	e7db      	b.n	8004808 <__ssputs_r+0x58>
 8004850:	462a      	mov	r2, r5
 8004852:	f000 fed9 	bl	8005608 <_realloc_r>
 8004856:	4606      	mov	r6, r0
 8004858:	2800      	cmp	r0, #0
 800485a:	d1e1      	bne.n	8004820 <__ssputs_r+0x70>
 800485c:	6921      	ldr	r1, [r4, #16]
 800485e:	4650      	mov	r0, sl
 8004860:	f000 fe86 	bl	8005570 <_free_r>
 8004864:	e7c7      	b.n	80047f6 <__ssputs_r+0x46>
	...

08004868 <_svfiprintf_r>:
 8004868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486c:	4698      	mov	r8, r3
 800486e:	898b      	ldrh	r3, [r1, #12]
 8004870:	061b      	lsls	r3, r3, #24
 8004872:	b09d      	sub	sp, #116	; 0x74
 8004874:	4607      	mov	r7, r0
 8004876:	460d      	mov	r5, r1
 8004878:	4614      	mov	r4, r2
 800487a:	d50e      	bpl.n	800489a <_svfiprintf_r+0x32>
 800487c:	690b      	ldr	r3, [r1, #16]
 800487e:	b963      	cbnz	r3, 800489a <_svfiprintf_r+0x32>
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	f7ff ff21 	bl	80046c8 <_malloc_r>
 8004886:	6028      	str	r0, [r5, #0]
 8004888:	6128      	str	r0, [r5, #16]
 800488a:	b920      	cbnz	r0, 8004896 <_svfiprintf_r+0x2e>
 800488c:	230c      	movs	r3, #12
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004894:	e0d1      	b.n	8004a3a <_svfiprintf_r+0x1d2>
 8004896:	2340      	movs	r3, #64	; 0x40
 8004898:	616b      	str	r3, [r5, #20]
 800489a:	2300      	movs	r3, #0
 800489c:	9309      	str	r3, [sp, #36]	; 0x24
 800489e:	2320      	movs	r3, #32
 80048a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a8:	2330      	movs	r3, #48	; 0x30
 80048aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a54 <_svfiprintf_r+0x1ec>
 80048ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048b2:	f04f 0901 	mov.w	r9, #1
 80048b6:	4623      	mov	r3, r4
 80048b8:	469a      	mov	sl, r3
 80048ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048be:	b10a      	cbz	r2, 80048c4 <_svfiprintf_r+0x5c>
 80048c0:	2a25      	cmp	r2, #37	; 0x25
 80048c2:	d1f9      	bne.n	80048b8 <_svfiprintf_r+0x50>
 80048c4:	ebba 0b04 	subs.w	fp, sl, r4
 80048c8:	d00b      	beq.n	80048e2 <_svfiprintf_r+0x7a>
 80048ca:	465b      	mov	r3, fp
 80048cc:	4622      	mov	r2, r4
 80048ce:	4629      	mov	r1, r5
 80048d0:	4638      	mov	r0, r7
 80048d2:	f7ff ff6d 	bl	80047b0 <__ssputs_r>
 80048d6:	3001      	adds	r0, #1
 80048d8:	f000 80aa 	beq.w	8004a30 <_svfiprintf_r+0x1c8>
 80048dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048de:	445a      	add	r2, fp
 80048e0:	9209      	str	r2, [sp, #36]	; 0x24
 80048e2:	f89a 3000 	ldrb.w	r3, [sl]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80a2 	beq.w	8004a30 <_svfiprintf_r+0x1c8>
 80048ec:	2300      	movs	r3, #0
 80048ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048f6:	f10a 0a01 	add.w	sl, sl, #1
 80048fa:	9304      	str	r3, [sp, #16]
 80048fc:	9307      	str	r3, [sp, #28]
 80048fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004902:	931a      	str	r3, [sp, #104]	; 0x68
 8004904:	4654      	mov	r4, sl
 8004906:	2205      	movs	r2, #5
 8004908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800490c:	4851      	ldr	r0, [pc, #324]	; (8004a54 <_svfiprintf_r+0x1ec>)
 800490e:	f7fb fc5f 	bl	80001d0 <memchr>
 8004912:	9a04      	ldr	r2, [sp, #16]
 8004914:	b9d8      	cbnz	r0, 800494e <_svfiprintf_r+0xe6>
 8004916:	06d0      	lsls	r0, r2, #27
 8004918:	bf44      	itt	mi
 800491a:	2320      	movmi	r3, #32
 800491c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004920:	0711      	lsls	r1, r2, #28
 8004922:	bf44      	itt	mi
 8004924:	232b      	movmi	r3, #43	; 0x2b
 8004926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800492a:	f89a 3000 	ldrb.w	r3, [sl]
 800492e:	2b2a      	cmp	r3, #42	; 0x2a
 8004930:	d015      	beq.n	800495e <_svfiprintf_r+0xf6>
 8004932:	9a07      	ldr	r2, [sp, #28]
 8004934:	4654      	mov	r4, sl
 8004936:	2000      	movs	r0, #0
 8004938:	f04f 0c0a 	mov.w	ip, #10
 800493c:	4621      	mov	r1, r4
 800493e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004942:	3b30      	subs	r3, #48	; 0x30
 8004944:	2b09      	cmp	r3, #9
 8004946:	d94e      	bls.n	80049e6 <_svfiprintf_r+0x17e>
 8004948:	b1b0      	cbz	r0, 8004978 <_svfiprintf_r+0x110>
 800494a:	9207      	str	r2, [sp, #28]
 800494c:	e014      	b.n	8004978 <_svfiprintf_r+0x110>
 800494e:	eba0 0308 	sub.w	r3, r0, r8
 8004952:	fa09 f303 	lsl.w	r3, r9, r3
 8004956:	4313      	orrs	r3, r2
 8004958:	9304      	str	r3, [sp, #16]
 800495a:	46a2      	mov	sl, r4
 800495c:	e7d2      	b.n	8004904 <_svfiprintf_r+0x9c>
 800495e:	9b03      	ldr	r3, [sp, #12]
 8004960:	1d19      	adds	r1, r3, #4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	9103      	str	r1, [sp, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	bfbb      	ittet	lt
 800496a:	425b      	neglt	r3, r3
 800496c:	f042 0202 	orrlt.w	r2, r2, #2
 8004970:	9307      	strge	r3, [sp, #28]
 8004972:	9307      	strlt	r3, [sp, #28]
 8004974:	bfb8      	it	lt
 8004976:	9204      	strlt	r2, [sp, #16]
 8004978:	7823      	ldrb	r3, [r4, #0]
 800497a:	2b2e      	cmp	r3, #46	; 0x2e
 800497c:	d10c      	bne.n	8004998 <_svfiprintf_r+0x130>
 800497e:	7863      	ldrb	r3, [r4, #1]
 8004980:	2b2a      	cmp	r3, #42	; 0x2a
 8004982:	d135      	bne.n	80049f0 <_svfiprintf_r+0x188>
 8004984:	9b03      	ldr	r3, [sp, #12]
 8004986:	1d1a      	adds	r2, r3, #4
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	9203      	str	r2, [sp, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	bfb8      	it	lt
 8004990:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004994:	3402      	adds	r4, #2
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a64 <_svfiprintf_r+0x1fc>
 800499c:	7821      	ldrb	r1, [r4, #0]
 800499e:	2203      	movs	r2, #3
 80049a0:	4650      	mov	r0, sl
 80049a2:	f7fb fc15 	bl	80001d0 <memchr>
 80049a6:	b140      	cbz	r0, 80049ba <_svfiprintf_r+0x152>
 80049a8:	2340      	movs	r3, #64	; 0x40
 80049aa:	eba0 000a 	sub.w	r0, r0, sl
 80049ae:	fa03 f000 	lsl.w	r0, r3, r0
 80049b2:	9b04      	ldr	r3, [sp, #16]
 80049b4:	4303      	orrs	r3, r0
 80049b6:	3401      	adds	r4, #1
 80049b8:	9304      	str	r3, [sp, #16]
 80049ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049be:	4826      	ldr	r0, [pc, #152]	; (8004a58 <_svfiprintf_r+0x1f0>)
 80049c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c4:	2206      	movs	r2, #6
 80049c6:	f7fb fc03 	bl	80001d0 <memchr>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d038      	beq.n	8004a40 <_svfiprintf_r+0x1d8>
 80049ce:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <_svfiprintf_r+0x1f4>)
 80049d0:	bb1b      	cbnz	r3, 8004a1a <_svfiprintf_r+0x1b2>
 80049d2:	9b03      	ldr	r3, [sp, #12]
 80049d4:	3307      	adds	r3, #7
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	3308      	adds	r3, #8
 80049dc:	9303      	str	r3, [sp, #12]
 80049de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e0:	4433      	add	r3, r6
 80049e2:	9309      	str	r3, [sp, #36]	; 0x24
 80049e4:	e767      	b.n	80048b6 <_svfiprintf_r+0x4e>
 80049e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ea:	460c      	mov	r4, r1
 80049ec:	2001      	movs	r0, #1
 80049ee:	e7a5      	b.n	800493c <_svfiprintf_r+0xd4>
 80049f0:	2300      	movs	r3, #0
 80049f2:	3401      	adds	r4, #1
 80049f4:	9305      	str	r3, [sp, #20]
 80049f6:	4619      	mov	r1, r3
 80049f8:	f04f 0c0a 	mov.w	ip, #10
 80049fc:	4620      	mov	r0, r4
 80049fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a02:	3a30      	subs	r2, #48	; 0x30
 8004a04:	2a09      	cmp	r2, #9
 8004a06:	d903      	bls.n	8004a10 <_svfiprintf_r+0x1a8>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0c5      	beq.n	8004998 <_svfiprintf_r+0x130>
 8004a0c:	9105      	str	r1, [sp, #20]
 8004a0e:	e7c3      	b.n	8004998 <_svfiprintf_r+0x130>
 8004a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a14:	4604      	mov	r4, r0
 8004a16:	2301      	movs	r3, #1
 8004a18:	e7f0      	b.n	80049fc <_svfiprintf_r+0x194>
 8004a1a:	ab03      	add	r3, sp, #12
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	462a      	mov	r2, r5
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <_svfiprintf_r+0x1f8>)
 8004a22:	a904      	add	r1, sp, #16
 8004a24:	4638      	mov	r0, r7
 8004a26:	f3af 8000 	nop.w
 8004a2a:	1c42      	adds	r2, r0, #1
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	d1d6      	bne.n	80049de <_svfiprintf_r+0x176>
 8004a30:	89ab      	ldrh	r3, [r5, #12]
 8004a32:	065b      	lsls	r3, r3, #25
 8004a34:	f53f af2c 	bmi.w	8004890 <_svfiprintf_r+0x28>
 8004a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a3a:	b01d      	add	sp, #116	; 0x74
 8004a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a40:	ab03      	add	r3, sp, #12
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	462a      	mov	r2, r5
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <_svfiprintf_r+0x1f8>)
 8004a48:	a904      	add	r1, sp, #16
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f000 f9d4 	bl	8004df8 <_printf_i>
 8004a50:	e7eb      	b.n	8004a2a <_svfiprintf_r+0x1c2>
 8004a52:	bf00      	nop
 8004a54:	0800585c 	.word	0x0800585c
 8004a58:	08005866 	.word	0x08005866
 8004a5c:	00000000 	.word	0x00000000
 8004a60:	080047b1 	.word	0x080047b1
 8004a64:	08005862 	.word	0x08005862

08004a68 <__sfputc_r>:
 8004a68:	6893      	ldr	r3, [r2, #8]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	b410      	push	{r4}
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	da08      	bge.n	8004a86 <__sfputc_r+0x1e>
 8004a74:	6994      	ldr	r4, [r2, #24]
 8004a76:	42a3      	cmp	r3, r4
 8004a78:	db01      	blt.n	8004a7e <__sfputc_r+0x16>
 8004a7a:	290a      	cmp	r1, #10
 8004a7c:	d103      	bne.n	8004a86 <__sfputc_r+0x1e>
 8004a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a82:	f000 bb33 	b.w	80050ec <__swbuf_r>
 8004a86:	6813      	ldr	r3, [r2, #0]
 8004a88:	1c58      	adds	r0, r3, #1
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	7019      	strb	r1, [r3, #0]
 8004a8e:	4608      	mov	r0, r1
 8004a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <__sfputs_r>:
 8004a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a98:	4606      	mov	r6, r0
 8004a9a:	460f      	mov	r7, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	18d5      	adds	r5, r2, r3
 8004aa0:	42ac      	cmp	r4, r5
 8004aa2:	d101      	bne.n	8004aa8 <__sfputs_r+0x12>
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e007      	b.n	8004ab8 <__sfputs_r+0x22>
 8004aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aac:	463a      	mov	r2, r7
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff ffda 	bl	8004a68 <__sfputc_r>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d1f3      	bne.n	8004aa0 <__sfputs_r+0xa>
 8004ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004abc <_vfiprintf_r>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	460d      	mov	r5, r1
 8004ac2:	b09d      	sub	sp, #116	; 0x74
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	4698      	mov	r8, r3
 8004ac8:	4606      	mov	r6, r0
 8004aca:	b118      	cbz	r0, 8004ad4 <_vfiprintf_r+0x18>
 8004acc:	6983      	ldr	r3, [r0, #24]
 8004ace:	b90b      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x18>
 8004ad0:	f7ff fd3a 	bl	8004548 <__sinit>
 8004ad4:	4b89      	ldr	r3, [pc, #548]	; (8004cfc <_vfiprintf_r+0x240>)
 8004ad6:	429d      	cmp	r5, r3
 8004ad8:	d11b      	bne.n	8004b12 <_vfiprintf_r+0x56>
 8004ada:	6875      	ldr	r5, [r6, #4]
 8004adc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ade:	07d9      	lsls	r1, r3, #31
 8004ae0:	d405      	bmi.n	8004aee <_vfiprintf_r+0x32>
 8004ae2:	89ab      	ldrh	r3, [r5, #12]
 8004ae4:	059a      	lsls	r2, r3, #22
 8004ae6:	d402      	bmi.n	8004aee <_vfiprintf_r+0x32>
 8004ae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aea:	f7ff fdcb 	bl	8004684 <__retarget_lock_acquire_recursive>
 8004aee:	89ab      	ldrh	r3, [r5, #12]
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	d501      	bpl.n	8004af8 <_vfiprintf_r+0x3c>
 8004af4:	692b      	ldr	r3, [r5, #16]
 8004af6:	b9eb      	cbnz	r3, 8004b34 <_vfiprintf_r+0x78>
 8004af8:	4629      	mov	r1, r5
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 fb5a 	bl	80051b4 <__swsetup_r>
 8004b00:	b1c0      	cbz	r0, 8004b34 <_vfiprintf_r+0x78>
 8004b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b04:	07dc      	lsls	r4, r3, #31
 8004b06:	d50e      	bpl.n	8004b26 <_vfiprintf_r+0x6a>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0c:	b01d      	add	sp, #116	; 0x74
 8004b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b12:	4b7b      	ldr	r3, [pc, #492]	; (8004d00 <_vfiprintf_r+0x244>)
 8004b14:	429d      	cmp	r5, r3
 8004b16:	d101      	bne.n	8004b1c <_vfiprintf_r+0x60>
 8004b18:	68b5      	ldr	r5, [r6, #8]
 8004b1a:	e7df      	b.n	8004adc <_vfiprintf_r+0x20>
 8004b1c:	4b79      	ldr	r3, [pc, #484]	; (8004d04 <_vfiprintf_r+0x248>)
 8004b1e:	429d      	cmp	r5, r3
 8004b20:	bf08      	it	eq
 8004b22:	68f5      	ldreq	r5, [r6, #12]
 8004b24:	e7da      	b.n	8004adc <_vfiprintf_r+0x20>
 8004b26:	89ab      	ldrh	r3, [r5, #12]
 8004b28:	0598      	lsls	r0, r3, #22
 8004b2a:	d4ed      	bmi.n	8004b08 <_vfiprintf_r+0x4c>
 8004b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b2e:	f7ff fdaa 	bl	8004686 <__retarget_lock_release_recursive>
 8004b32:	e7e9      	b.n	8004b08 <_vfiprintf_r+0x4c>
 8004b34:	2300      	movs	r3, #0
 8004b36:	9309      	str	r3, [sp, #36]	; 0x24
 8004b38:	2320      	movs	r3, #32
 8004b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b42:	2330      	movs	r3, #48	; 0x30
 8004b44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d08 <_vfiprintf_r+0x24c>
 8004b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b4c:	f04f 0901 	mov.w	r9, #1
 8004b50:	4623      	mov	r3, r4
 8004b52:	469a      	mov	sl, r3
 8004b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b58:	b10a      	cbz	r2, 8004b5e <_vfiprintf_r+0xa2>
 8004b5a:	2a25      	cmp	r2, #37	; 0x25
 8004b5c:	d1f9      	bne.n	8004b52 <_vfiprintf_r+0x96>
 8004b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b62:	d00b      	beq.n	8004b7c <_vfiprintf_r+0xc0>
 8004b64:	465b      	mov	r3, fp
 8004b66:	4622      	mov	r2, r4
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f7ff ff93 	bl	8004a96 <__sfputs_r>
 8004b70:	3001      	adds	r0, #1
 8004b72:	f000 80aa 	beq.w	8004cca <_vfiprintf_r+0x20e>
 8004b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b78:	445a      	add	r2, fp
 8004b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80a2 	beq.w	8004cca <_vfiprintf_r+0x20e>
 8004b86:	2300      	movs	r3, #0
 8004b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b90:	f10a 0a01 	add.w	sl, sl, #1
 8004b94:	9304      	str	r3, [sp, #16]
 8004b96:	9307      	str	r3, [sp, #28]
 8004b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b9e:	4654      	mov	r4, sl
 8004ba0:	2205      	movs	r2, #5
 8004ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba6:	4858      	ldr	r0, [pc, #352]	; (8004d08 <_vfiprintf_r+0x24c>)
 8004ba8:	f7fb fb12 	bl	80001d0 <memchr>
 8004bac:	9a04      	ldr	r2, [sp, #16]
 8004bae:	b9d8      	cbnz	r0, 8004be8 <_vfiprintf_r+0x12c>
 8004bb0:	06d1      	lsls	r1, r2, #27
 8004bb2:	bf44      	itt	mi
 8004bb4:	2320      	movmi	r3, #32
 8004bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bba:	0713      	lsls	r3, r2, #28
 8004bbc:	bf44      	itt	mi
 8004bbe:	232b      	movmi	r3, #43	; 0x2b
 8004bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bca:	d015      	beq.n	8004bf8 <_vfiprintf_r+0x13c>
 8004bcc:	9a07      	ldr	r2, [sp, #28]
 8004bce:	4654      	mov	r4, sl
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f04f 0c0a 	mov.w	ip, #10
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bdc:	3b30      	subs	r3, #48	; 0x30
 8004bde:	2b09      	cmp	r3, #9
 8004be0:	d94e      	bls.n	8004c80 <_vfiprintf_r+0x1c4>
 8004be2:	b1b0      	cbz	r0, 8004c12 <_vfiprintf_r+0x156>
 8004be4:	9207      	str	r2, [sp, #28]
 8004be6:	e014      	b.n	8004c12 <_vfiprintf_r+0x156>
 8004be8:	eba0 0308 	sub.w	r3, r0, r8
 8004bec:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	9304      	str	r3, [sp, #16]
 8004bf4:	46a2      	mov	sl, r4
 8004bf6:	e7d2      	b.n	8004b9e <_vfiprintf_r+0xe2>
 8004bf8:	9b03      	ldr	r3, [sp, #12]
 8004bfa:	1d19      	adds	r1, r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	9103      	str	r1, [sp, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bfbb      	ittet	lt
 8004c04:	425b      	neglt	r3, r3
 8004c06:	f042 0202 	orrlt.w	r2, r2, #2
 8004c0a:	9307      	strge	r3, [sp, #28]
 8004c0c:	9307      	strlt	r3, [sp, #28]
 8004c0e:	bfb8      	it	lt
 8004c10:	9204      	strlt	r2, [sp, #16]
 8004c12:	7823      	ldrb	r3, [r4, #0]
 8004c14:	2b2e      	cmp	r3, #46	; 0x2e
 8004c16:	d10c      	bne.n	8004c32 <_vfiprintf_r+0x176>
 8004c18:	7863      	ldrb	r3, [r4, #1]
 8004c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1c:	d135      	bne.n	8004c8a <_vfiprintf_r+0x1ce>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	1d1a      	adds	r2, r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	9203      	str	r2, [sp, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfb8      	it	lt
 8004c2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c2e:	3402      	adds	r4, #2
 8004c30:	9305      	str	r3, [sp, #20]
 8004c32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d18 <_vfiprintf_r+0x25c>
 8004c36:	7821      	ldrb	r1, [r4, #0]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	f7fb fac8 	bl	80001d0 <memchr>
 8004c40:	b140      	cbz	r0, 8004c54 <_vfiprintf_r+0x198>
 8004c42:	2340      	movs	r3, #64	; 0x40
 8004c44:	eba0 000a 	sub.w	r0, r0, sl
 8004c48:	fa03 f000 	lsl.w	r0, r3, r0
 8004c4c:	9b04      	ldr	r3, [sp, #16]
 8004c4e:	4303      	orrs	r3, r0
 8004c50:	3401      	adds	r4, #1
 8004c52:	9304      	str	r3, [sp, #16]
 8004c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c58:	482c      	ldr	r0, [pc, #176]	; (8004d0c <_vfiprintf_r+0x250>)
 8004c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c5e:	2206      	movs	r2, #6
 8004c60:	f7fb fab6 	bl	80001d0 <memchr>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d03f      	beq.n	8004ce8 <_vfiprintf_r+0x22c>
 8004c68:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <_vfiprintf_r+0x254>)
 8004c6a:	bb1b      	cbnz	r3, 8004cb4 <_vfiprintf_r+0x1f8>
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	3307      	adds	r3, #7
 8004c70:	f023 0307 	bic.w	r3, r3, #7
 8004c74:	3308      	adds	r3, #8
 8004c76:	9303      	str	r3, [sp, #12]
 8004c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c7a:	443b      	add	r3, r7
 8004c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7e:	e767      	b.n	8004b50 <_vfiprintf_r+0x94>
 8004c80:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c84:	460c      	mov	r4, r1
 8004c86:	2001      	movs	r0, #1
 8004c88:	e7a5      	b.n	8004bd6 <_vfiprintf_r+0x11a>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	3401      	adds	r4, #1
 8004c8e:	9305      	str	r3, [sp, #20]
 8004c90:	4619      	mov	r1, r3
 8004c92:	f04f 0c0a 	mov.w	ip, #10
 8004c96:	4620      	mov	r0, r4
 8004c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c9c:	3a30      	subs	r2, #48	; 0x30
 8004c9e:	2a09      	cmp	r2, #9
 8004ca0:	d903      	bls.n	8004caa <_vfiprintf_r+0x1ee>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0c5      	beq.n	8004c32 <_vfiprintf_r+0x176>
 8004ca6:	9105      	str	r1, [sp, #20]
 8004ca8:	e7c3      	b.n	8004c32 <_vfiprintf_r+0x176>
 8004caa:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cae:	4604      	mov	r4, r0
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e7f0      	b.n	8004c96 <_vfiprintf_r+0x1da>
 8004cb4:	ab03      	add	r3, sp, #12
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	462a      	mov	r2, r5
 8004cba:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <_vfiprintf_r+0x258>)
 8004cbc:	a904      	add	r1, sp, #16
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f3af 8000 	nop.w
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	1c78      	adds	r0, r7, #1
 8004cc8:	d1d6      	bne.n	8004c78 <_vfiprintf_r+0x1bc>
 8004cca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ccc:	07d9      	lsls	r1, r3, #31
 8004cce:	d405      	bmi.n	8004cdc <_vfiprintf_r+0x220>
 8004cd0:	89ab      	ldrh	r3, [r5, #12]
 8004cd2:	059a      	lsls	r2, r3, #22
 8004cd4:	d402      	bmi.n	8004cdc <_vfiprintf_r+0x220>
 8004cd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cd8:	f7ff fcd5 	bl	8004686 <__retarget_lock_release_recursive>
 8004cdc:	89ab      	ldrh	r3, [r5, #12]
 8004cde:	065b      	lsls	r3, r3, #25
 8004ce0:	f53f af12 	bmi.w	8004b08 <_vfiprintf_r+0x4c>
 8004ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce6:	e711      	b.n	8004b0c <_vfiprintf_r+0x50>
 8004ce8:	ab03      	add	r3, sp, #12
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	462a      	mov	r2, r5
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <_vfiprintf_r+0x258>)
 8004cf0:	a904      	add	r1, sp, #16
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 f880 	bl	8004df8 <_printf_i>
 8004cf8:	e7e4      	b.n	8004cc4 <_vfiprintf_r+0x208>
 8004cfa:	bf00      	nop
 8004cfc:	0800581c 	.word	0x0800581c
 8004d00:	0800583c 	.word	0x0800583c
 8004d04:	080057fc 	.word	0x080057fc
 8004d08:	0800585c 	.word	0x0800585c
 8004d0c:	08005866 	.word	0x08005866
 8004d10:	00000000 	.word	0x00000000
 8004d14:	08004a97 	.word	0x08004a97
 8004d18:	08005862 	.word	0x08005862

08004d1c <_printf_common>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	4616      	mov	r6, r2
 8004d22:	4699      	mov	r9, r3
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bfb8      	it	lt
 8004d30:	4613      	movlt	r3, r2
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d38:	4607      	mov	r7, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b10a      	cbz	r2, 8004d42 <_printf_common+0x26>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	0699      	lsls	r1, r3, #26
 8004d46:	bf42      	ittt	mi
 8004d48:	6833      	ldrmi	r3, [r6, #0]
 8004d4a:	3302      	addmi	r3, #2
 8004d4c:	6033      	strmi	r3, [r6, #0]
 8004d4e:	6825      	ldr	r5, [r4, #0]
 8004d50:	f015 0506 	ands.w	r5, r5, #6
 8004d54:	d106      	bne.n	8004d64 <_printf_common+0x48>
 8004d56:	f104 0a19 	add.w	sl, r4, #25
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	6832      	ldr	r2, [r6, #0]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dc26      	bgt.n	8004db2 <_printf_common+0x96>
 8004d64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d68:	1e13      	subs	r3, r2, #0
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	bf18      	it	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	0692      	lsls	r2, r2, #26
 8004d72:	d42b      	bmi.n	8004dcc <_printf_common+0xb0>
 8004d74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d78:	4649      	mov	r1, r9
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	47c0      	blx	r8
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d01e      	beq.n	8004dc0 <_printf_common+0xa4>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	68e5      	ldr	r5, [r4, #12]
 8004d86:	6832      	ldr	r2, [r6, #0]
 8004d88:	f003 0306 	and.w	r3, r3, #6
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	bf08      	it	eq
 8004d90:	1aad      	subeq	r5, r5, r2
 8004d92:	68a3      	ldr	r3, [r4, #8]
 8004d94:	6922      	ldr	r2, [r4, #16]
 8004d96:	bf0c      	ite	eq
 8004d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d9c:	2500      	movne	r5, #0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bfc4      	itt	gt
 8004da2:	1a9b      	subgt	r3, r3, r2
 8004da4:	18ed      	addgt	r5, r5, r3
 8004da6:	2600      	movs	r6, #0
 8004da8:	341a      	adds	r4, #26
 8004daa:	42b5      	cmp	r5, r6
 8004dac:	d11a      	bne.n	8004de4 <_printf_common+0xc8>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e008      	b.n	8004dc4 <_printf_common+0xa8>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4652      	mov	r2, sl
 8004db6:	4649      	mov	r1, r9
 8004db8:	4638      	mov	r0, r7
 8004dba:	47c0      	blx	r8
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d103      	bne.n	8004dc8 <_printf_common+0xac>
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	3501      	adds	r5, #1
 8004dca:	e7c6      	b.n	8004d5a <_printf_common+0x3e>
 8004dcc:	18e1      	adds	r1, r4, r3
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	2030      	movs	r0, #48	; 0x30
 8004dd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dd6:	4422      	add	r2, r4
 8004dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de0:	3302      	adds	r3, #2
 8004de2:	e7c7      	b.n	8004d74 <_printf_common+0x58>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4622      	mov	r2, r4
 8004de8:	4649      	mov	r1, r9
 8004dea:	4638      	mov	r0, r7
 8004dec:	47c0      	blx	r8
 8004dee:	3001      	adds	r0, #1
 8004df0:	d0e6      	beq.n	8004dc0 <_printf_common+0xa4>
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7d9      	b.n	8004daa <_printf_common+0x8e>
	...

08004df8 <_printf_i>:
 8004df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	7e0f      	ldrb	r7, [r1, #24]
 8004dfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e00:	2f78      	cmp	r7, #120	; 0x78
 8004e02:	4691      	mov	r9, r2
 8004e04:	4680      	mov	r8, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	469a      	mov	sl, r3
 8004e0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e0e:	d807      	bhi.n	8004e20 <_printf_i+0x28>
 8004e10:	2f62      	cmp	r7, #98	; 0x62
 8004e12:	d80a      	bhi.n	8004e2a <_printf_i+0x32>
 8004e14:	2f00      	cmp	r7, #0
 8004e16:	f000 80d8 	beq.w	8004fca <_printf_i+0x1d2>
 8004e1a:	2f58      	cmp	r7, #88	; 0x58
 8004e1c:	f000 80a3 	beq.w	8004f66 <_printf_i+0x16e>
 8004e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e28:	e03a      	b.n	8004ea0 <_printf_i+0xa8>
 8004e2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e2e:	2b15      	cmp	r3, #21
 8004e30:	d8f6      	bhi.n	8004e20 <_printf_i+0x28>
 8004e32:	a101      	add	r1, pc, #4	; (adr r1, 8004e38 <_printf_i+0x40>)
 8004e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004ea5 	.word	0x08004ea5
 8004e40:	08004e21 	.word	0x08004e21
 8004e44:	08004e21 	.word	0x08004e21
 8004e48:	08004e21 	.word	0x08004e21
 8004e4c:	08004e21 	.word	0x08004e21
 8004e50:	08004ea5 	.word	0x08004ea5
 8004e54:	08004e21 	.word	0x08004e21
 8004e58:	08004e21 	.word	0x08004e21
 8004e5c:	08004e21 	.word	0x08004e21
 8004e60:	08004e21 	.word	0x08004e21
 8004e64:	08004fb1 	.word	0x08004fb1
 8004e68:	08004ed5 	.word	0x08004ed5
 8004e6c:	08004f93 	.word	0x08004f93
 8004e70:	08004e21 	.word	0x08004e21
 8004e74:	08004e21 	.word	0x08004e21
 8004e78:	08004fd3 	.word	0x08004fd3
 8004e7c:	08004e21 	.word	0x08004e21
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004e21 	.word	0x08004e21
 8004e88:	08004e21 	.word	0x08004e21
 8004e8c:	08004f9b 	.word	0x08004f9b
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	602a      	str	r2, [r5, #0]
 8004e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0a3      	b.n	8004fec <_printf_i+0x1f4>
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	6829      	ldr	r1, [r5, #0]
 8004ea8:	0606      	lsls	r6, r0, #24
 8004eaa:	f101 0304 	add.w	r3, r1, #4
 8004eae:	d50a      	bpl.n	8004ec6 <_printf_i+0xce>
 8004eb0:	680e      	ldr	r6, [r1, #0]
 8004eb2:	602b      	str	r3, [r5, #0]
 8004eb4:	2e00      	cmp	r6, #0
 8004eb6:	da03      	bge.n	8004ec0 <_printf_i+0xc8>
 8004eb8:	232d      	movs	r3, #45	; 0x2d
 8004eba:	4276      	negs	r6, r6
 8004ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec0:	485e      	ldr	r0, [pc, #376]	; (800503c <_printf_i+0x244>)
 8004ec2:	230a      	movs	r3, #10
 8004ec4:	e019      	b.n	8004efa <_printf_i+0x102>
 8004ec6:	680e      	ldr	r6, [r1, #0]
 8004ec8:	602b      	str	r3, [r5, #0]
 8004eca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ece:	bf18      	it	ne
 8004ed0:	b236      	sxthne	r6, r6
 8004ed2:	e7ef      	b.n	8004eb4 <_printf_i+0xbc>
 8004ed4:	682b      	ldr	r3, [r5, #0]
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	1d19      	adds	r1, r3, #4
 8004eda:	6029      	str	r1, [r5, #0]
 8004edc:	0601      	lsls	r1, r0, #24
 8004ede:	d501      	bpl.n	8004ee4 <_printf_i+0xec>
 8004ee0:	681e      	ldr	r6, [r3, #0]
 8004ee2:	e002      	b.n	8004eea <_printf_i+0xf2>
 8004ee4:	0646      	lsls	r6, r0, #25
 8004ee6:	d5fb      	bpl.n	8004ee0 <_printf_i+0xe8>
 8004ee8:	881e      	ldrh	r6, [r3, #0]
 8004eea:	4854      	ldr	r0, [pc, #336]	; (800503c <_printf_i+0x244>)
 8004eec:	2f6f      	cmp	r7, #111	; 0x6f
 8004eee:	bf0c      	ite	eq
 8004ef0:	2308      	moveq	r3, #8
 8004ef2:	230a      	movne	r3, #10
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004efa:	6865      	ldr	r5, [r4, #4]
 8004efc:	60a5      	str	r5, [r4, #8]
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	bfa2      	ittt	ge
 8004f02:	6821      	ldrge	r1, [r4, #0]
 8004f04:	f021 0104 	bicge.w	r1, r1, #4
 8004f08:	6021      	strge	r1, [r4, #0]
 8004f0a:	b90e      	cbnz	r6, 8004f10 <_printf_i+0x118>
 8004f0c:	2d00      	cmp	r5, #0
 8004f0e:	d04d      	beq.n	8004fac <_printf_i+0x1b4>
 8004f10:	4615      	mov	r5, r2
 8004f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f16:	fb03 6711 	mls	r7, r3, r1, r6
 8004f1a:	5dc7      	ldrb	r7, [r0, r7]
 8004f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f20:	4637      	mov	r7, r6
 8004f22:	42bb      	cmp	r3, r7
 8004f24:	460e      	mov	r6, r1
 8004f26:	d9f4      	bls.n	8004f12 <_printf_i+0x11a>
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d10b      	bne.n	8004f44 <_printf_i+0x14c>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	07de      	lsls	r6, r3, #31
 8004f30:	d508      	bpl.n	8004f44 <_printf_i+0x14c>
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	6861      	ldr	r1, [r4, #4]
 8004f36:	4299      	cmp	r1, r3
 8004f38:	bfde      	ittt	le
 8004f3a:	2330      	movle	r3, #48	; 0x30
 8004f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f44:	1b52      	subs	r2, r2, r5
 8004f46:	6122      	str	r2, [r4, #16]
 8004f48:	f8cd a000 	str.w	sl, [sp]
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	aa03      	add	r2, sp, #12
 8004f50:	4621      	mov	r1, r4
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff fee2 	bl	8004d1c <_printf_common>
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d14c      	bne.n	8004ff6 <_printf_i+0x1fe>
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f60:	b004      	add	sp, #16
 8004f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f66:	4835      	ldr	r0, [pc, #212]	; (800503c <_printf_i+0x244>)
 8004f68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f6c:	6829      	ldr	r1, [r5, #0]
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f74:	6029      	str	r1, [r5, #0]
 8004f76:	061d      	lsls	r5, r3, #24
 8004f78:	d514      	bpl.n	8004fa4 <_printf_i+0x1ac>
 8004f7a:	07df      	lsls	r7, r3, #31
 8004f7c:	bf44      	itt	mi
 8004f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f82:	6023      	strmi	r3, [r4, #0]
 8004f84:	b91e      	cbnz	r6, 8004f8e <_printf_i+0x196>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	f023 0320 	bic.w	r3, r3, #32
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	2310      	movs	r3, #16
 8004f90:	e7b0      	b.n	8004ef4 <_printf_i+0xfc>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	2378      	movs	r3, #120	; 0x78
 8004f9c:	4828      	ldr	r0, [pc, #160]	; (8005040 <_printf_i+0x248>)
 8004f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fa2:	e7e3      	b.n	8004f6c <_printf_i+0x174>
 8004fa4:	0659      	lsls	r1, r3, #25
 8004fa6:	bf48      	it	mi
 8004fa8:	b2b6      	uxthmi	r6, r6
 8004faa:	e7e6      	b.n	8004f7a <_printf_i+0x182>
 8004fac:	4615      	mov	r5, r2
 8004fae:	e7bb      	b.n	8004f28 <_printf_i+0x130>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	6826      	ldr	r6, [r4, #0]
 8004fb4:	6961      	ldr	r1, [r4, #20]
 8004fb6:	1d18      	adds	r0, r3, #4
 8004fb8:	6028      	str	r0, [r5, #0]
 8004fba:	0635      	lsls	r5, r6, #24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	d501      	bpl.n	8004fc4 <_printf_i+0x1cc>
 8004fc0:	6019      	str	r1, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <_printf_i+0x1d2>
 8004fc4:	0670      	lsls	r0, r6, #25
 8004fc6:	d5fb      	bpl.n	8004fc0 <_printf_i+0x1c8>
 8004fc8:	8019      	strh	r1, [r3, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6123      	str	r3, [r4, #16]
 8004fce:	4615      	mov	r5, r2
 8004fd0:	e7ba      	b.n	8004f48 <_printf_i+0x150>
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	1d1a      	adds	r2, r3, #4
 8004fd6:	602a      	str	r2, [r5, #0]
 8004fd8:	681d      	ldr	r5, [r3, #0]
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f7fb f8f6 	bl	80001d0 <memchr>
 8004fe4:	b108      	cbz	r0, 8004fea <_printf_i+0x1f2>
 8004fe6:	1b40      	subs	r0, r0, r5
 8004fe8:	6060      	str	r0, [r4, #4]
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff4:	e7a8      	b.n	8004f48 <_printf_i+0x150>
 8004ff6:	6923      	ldr	r3, [r4, #16]
 8004ff8:	462a      	mov	r2, r5
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	47d0      	blx	sl
 8005000:	3001      	adds	r0, #1
 8005002:	d0ab      	beq.n	8004f5c <_printf_i+0x164>
 8005004:	6823      	ldr	r3, [r4, #0]
 8005006:	079b      	lsls	r3, r3, #30
 8005008:	d413      	bmi.n	8005032 <_printf_i+0x23a>
 800500a:	68e0      	ldr	r0, [r4, #12]
 800500c:	9b03      	ldr	r3, [sp, #12]
 800500e:	4298      	cmp	r0, r3
 8005010:	bfb8      	it	lt
 8005012:	4618      	movlt	r0, r3
 8005014:	e7a4      	b.n	8004f60 <_printf_i+0x168>
 8005016:	2301      	movs	r3, #1
 8005018:	4632      	mov	r2, r6
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	47d0      	blx	sl
 8005020:	3001      	adds	r0, #1
 8005022:	d09b      	beq.n	8004f5c <_printf_i+0x164>
 8005024:	3501      	adds	r5, #1
 8005026:	68e3      	ldr	r3, [r4, #12]
 8005028:	9903      	ldr	r1, [sp, #12]
 800502a:	1a5b      	subs	r3, r3, r1
 800502c:	42ab      	cmp	r3, r5
 800502e:	dcf2      	bgt.n	8005016 <_printf_i+0x21e>
 8005030:	e7eb      	b.n	800500a <_printf_i+0x212>
 8005032:	2500      	movs	r5, #0
 8005034:	f104 0619 	add.w	r6, r4, #25
 8005038:	e7f5      	b.n	8005026 <_printf_i+0x22e>
 800503a:	bf00      	nop
 800503c:	0800586d 	.word	0x0800586d
 8005040:	0800587e 	.word	0x0800587e

08005044 <_sbrk_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4d06      	ldr	r5, [pc, #24]	; (8005060 <_sbrk_r+0x1c>)
 8005048:	2300      	movs	r3, #0
 800504a:	4604      	mov	r4, r0
 800504c:	4608      	mov	r0, r1
 800504e:	602b      	str	r3, [r5, #0]
 8005050:	f7fb fc44 	bl	80008dc <_sbrk>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_sbrk_r+0x1a>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	b103      	cbz	r3, 800505e <_sbrk_r+0x1a>
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	200002c4 	.word	0x200002c4

08005064 <__sread>:
 8005064:	b510      	push	{r4, lr}
 8005066:	460c      	mov	r4, r1
 8005068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506c:	f000 fafc 	bl	8005668 <_read_r>
 8005070:	2800      	cmp	r0, #0
 8005072:	bfab      	itete	ge
 8005074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005076:	89a3      	ldrhlt	r3, [r4, #12]
 8005078:	181b      	addge	r3, r3, r0
 800507a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800507e:	bfac      	ite	ge
 8005080:	6563      	strge	r3, [r4, #84]	; 0x54
 8005082:	81a3      	strhlt	r3, [r4, #12]
 8005084:	bd10      	pop	{r4, pc}

08005086 <__swrite>:
 8005086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508a:	461f      	mov	r7, r3
 800508c:	898b      	ldrh	r3, [r1, #12]
 800508e:	05db      	lsls	r3, r3, #23
 8005090:	4605      	mov	r5, r0
 8005092:	460c      	mov	r4, r1
 8005094:	4616      	mov	r6, r2
 8005096:	d505      	bpl.n	80050a4 <__swrite+0x1e>
 8005098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509c:	2302      	movs	r3, #2
 800509e:	2200      	movs	r2, #0
 80050a0:	f000 f9c8 	bl	8005434 <_lseek_r>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	4632      	mov	r2, r6
 80050b2:	463b      	mov	r3, r7
 80050b4:	4628      	mov	r0, r5
 80050b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ba:	f000 b869 	b.w	8005190 <_write_r>

080050be <__sseek>:
 80050be:	b510      	push	{r4, lr}
 80050c0:	460c      	mov	r4, r1
 80050c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c6:	f000 f9b5 	bl	8005434 <_lseek_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	bf15      	itete	ne
 80050d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050da:	81a3      	strheq	r3, [r4, #12]
 80050dc:	bf18      	it	ne
 80050de:	81a3      	strhne	r3, [r4, #12]
 80050e0:	bd10      	pop	{r4, pc}

080050e2 <__sclose>:
 80050e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e6:	f000 b8d3 	b.w	8005290 <_close_r>
	...

080050ec <__swbuf_r>:
 80050ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ee:	460e      	mov	r6, r1
 80050f0:	4614      	mov	r4, r2
 80050f2:	4605      	mov	r5, r0
 80050f4:	b118      	cbz	r0, 80050fe <__swbuf_r+0x12>
 80050f6:	6983      	ldr	r3, [r0, #24]
 80050f8:	b90b      	cbnz	r3, 80050fe <__swbuf_r+0x12>
 80050fa:	f7ff fa25 	bl	8004548 <__sinit>
 80050fe:	4b21      	ldr	r3, [pc, #132]	; (8005184 <__swbuf_r+0x98>)
 8005100:	429c      	cmp	r4, r3
 8005102:	d12b      	bne.n	800515c <__swbuf_r+0x70>
 8005104:	686c      	ldr	r4, [r5, #4]
 8005106:	69a3      	ldr	r3, [r4, #24]
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	071a      	lsls	r2, r3, #28
 800510e:	d52f      	bpl.n	8005170 <__swbuf_r+0x84>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	b36b      	cbz	r3, 8005170 <__swbuf_r+0x84>
 8005114:	6923      	ldr	r3, [r4, #16]
 8005116:	6820      	ldr	r0, [r4, #0]
 8005118:	1ac0      	subs	r0, r0, r3
 800511a:	6963      	ldr	r3, [r4, #20]
 800511c:	b2f6      	uxtb	r6, r6
 800511e:	4283      	cmp	r3, r0
 8005120:	4637      	mov	r7, r6
 8005122:	dc04      	bgt.n	800512e <__swbuf_r+0x42>
 8005124:	4621      	mov	r1, r4
 8005126:	4628      	mov	r0, r5
 8005128:	f000 f948 	bl	80053bc <_fflush_r>
 800512c:	bb30      	cbnz	r0, 800517c <__swbuf_r+0x90>
 800512e:	68a3      	ldr	r3, [r4, #8]
 8005130:	3b01      	subs	r3, #1
 8005132:	60a3      	str	r3, [r4, #8]
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	6022      	str	r2, [r4, #0]
 800513a:	701e      	strb	r6, [r3, #0]
 800513c:	6963      	ldr	r3, [r4, #20]
 800513e:	3001      	adds	r0, #1
 8005140:	4283      	cmp	r3, r0
 8005142:	d004      	beq.n	800514e <__swbuf_r+0x62>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	07db      	lsls	r3, r3, #31
 8005148:	d506      	bpl.n	8005158 <__swbuf_r+0x6c>
 800514a:	2e0a      	cmp	r6, #10
 800514c:	d104      	bne.n	8005158 <__swbuf_r+0x6c>
 800514e:	4621      	mov	r1, r4
 8005150:	4628      	mov	r0, r5
 8005152:	f000 f933 	bl	80053bc <_fflush_r>
 8005156:	b988      	cbnz	r0, 800517c <__swbuf_r+0x90>
 8005158:	4638      	mov	r0, r7
 800515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <__swbuf_r+0x9c>)
 800515e:	429c      	cmp	r4, r3
 8005160:	d101      	bne.n	8005166 <__swbuf_r+0x7a>
 8005162:	68ac      	ldr	r4, [r5, #8]
 8005164:	e7cf      	b.n	8005106 <__swbuf_r+0x1a>
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <__swbuf_r+0xa0>)
 8005168:	429c      	cmp	r4, r3
 800516a:	bf08      	it	eq
 800516c:	68ec      	ldreq	r4, [r5, #12]
 800516e:	e7ca      	b.n	8005106 <__swbuf_r+0x1a>
 8005170:	4621      	mov	r1, r4
 8005172:	4628      	mov	r0, r5
 8005174:	f000 f81e 	bl	80051b4 <__swsetup_r>
 8005178:	2800      	cmp	r0, #0
 800517a:	d0cb      	beq.n	8005114 <__swbuf_r+0x28>
 800517c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005180:	e7ea      	b.n	8005158 <__swbuf_r+0x6c>
 8005182:	bf00      	nop
 8005184:	0800581c 	.word	0x0800581c
 8005188:	0800583c 	.word	0x0800583c
 800518c:	080057fc 	.word	0x080057fc

08005190 <_write_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4d07      	ldr	r5, [pc, #28]	; (80051b0 <_write_r+0x20>)
 8005194:	4604      	mov	r4, r0
 8005196:	4608      	mov	r0, r1
 8005198:	4611      	mov	r1, r2
 800519a:	2200      	movs	r2, #0
 800519c:	602a      	str	r2, [r5, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f7fb fb4b 	bl	800083a <_write>
 80051a4:	1c43      	adds	r3, r0, #1
 80051a6:	d102      	bne.n	80051ae <_write_r+0x1e>
 80051a8:	682b      	ldr	r3, [r5, #0]
 80051aa:	b103      	cbz	r3, 80051ae <_write_r+0x1e>
 80051ac:	6023      	str	r3, [r4, #0]
 80051ae:	bd38      	pop	{r3, r4, r5, pc}
 80051b0:	200002c4 	.word	0x200002c4

080051b4 <__swsetup_r>:
 80051b4:	4b32      	ldr	r3, [pc, #200]	; (8005280 <__swsetup_r+0xcc>)
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	681d      	ldr	r5, [r3, #0]
 80051ba:	4606      	mov	r6, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	b125      	cbz	r5, 80051ca <__swsetup_r+0x16>
 80051c0:	69ab      	ldr	r3, [r5, #24]
 80051c2:	b913      	cbnz	r3, 80051ca <__swsetup_r+0x16>
 80051c4:	4628      	mov	r0, r5
 80051c6:	f7ff f9bf 	bl	8004548 <__sinit>
 80051ca:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <__swsetup_r+0xd0>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d10f      	bne.n	80051f0 <__swsetup_r+0x3c>
 80051d0:	686c      	ldr	r4, [r5, #4]
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051d8:	0719      	lsls	r1, r3, #28
 80051da:	d42c      	bmi.n	8005236 <__swsetup_r+0x82>
 80051dc:	06dd      	lsls	r5, r3, #27
 80051de:	d411      	bmi.n	8005204 <__swsetup_r+0x50>
 80051e0:	2309      	movs	r3, #9
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ee:	e03e      	b.n	800526e <__swsetup_r+0xba>
 80051f0:	4b25      	ldr	r3, [pc, #148]	; (8005288 <__swsetup_r+0xd4>)
 80051f2:	429c      	cmp	r4, r3
 80051f4:	d101      	bne.n	80051fa <__swsetup_r+0x46>
 80051f6:	68ac      	ldr	r4, [r5, #8]
 80051f8:	e7eb      	b.n	80051d2 <__swsetup_r+0x1e>
 80051fa:	4b24      	ldr	r3, [pc, #144]	; (800528c <__swsetup_r+0xd8>)
 80051fc:	429c      	cmp	r4, r3
 80051fe:	bf08      	it	eq
 8005200:	68ec      	ldreq	r4, [r5, #12]
 8005202:	e7e6      	b.n	80051d2 <__swsetup_r+0x1e>
 8005204:	0758      	lsls	r0, r3, #29
 8005206:	d512      	bpl.n	800522e <__swsetup_r+0x7a>
 8005208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800520a:	b141      	cbz	r1, 800521e <__swsetup_r+0x6a>
 800520c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <__swsetup_r+0x66>
 8005214:	4630      	mov	r0, r6
 8005216:	f000 f9ab 	bl	8005570 <_free_r>
 800521a:	2300      	movs	r3, #0
 800521c:	6363      	str	r3, [r4, #52]	; 0x34
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	2300      	movs	r3, #0
 8005228:	6063      	str	r3, [r4, #4]
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f043 0308 	orr.w	r3, r3, #8
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	b94b      	cbnz	r3, 800524e <__swsetup_r+0x9a>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005244:	d003      	beq.n	800524e <__swsetup_r+0x9a>
 8005246:	4621      	mov	r1, r4
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f92b 	bl	80054a4 <__smakebuf_r>
 800524e:	89a0      	ldrh	r0, [r4, #12]
 8005250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005254:	f010 0301 	ands.w	r3, r0, #1
 8005258:	d00a      	beq.n	8005270 <__swsetup_r+0xbc>
 800525a:	2300      	movs	r3, #0
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	6963      	ldr	r3, [r4, #20]
 8005260:	425b      	negs	r3, r3
 8005262:	61a3      	str	r3, [r4, #24]
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	b943      	cbnz	r3, 800527a <__swsetup_r+0xc6>
 8005268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800526c:	d1ba      	bne.n	80051e4 <__swsetup_r+0x30>
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	0781      	lsls	r1, r0, #30
 8005272:	bf58      	it	pl
 8005274:	6963      	ldrpl	r3, [r4, #20]
 8005276:	60a3      	str	r3, [r4, #8]
 8005278:	e7f4      	b.n	8005264 <__swsetup_r+0xb0>
 800527a:	2000      	movs	r0, #0
 800527c:	e7f7      	b.n	800526e <__swsetup_r+0xba>
 800527e:	bf00      	nop
 8005280:	2000019c 	.word	0x2000019c
 8005284:	0800581c 	.word	0x0800581c
 8005288:	0800583c 	.word	0x0800583c
 800528c:	080057fc 	.word	0x080057fc

08005290 <_close_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4d06      	ldr	r5, [pc, #24]	; (80052ac <_close_r+0x1c>)
 8005294:	2300      	movs	r3, #0
 8005296:	4604      	mov	r4, r0
 8005298:	4608      	mov	r0, r1
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	f7fb fae9 	bl	8000872 <_close>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_close_r+0x1a>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_close_r+0x1a>
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	200002c4 	.word	0x200002c4

080052b0 <__sflush_r>:
 80052b0:	898a      	ldrh	r2, [r1, #12]
 80052b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b6:	4605      	mov	r5, r0
 80052b8:	0710      	lsls	r0, r2, #28
 80052ba:	460c      	mov	r4, r1
 80052bc:	d458      	bmi.n	8005370 <__sflush_r+0xc0>
 80052be:	684b      	ldr	r3, [r1, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	dc05      	bgt.n	80052d0 <__sflush_r+0x20>
 80052c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	dc02      	bgt.n	80052d0 <__sflush_r+0x20>
 80052ca:	2000      	movs	r0, #0
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d2:	2e00      	cmp	r6, #0
 80052d4:	d0f9      	beq.n	80052ca <__sflush_r+0x1a>
 80052d6:	2300      	movs	r3, #0
 80052d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052dc:	682f      	ldr	r7, [r5, #0]
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	d032      	beq.n	8005348 <__sflush_r+0x98>
 80052e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	075a      	lsls	r2, r3, #29
 80052e8:	d505      	bpl.n	80052f6 <__sflush_r+0x46>
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	1ac0      	subs	r0, r0, r3
 80052ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052f0:	b10b      	cbz	r3, 80052f6 <__sflush_r+0x46>
 80052f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f4:	1ac0      	subs	r0, r0, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	4602      	mov	r2, r0
 80052fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052fc:	6a21      	ldr	r1, [r4, #32]
 80052fe:	4628      	mov	r0, r5
 8005300:	47b0      	blx	r6
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	89a3      	ldrh	r3, [r4, #12]
 8005306:	d106      	bne.n	8005316 <__sflush_r+0x66>
 8005308:	6829      	ldr	r1, [r5, #0]
 800530a:	291d      	cmp	r1, #29
 800530c:	d82c      	bhi.n	8005368 <__sflush_r+0xb8>
 800530e:	4a2a      	ldr	r2, [pc, #168]	; (80053b8 <__sflush_r+0x108>)
 8005310:	40ca      	lsrs	r2, r1
 8005312:	07d6      	lsls	r6, r2, #31
 8005314:	d528      	bpl.n	8005368 <__sflush_r+0xb8>
 8005316:	2200      	movs	r2, #0
 8005318:	6062      	str	r2, [r4, #4]
 800531a:	04d9      	lsls	r1, r3, #19
 800531c:	6922      	ldr	r2, [r4, #16]
 800531e:	6022      	str	r2, [r4, #0]
 8005320:	d504      	bpl.n	800532c <__sflush_r+0x7c>
 8005322:	1c42      	adds	r2, r0, #1
 8005324:	d101      	bne.n	800532a <__sflush_r+0x7a>
 8005326:	682b      	ldr	r3, [r5, #0]
 8005328:	b903      	cbnz	r3, 800532c <__sflush_r+0x7c>
 800532a:	6560      	str	r0, [r4, #84]	; 0x54
 800532c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800532e:	602f      	str	r7, [r5, #0]
 8005330:	2900      	cmp	r1, #0
 8005332:	d0ca      	beq.n	80052ca <__sflush_r+0x1a>
 8005334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005338:	4299      	cmp	r1, r3
 800533a:	d002      	beq.n	8005342 <__sflush_r+0x92>
 800533c:	4628      	mov	r0, r5
 800533e:	f000 f917 	bl	8005570 <_free_r>
 8005342:	2000      	movs	r0, #0
 8005344:	6360      	str	r0, [r4, #52]	; 0x34
 8005346:	e7c1      	b.n	80052cc <__sflush_r+0x1c>
 8005348:	6a21      	ldr	r1, [r4, #32]
 800534a:	2301      	movs	r3, #1
 800534c:	4628      	mov	r0, r5
 800534e:	47b0      	blx	r6
 8005350:	1c41      	adds	r1, r0, #1
 8005352:	d1c7      	bne.n	80052e4 <__sflush_r+0x34>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0c4      	beq.n	80052e4 <__sflush_r+0x34>
 800535a:	2b1d      	cmp	r3, #29
 800535c:	d001      	beq.n	8005362 <__sflush_r+0xb2>
 800535e:	2b16      	cmp	r3, #22
 8005360:	d101      	bne.n	8005366 <__sflush_r+0xb6>
 8005362:	602f      	str	r7, [r5, #0]
 8005364:	e7b1      	b.n	80052ca <__sflush_r+0x1a>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	e7ad      	b.n	80052cc <__sflush_r+0x1c>
 8005370:	690f      	ldr	r7, [r1, #16]
 8005372:	2f00      	cmp	r7, #0
 8005374:	d0a9      	beq.n	80052ca <__sflush_r+0x1a>
 8005376:	0793      	lsls	r3, r2, #30
 8005378:	680e      	ldr	r6, [r1, #0]
 800537a:	bf08      	it	eq
 800537c:	694b      	ldreq	r3, [r1, #20]
 800537e:	600f      	str	r7, [r1, #0]
 8005380:	bf18      	it	ne
 8005382:	2300      	movne	r3, #0
 8005384:	eba6 0807 	sub.w	r8, r6, r7
 8005388:	608b      	str	r3, [r1, #8]
 800538a:	f1b8 0f00 	cmp.w	r8, #0
 800538e:	dd9c      	ble.n	80052ca <__sflush_r+0x1a>
 8005390:	6a21      	ldr	r1, [r4, #32]
 8005392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005394:	4643      	mov	r3, r8
 8005396:	463a      	mov	r2, r7
 8005398:	4628      	mov	r0, r5
 800539a:	47b0      	blx	r6
 800539c:	2800      	cmp	r0, #0
 800539e:	dc06      	bgt.n	80053ae <__sflush_r+0xfe>
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ac:	e78e      	b.n	80052cc <__sflush_r+0x1c>
 80053ae:	4407      	add	r7, r0
 80053b0:	eba8 0800 	sub.w	r8, r8, r0
 80053b4:	e7e9      	b.n	800538a <__sflush_r+0xda>
 80053b6:	bf00      	nop
 80053b8:	20400001 	.word	0x20400001

080053bc <_fflush_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	690b      	ldr	r3, [r1, #16]
 80053c0:	4605      	mov	r5, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	b913      	cbnz	r3, 80053cc <_fflush_r+0x10>
 80053c6:	2500      	movs	r5, #0
 80053c8:	4628      	mov	r0, r5
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	b118      	cbz	r0, 80053d6 <_fflush_r+0x1a>
 80053ce:	6983      	ldr	r3, [r0, #24]
 80053d0:	b90b      	cbnz	r3, 80053d6 <_fflush_r+0x1a>
 80053d2:	f7ff f8b9 	bl	8004548 <__sinit>
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <_fflush_r+0x6c>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	d11b      	bne.n	8005414 <_fflush_r+0x58>
 80053dc:	686c      	ldr	r4, [r5, #4]
 80053de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ef      	beq.n	80053c6 <_fflush_r+0xa>
 80053e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053e8:	07d0      	lsls	r0, r2, #31
 80053ea:	d404      	bmi.n	80053f6 <_fflush_r+0x3a>
 80053ec:	0599      	lsls	r1, r3, #22
 80053ee:	d402      	bmi.n	80053f6 <_fflush_r+0x3a>
 80053f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f2:	f7ff f947 	bl	8004684 <__retarget_lock_acquire_recursive>
 80053f6:	4628      	mov	r0, r5
 80053f8:	4621      	mov	r1, r4
 80053fa:	f7ff ff59 	bl	80052b0 <__sflush_r>
 80053fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005400:	07da      	lsls	r2, r3, #31
 8005402:	4605      	mov	r5, r0
 8005404:	d4e0      	bmi.n	80053c8 <_fflush_r+0xc>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	059b      	lsls	r3, r3, #22
 800540a:	d4dd      	bmi.n	80053c8 <_fflush_r+0xc>
 800540c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540e:	f7ff f93a 	bl	8004686 <__retarget_lock_release_recursive>
 8005412:	e7d9      	b.n	80053c8 <_fflush_r+0xc>
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <_fflush_r+0x70>)
 8005416:	429c      	cmp	r4, r3
 8005418:	d101      	bne.n	800541e <_fflush_r+0x62>
 800541a:	68ac      	ldr	r4, [r5, #8]
 800541c:	e7df      	b.n	80053de <_fflush_r+0x22>
 800541e:	4b04      	ldr	r3, [pc, #16]	; (8005430 <_fflush_r+0x74>)
 8005420:	429c      	cmp	r4, r3
 8005422:	bf08      	it	eq
 8005424:	68ec      	ldreq	r4, [r5, #12]
 8005426:	e7da      	b.n	80053de <_fflush_r+0x22>
 8005428:	0800581c 	.word	0x0800581c
 800542c:	0800583c 	.word	0x0800583c
 8005430:	080057fc 	.word	0x080057fc

08005434 <_lseek_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	; (8005454 <_lseek_r+0x20>)
 8005438:	4604      	mov	r4, r0
 800543a:	4608      	mov	r0, r1
 800543c:	4611      	mov	r1, r2
 800543e:	2200      	movs	r2, #0
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f7fb fa3c 	bl	80008c0 <_lseek>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_lseek_r+0x1e>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_lseek_r+0x1e>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200002c4 	.word	0x200002c4

08005458 <__swhatbuf_r>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	460e      	mov	r6, r1
 800545c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005460:	2900      	cmp	r1, #0
 8005462:	b096      	sub	sp, #88	; 0x58
 8005464:	4614      	mov	r4, r2
 8005466:	461d      	mov	r5, r3
 8005468:	da08      	bge.n	800547c <__swhatbuf_r+0x24>
 800546a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	061a      	lsls	r2, r3, #24
 8005474:	d410      	bmi.n	8005498 <__swhatbuf_r+0x40>
 8005476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800547a:	e00e      	b.n	800549a <__swhatbuf_r+0x42>
 800547c:	466a      	mov	r2, sp
 800547e:	f000 f905 	bl	800568c <_fstat_r>
 8005482:	2800      	cmp	r0, #0
 8005484:	dbf1      	blt.n	800546a <__swhatbuf_r+0x12>
 8005486:	9a01      	ldr	r2, [sp, #4]
 8005488:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800548c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005490:	425a      	negs	r2, r3
 8005492:	415a      	adcs	r2, r3
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	e7ee      	b.n	8005476 <__swhatbuf_r+0x1e>
 8005498:	2340      	movs	r3, #64	; 0x40
 800549a:	2000      	movs	r0, #0
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	b016      	add	sp, #88	; 0x58
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080054a4 <__smakebuf_r>:
 80054a4:	898b      	ldrh	r3, [r1, #12]
 80054a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054a8:	079d      	lsls	r5, r3, #30
 80054aa:	4606      	mov	r6, r0
 80054ac:	460c      	mov	r4, r1
 80054ae:	d507      	bpl.n	80054c0 <__smakebuf_r+0x1c>
 80054b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	6123      	str	r3, [r4, #16]
 80054b8:	2301      	movs	r3, #1
 80054ba:	6163      	str	r3, [r4, #20]
 80054bc:	b002      	add	sp, #8
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	ab01      	add	r3, sp, #4
 80054c2:	466a      	mov	r2, sp
 80054c4:	f7ff ffc8 	bl	8005458 <__swhatbuf_r>
 80054c8:	9900      	ldr	r1, [sp, #0]
 80054ca:	4605      	mov	r5, r0
 80054cc:	4630      	mov	r0, r6
 80054ce:	f7ff f8fb 	bl	80046c8 <_malloc_r>
 80054d2:	b948      	cbnz	r0, 80054e8 <__smakebuf_r+0x44>
 80054d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d8:	059a      	lsls	r2, r3, #22
 80054da:	d4ef      	bmi.n	80054bc <__smakebuf_r+0x18>
 80054dc:	f023 0303 	bic.w	r3, r3, #3
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	81a3      	strh	r3, [r4, #12]
 80054e6:	e7e3      	b.n	80054b0 <__smakebuf_r+0xc>
 80054e8:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <__smakebuf_r+0x7c>)
 80054ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	6020      	str	r0, [r4, #0]
 80054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f4:	81a3      	strh	r3, [r4, #12]
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	6163      	str	r3, [r4, #20]
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	6120      	str	r0, [r4, #16]
 80054fe:	b15b      	cbz	r3, 8005518 <__smakebuf_r+0x74>
 8005500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005504:	4630      	mov	r0, r6
 8005506:	f000 f8d3 	bl	80056b0 <_isatty_r>
 800550a:	b128      	cbz	r0, 8005518 <__smakebuf_r+0x74>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	89a0      	ldrh	r0, [r4, #12]
 800551a:	4305      	orrs	r5, r0
 800551c:	81a5      	strh	r5, [r4, #12]
 800551e:	e7cd      	b.n	80054bc <__smakebuf_r+0x18>
 8005520:	080044e1 	.word	0x080044e1

08005524 <memmove>:
 8005524:	4288      	cmp	r0, r1
 8005526:	b510      	push	{r4, lr}
 8005528:	eb01 0402 	add.w	r4, r1, r2
 800552c:	d902      	bls.n	8005534 <memmove+0x10>
 800552e:	4284      	cmp	r4, r0
 8005530:	4623      	mov	r3, r4
 8005532:	d807      	bhi.n	8005544 <memmove+0x20>
 8005534:	1e43      	subs	r3, r0, #1
 8005536:	42a1      	cmp	r1, r4
 8005538:	d008      	beq.n	800554c <memmove+0x28>
 800553a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005542:	e7f8      	b.n	8005536 <memmove+0x12>
 8005544:	4402      	add	r2, r0
 8005546:	4601      	mov	r1, r0
 8005548:	428a      	cmp	r2, r1
 800554a:	d100      	bne.n	800554e <memmove+0x2a>
 800554c:	bd10      	pop	{r4, pc}
 800554e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005556:	e7f7      	b.n	8005548 <memmove+0x24>

08005558 <__malloc_lock>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__malloc_lock+0x8>)
 800555a:	f7ff b893 	b.w	8004684 <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	200002b8 	.word	0x200002b8

08005564 <__malloc_unlock>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__malloc_unlock+0x8>)
 8005566:	f7ff b88e 	b.w	8004686 <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	200002b8 	.word	0x200002b8

08005570 <_free_r>:
 8005570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005572:	2900      	cmp	r1, #0
 8005574:	d044      	beq.n	8005600 <_free_r+0x90>
 8005576:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800557a:	9001      	str	r0, [sp, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f1a1 0404 	sub.w	r4, r1, #4
 8005582:	bfb8      	it	lt
 8005584:	18e4      	addlt	r4, r4, r3
 8005586:	f7ff ffe7 	bl	8005558 <__malloc_lock>
 800558a:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <_free_r+0x94>)
 800558c:	9801      	ldr	r0, [sp, #4]
 800558e:	6813      	ldr	r3, [r2, #0]
 8005590:	b933      	cbnz	r3, 80055a0 <_free_r+0x30>
 8005592:	6063      	str	r3, [r4, #4]
 8005594:	6014      	str	r4, [r2, #0]
 8005596:	b003      	add	sp, #12
 8005598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800559c:	f7ff bfe2 	b.w	8005564 <__malloc_unlock>
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	d908      	bls.n	80055b6 <_free_r+0x46>
 80055a4:	6825      	ldr	r5, [r4, #0]
 80055a6:	1961      	adds	r1, r4, r5
 80055a8:	428b      	cmp	r3, r1
 80055aa:	bf01      	itttt	eq
 80055ac:	6819      	ldreq	r1, [r3, #0]
 80055ae:	685b      	ldreq	r3, [r3, #4]
 80055b0:	1949      	addeq	r1, r1, r5
 80055b2:	6021      	streq	r1, [r4, #0]
 80055b4:	e7ed      	b.n	8005592 <_free_r+0x22>
 80055b6:	461a      	mov	r2, r3
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	b10b      	cbz	r3, 80055c0 <_free_r+0x50>
 80055bc:	42a3      	cmp	r3, r4
 80055be:	d9fa      	bls.n	80055b6 <_free_r+0x46>
 80055c0:	6811      	ldr	r1, [r2, #0]
 80055c2:	1855      	adds	r5, r2, r1
 80055c4:	42a5      	cmp	r5, r4
 80055c6:	d10b      	bne.n	80055e0 <_free_r+0x70>
 80055c8:	6824      	ldr	r4, [r4, #0]
 80055ca:	4421      	add	r1, r4
 80055cc:	1854      	adds	r4, r2, r1
 80055ce:	42a3      	cmp	r3, r4
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	d1e0      	bne.n	8005596 <_free_r+0x26>
 80055d4:	681c      	ldr	r4, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	6053      	str	r3, [r2, #4]
 80055da:	4421      	add	r1, r4
 80055dc:	6011      	str	r1, [r2, #0]
 80055de:	e7da      	b.n	8005596 <_free_r+0x26>
 80055e0:	d902      	bls.n	80055e8 <_free_r+0x78>
 80055e2:	230c      	movs	r3, #12
 80055e4:	6003      	str	r3, [r0, #0]
 80055e6:	e7d6      	b.n	8005596 <_free_r+0x26>
 80055e8:	6825      	ldr	r5, [r4, #0]
 80055ea:	1961      	adds	r1, r4, r5
 80055ec:	428b      	cmp	r3, r1
 80055ee:	bf04      	itt	eq
 80055f0:	6819      	ldreq	r1, [r3, #0]
 80055f2:	685b      	ldreq	r3, [r3, #4]
 80055f4:	6063      	str	r3, [r4, #4]
 80055f6:	bf04      	itt	eq
 80055f8:	1949      	addeq	r1, r1, r5
 80055fa:	6021      	streq	r1, [r4, #0]
 80055fc:	6054      	str	r4, [r2, #4]
 80055fe:	e7ca      	b.n	8005596 <_free_r+0x26>
 8005600:	b003      	add	sp, #12
 8005602:	bd30      	pop	{r4, r5, pc}
 8005604:	200002bc 	.word	0x200002bc

08005608 <_realloc_r>:
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	4680      	mov	r8, r0
 800560e:	4614      	mov	r4, r2
 8005610:	460e      	mov	r6, r1
 8005612:	b921      	cbnz	r1, 800561e <_realloc_r+0x16>
 8005614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005618:	4611      	mov	r1, r2
 800561a:	f7ff b855 	b.w	80046c8 <_malloc_r>
 800561e:	b92a      	cbnz	r2, 800562c <_realloc_r+0x24>
 8005620:	f7ff ffa6 	bl	8005570 <_free_r>
 8005624:	4625      	mov	r5, r4
 8005626:	4628      	mov	r0, r5
 8005628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562c:	f000 f850 	bl	80056d0 <_malloc_usable_size_r>
 8005630:	4284      	cmp	r4, r0
 8005632:	4607      	mov	r7, r0
 8005634:	d802      	bhi.n	800563c <_realloc_r+0x34>
 8005636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800563a:	d812      	bhi.n	8005662 <_realloc_r+0x5a>
 800563c:	4621      	mov	r1, r4
 800563e:	4640      	mov	r0, r8
 8005640:	f7ff f842 	bl	80046c8 <_malloc_r>
 8005644:	4605      	mov	r5, r0
 8005646:	2800      	cmp	r0, #0
 8005648:	d0ed      	beq.n	8005626 <_realloc_r+0x1e>
 800564a:	42bc      	cmp	r4, r7
 800564c:	4622      	mov	r2, r4
 800564e:	4631      	mov	r1, r6
 8005650:	bf28      	it	cs
 8005652:	463a      	movcs	r2, r7
 8005654:	f7fe fed2 	bl	80043fc <memcpy>
 8005658:	4631      	mov	r1, r6
 800565a:	4640      	mov	r0, r8
 800565c:	f7ff ff88 	bl	8005570 <_free_r>
 8005660:	e7e1      	b.n	8005626 <_realloc_r+0x1e>
 8005662:	4635      	mov	r5, r6
 8005664:	e7df      	b.n	8005626 <_realloc_r+0x1e>
	...

08005668 <_read_r>:
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4d07      	ldr	r5, [pc, #28]	; (8005688 <_read_r+0x20>)
 800566c:	4604      	mov	r4, r0
 800566e:	4608      	mov	r0, r1
 8005670:	4611      	mov	r1, r2
 8005672:	2200      	movs	r2, #0
 8005674:	602a      	str	r2, [r5, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f7fb f8c2 	bl	8000800 <_read>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_read_r+0x1e>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_read_r+0x1e>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	200002c4 	.word	0x200002c4

0800568c <_fstat_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	; (80056ac <_fstat_r+0x20>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	f7fb f8f6 	bl	800088a <_fstat>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d102      	bne.n	80056a8 <_fstat_r+0x1c>
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	b103      	cbz	r3, 80056a8 <_fstat_r+0x1c>
 80056a6:	6023      	str	r3, [r4, #0]
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
 80056aa:	bf00      	nop
 80056ac:	200002c4 	.word	0x200002c4

080056b0 <_isatty_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d06      	ldr	r5, [pc, #24]	; (80056cc <_isatty_r+0x1c>)
 80056b4:	2300      	movs	r3, #0
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fb f8f5 	bl	80008aa <_isatty>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_isatty_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_isatty_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	200002c4 	.word	0x200002c4

080056d0 <_malloc_usable_size_r>:
 80056d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d4:	1f18      	subs	r0, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bfbc      	itt	lt
 80056da:	580b      	ldrlt	r3, [r1, r0]
 80056dc:	18c0      	addlt	r0, r0, r3
 80056de:	4770      	bx	lr

080056e0 <_init>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr

080056ec <_fini>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr
