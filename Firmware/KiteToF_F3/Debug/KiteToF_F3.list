
KiteToF_F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009148  08009148  000204bc  2**0
                  CONTENTS
  4 .ARM          00000000  08009148  08009148  000204bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009148  08009148  000204bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800914c  0800914c  0001914c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004bc  20000000  08009150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000204bc  2**0
                  CONTENTS
 10 .bss          000000c8  200004bc  200004bc  000204bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  20000584  000204bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000204bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ce4  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002312  00000000  00000000  000321d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c30  00000000  00000000  00035230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eeb7  00000000  00000000  00035e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102f2  00000000  00000000  00054d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1b22  00000000  00000000  00065009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116b2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ef4  00000000  00000000  00116b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004bc 	.word	0x200004bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f78 	.word	0x08008f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004c0 	.word	0x200004c0
 80001cc:	08008f78 	.word	0x08008f78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b092      	sub	sp, #72	; 0x48
 8000274:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f005 f8ed 	bl	8005454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f885 	bl	8000388 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f919 	bl	80004b4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000282:	f000 f8d7 	bl	8000434 <MX_I2C2_Init>
  //ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

  // EK test1
  HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c2, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 8000286:	2303      	movs	r3, #3
 8000288:	9302      	str	r3, [sp, #8]
 800028a:	2301      	movs	r3, #1
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2301      	movs	r3, #1
 8000296:	22c0      	movs	r2, #192	; 0xc0
 8000298:	2152      	movs	r1, #82	; 0x52
 800029a:	4833      	ldr	r0, [pc, #204]	; (8000368 <main+0xf8>)
 800029c:	f005 fe56 	bl	8005f4c <HAL_I2C_Mem_Read>
 80002a0:	4603      	mov	r3, r0
 80002a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	// pData should be 0xEE
	if(status == HAL_OK) {
 80002a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d102      	bne.n	80002b4 <main+0x44>
		printf("good");
 80002ae:	482f      	ldr	r0, [pc, #188]	; (800036c <main+0xfc>)
 80002b0:	f007 fe56 	bl	8007f60 <iprintf>
	}
	//--

  // EK test2
  VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 80002b4:	4b2e      	ldr	r3, [pc, #184]	; (8000370 <main+0x100>)
 80002b6:	633b      	str	r3, [r7, #48]	; 0x30
	pDev->I2cDevAddr = 0x52;
 80002b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002ba:	2252      	movs	r2, #82	; 0x52
 80002bc:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 80002c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002c2:	2200      	movs	r2, #0
 80002c4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

  int status2 = VL53L0X_DataInit(pDev);
 80002c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002ca:	f000 fd31 	bl	8000d30 <VL53L0X_DataInit>
 80002ce:	4603      	mov	r3, r0
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if( status2 == 0 ){
 80002d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d104      	bne.n	80002e2 <main+0x72>
			pDev->Present = 1;
 80002d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002da:	2201      	movs	r2, #1
 80002dc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 80002e0:	e002      	b.n	80002e8 <main+0x78>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 80002e2:	4824      	ldr	r0, [pc, #144]	; (8000374 <main+0x104>)
 80002e4:	f007 fec2 	bl	800806c <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 80002e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002ea:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 80002ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002f0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80002f4:	461a      	mov	r2, r3
 80002f6:	4820      	ldr	r0, [pc, #128]	; (8000378 <main+0x108>)
 80002f8:	f007 fe32 	bl	8007f60 <iprintf>
	pDev->Present = 1;
 80002fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002fe:	2201      	movs	r2, #1
 8000300:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8000304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000306:	f000 fe77 	bl	8000ff8 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 800030a:	f107 0229 	add.w	r2, r7, #41	; 0x29
 800030e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000312:	4619      	mov	r1, r3
 8000314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000316:	f001 fd1f 	bl	8001d58 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800031a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800031e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000322:	4619      	mov	r1, r3
 8000324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000326:	f002 f9a5 	bl	8002674 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 100);
 800032a:	2164      	movs	r1, #100	; 0x64
 800032c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800032e:	f001 fa5d 	bl	80017ec <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8000332:	2103      	movs	r1, #3
 8000334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000336:	f001 f871 	bl	800141c <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 800033a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800033c:	f001 fd88 	bl	8001e50 <VL53L0X_StartMeasurement>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4619      	mov	r1, r3
 8000344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000346:	f001 fe85 	bl	8002054 <VL53L0X_GetRangingMeasurementData>
		range = (int)RangingMeasurementData.RangeMilliMeter/10; // cm
 800034a:	89bb      	ldrh	r3, [r7, #12]
 800034c:	4a0b      	ldr	r2, [pc, #44]	; (800037c <main+0x10c>)
 800034e:	fba2 2303 	umull	r2, r3, r2, r3
 8000352:	08db      	lsrs	r3, r3, #3
 8000354:	b29b      	uxth	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <main+0x110>)
 800035a:	601a      	str	r2, [r3, #0]
		range_mm = (int)RangingMeasurementData.RangeMilliMeter; // mm
 800035c:	89bb      	ldrh	r3, [r7, #12]
 800035e:	461a      	mov	r2, r3
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <main+0x114>)
 8000362:	601a      	str	r2, [r3, #0]
  	VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 8000364:	e7ec      	b.n	8000340 <main+0xd0>
 8000366:	bf00      	nop
 8000368:	200004d8 	.word	0x200004d8
 800036c:	08009060 	.word	0x08009060
 8000370:	20000000 	.word	0x20000000
 8000374:	08009068 	.word	0x08009068
 8000378:	08009008 	.word	0x08009008
 800037c:	cccccccd 	.word	0xcccccccd
 8000380:	20000524 	.word	0x20000524
 8000384:	20000528 	.word	0x20000528

08000388 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b09e      	sub	sp, #120	; 0x78
 800038c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000392:	2228      	movs	r2, #40	; 0x28
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f007 fdda 	bl	8007f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800039c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ac:	463b      	mov	r3, r7
 80003ae:	223c      	movs	r2, #60	; 0x3c
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f007 fdcc 	bl	8007f50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b8:	2302      	movs	r3, #2
 80003ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c0:	2310      	movs	r3, #16
 80003c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c8:	2300      	movs	r3, #0
 80003ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003cc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80003d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003d6:	4618      	mov	r0, r3
 80003d8:	f006 f9ae 	bl	8006738 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003e2:	f000 f91b 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2302      	movs	r3, #2
 80003ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000400:	2101      	movs	r1, #1
 8000402:	4618      	mov	r0, r3
 8000404:	f007 f9d6 	bl	80077b4 <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800040e:	f000 f905 	bl	800061c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000412:	2340      	movs	r3, #64	; 0x40
 8000414:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000416:	2300      	movs	r3, #0
 8000418:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041a:	463b      	mov	r3, r7
 800041c:	4618      	mov	r0, r3
 800041e:	f007 fbaf 	bl	8007b80 <HAL_RCCEx_PeriphCLKConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000428:	f000 f8f8 	bl	800061c <Error_Handler>
  }
}
 800042c:	bf00      	nop
 800042e:	3778      	adds	r7, #120	; 0x78
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_I2C2_Init+0x74>)
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <MX_I2C2_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <MX_I2C2_Init+0x7c>)
 8000442:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_I2C2_Init+0x74>)
 800044c:	2201      	movs	r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_I2C2_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_I2C2_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000470:	f005 faf2 	bl	8005a58 <HAL_I2C_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800047a:	f000 f8cf 	bl	800061c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800047e:	2100      	movs	r1, #0
 8000480:	4809      	ldr	r0, [pc, #36]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000482:	f006 f8c1 	bl	8006608 <HAL_I2CEx_ConfigAnalogFilter>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800048c:	f000 f8c6 	bl	800061c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000490:	2100      	movs	r1, #0
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_I2C2_Init+0x74>)
 8000494:	f006 f903 	bl	800669e <HAL_I2CEx_ConfigDigitalFilter>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800049e:	f000 f8bd 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200004d8 	.word	0x200004d8
 80004ac:	40005800 	.word	0x40005800
 80004b0:	2000090e 	.word	0x2000090e

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ca:	4b51      	ldr	r3, [pc, #324]	; (8000610 <MX_GPIO_Init+0x15c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a50      	ldr	r2, [pc, #320]	; (8000610 <MX_GPIO_Init+0x15c>)
 80004d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b4e      	ldr	r3, [pc, #312]	; (8000610 <MX_GPIO_Init+0x15c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b4b      	ldr	r3, [pc, #300]	; (8000610 <MX_GPIO_Init+0x15c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a4a      	ldr	r2, [pc, #296]	; (8000610 <MX_GPIO_Init+0x15c>)
 80004e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b48      	ldr	r3, [pc, #288]	; (8000610 <MX_GPIO_Init+0x15c>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	4b45      	ldr	r3, [pc, #276]	; (8000610 <MX_GPIO_Init+0x15c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a44      	ldr	r2, [pc, #272]	; (8000610 <MX_GPIO_Init+0x15c>)
 8000500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b42      	ldr	r3, [pc, #264]	; (8000610 <MX_GPIO_Init+0x15c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <MX_GPIO_Init+0x15c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a3e      	ldr	r2, [pc, #248]	; (8000610 <MX_GPIO_Init+0x15c>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <MX_GPIO_Init+0x15c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b39      	ldr	r3, [pc, #228]	; (8000610 <MX_GPIO_Init+0x15c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a38      	ldr	r2, [pc, #224]	; (8000610 <MX_GPIO_Init+0x15c>)
 8000530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b36      	ldr	r3, [pc, #216]	; (8000610 <MX_GPIO_Init+0x15c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000542:	2200      	movs	r2, #0
 8000544:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000548:	4832      	ldr	r0, [pc, #200]	; (8000614 <MX_GPIO_Init+0x160>)
 800054a:	f005 fa6d 	bl	8005a28 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800054e:	2337      	movs	r3, #55	; 0x37
 8000550:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000552:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	4619      	mov	r1, r3
 8000562:	482c      	ldr	r0, [pc, #176]	; (8000614 <MX_GPIO_Init+0x160>)
 8000564:	f005 f8e6 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000568:	f64f 7308 	movw	r3, #65288	; 0xff08
 800056c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	2301      	movs	r3, #1
 8000570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000576:	2300      	movs	r3, #0
 8000578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	4824      	ldr	r0, [pc, #144]	; (8000614 <MX_GPIO_Init+0x160>)
 8000582:	f005 f8d7 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000586:	2301      	movs	r3, #1
 8000588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f005 f8ca 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80005a0:	23e0      	movs	r3, #224	; 0xe0
 80005a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005b0:	2305      	movs	r3, #5
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f005 f8b9 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80005c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80005d4:	230e      	movs	r3, #14
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f005 f8a7 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80005e6:	23c0      	movs	r3, #192	; 0xc0
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ea:	2312      	movs	r3, #18
 80005ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005f6:	2304      	movs	r3, #4
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_GPIO_Init+0x164>)
 8000602:	f005 f897 	bl	8005734 <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	48001000 	.word	0x48001000
 8000618:	48000400 	.word	0x48000400

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	4a0e      	ldr	r2, [pc, #56]	; (800066c <HAL_MspInit+0x44>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6193      	str	r3, [r2, #24]
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <HAL_MspInit+0x44>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <HAL_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a08      	ldr	r2, [pc, #32]	; (800066c <HAL_MspInit+0x44>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_MspInit+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800065e:	2007      	movs	r0, #7
 8000660:	f005 f834 	bl	80056cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000

08000670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <HAL_I2C_MspInit+0x80>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d129      	bne.n	80006e6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b0:	2312      	movs	r3, #18
 80006b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006bc:	2304      	movs	r3, #4
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f005 f833 	bl	8005734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 80006d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_I2C_MspInit+0x84>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40005800 	.word	0x40005800
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f004 fecc 	bl	80054e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e00a      	b.n	8000774 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800075e:	f3af 8000 	nop.w
 8000762:	4601      	mov	r1, r0
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	60ba      	str	r2, [r7, #8]
 800076a:	b2ca      	uxtb	r2, r1
 800076c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3301      	adds	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	429a      	cmp	r2, r3
 800077a:	dbf0      	blt.n	800075e <_read+0x12>
	}

return len;
 800077c:	687b      	ldr	r3, [r7, #4]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b086      	sub	sp, #24
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e009      	b.n	80007ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	60ba      	str	r2, [r7, #8]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dbf1      	blt.n	8000798 <_write+0x12>
	}
	return len;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_close>:

int _close(int file)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
	return -1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e6:	605a      	str	r2, [r3, #4]
	return 0;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <_isatty>:

int _isatty(int file)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
	return 1;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000830:	4a14      	ldr	r2, [pc, #80]	; (8000884 <_sbrk+0x5c>)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <_sbrk+0x60>)
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <_sbrk+0x64>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <_sbrk+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	429a      	cmp	r2, r3
 8000856:	d207      	bcs.n	8000868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000858:	f007 fb42 	bl	8007ee0 <__errno>
 800085c:	4603      	mov	r3, r0
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000866:	e009      	b.n	800087c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <_sbrk+0x64>)
 8000878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087a:	68fb      	ldr	r3, [r7, #12]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000a000 	.word	0x2000a000
 8000888:	00000400 	.word	0x00000400
 800088c:	2000052c 	.word	0x2000052c
 8000890:	20000588 	.word	0x20000588

08000894 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <SystemInit+0x20>)
 800089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089e:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <SystemInit+0x20>)
 80008a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af02      	add	r7, sp, #8
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	330a      	adds	r3, #10
 80008c8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80008d6:	b299      	uxth	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	4613      	mov	r3, r2
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f005 f948 	bl	8005b78 <HAL_I2C_Master_Transmit>
 80008e8:	4603      	mov	r3, r0
 80008ea:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80008ec:	693b      	ldr	r3, [r7, #16]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b088      	sub	sp, #32
 80008fa:	af02      	add	r7, sp, #8
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	330a      	adds	r3, #10
 8000906:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	b299      	uxth	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	b29a      	uxth	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4613      	mov	r3, r2
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f005 fa1a 	bl	8005d60 <HAL_I2C_Master_Receive>
 800092c:	4603      	mov	r3, r0
 800092e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8000930:	693b      	ldr	r3, [r7, #16]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	460b      	mov	r3, r1
 800094a:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b3f      	cmp	r3, #63	; 0x3f
 8000954:	d902      	bls.n	800095c <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8000956:	f06f 0303 	mvn.w	r3, #3
 800095a:	e016      	b.n	800098a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <VL53L0X_WriteMulti+0x58>)
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <VL53L0X_WriteMulti+0x5c>)
 8000968:	f007 fae4 	bl	8007f34 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	461a      	mov	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <VL53L0X_WriteMulti+0x58>)
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff ff9f 	bl	80008b8 <_I2CWrite>
 800097a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000982:	23ec      	movs	r3, #236	; 0xec
 8000984:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000530 	.word	0x20000530
 8000998:	20000531 	.word	0x20000531

0800099c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	460b      	mov	r3, r1
 80009aa:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80009b0:	f107 030b 	add.w	r3, r7, #11
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff ff7d 	bl	80008b8 <_I2CWrite>
 80009be:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80009c6:	23ec      	movs	r3, #236	; 0xec
 80009c8:	75fb      	strb	r3, [r7, #23]
        goto done;
 80009ca:	e00c      	b.n	80009e6 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80009cc:	683a      	ldr	r2, [r7, #0]
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f7ff ff90 	bl	80008f6 <_I2CRead>
 80009d6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80009de:	23ec      	movs	r3, #236	; 0xec
 80009e0:	75fb      	strb	r3, [r7, #23]
 80009e2:	e000      	b.n	80009e6 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80009e4:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80009e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
 8000a00:	4613      	mov	r3, r2
 8000a02:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <VL53L0X_WrByte+0x44>)
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <VL53L0X_WrByte+0x44>)
 8000a10:	78bb      	ldrb	r3, [r7, #2]
 8000a12:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8000a14:	2202      	movs	r2, #2
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <VL53L0X_WrByte+0x44>)
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff4d 	bl	80008b8 <_I2CWrite>
 8000a1e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000a26:	23ec      	movs	r3, #236	; 0xec
 8000a28:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000530 	.word	0x20000530

08000a3c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <VL53L0X_WrWord+0x50>)
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8000a56:	883b      	ldrh	r3, [r7, #0]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <VL53L0X_WrWord+0x50>)
 8000a60:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8000a62:	883b      	ldrh	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <VL53L0X_WrWord+0x50>)
 8000a68:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <VL53L0X_WrWord+0x50>)
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff ff22 	bl	80008b8 <_I2CWrite>
 8000a74:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000a7c:	23ec      	movs	r3, #236	; 0xec
 8000a7e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000530 	.word	0x20000530

08000a90 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <VL53L0X_WrDWord+0x60>)
 8000aa4:	7afb      	ldrb	r3, [r7, #11]
 8000aa6:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	0e1b      	lsrs	r3, r3, #24
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <VL53L0X_WrDWord+0x60>)
 8000ab0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <VL53L0X_WrDWord+0x60>)
 8000aba:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <VL53L0X_WrDWord+0x60>)
 8000ac4:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <VL53L0X_WrDWord+0x60>)
 8000acc:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8000ace:	2205      	movs	r2, #5
 8000ad0:	4907      	ldr	r1, [pc, #28]	; (8000af0 <VL53L0X_WrDWord+0x60>)
 8000ad2:	68f8      	ldr	r0, [r7, #12]
 8000ad4:	f7ff fef0 	bl	80008b8 <_I2CWrite>
 8000ad8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000ae0:	23ec      	movs	r3, #236	; 0xec
 8000ae2:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8000ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000530 	.word	0x20000530

08000af4 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	4608      	mov	r0, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	4603      	mov	r3, r0
 8000b04:	70fb      	strb	r3, [r7, #3]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70bb      	strb	r3, [r7, #2]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8000b12:	f107 020e 	add.w	r2, r7, #14
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 f81e 	bl	8000b5c <VL53L0X_RdByte>
 8000b20:	4603      	mov	r3, r0
 8000b22:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8000b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d110      	bne.n	8000b4e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8000b2c:	7bba      	ldrb	r2, [r7, #14]
 8000b2e:	78bb      	ldrb	r3, [r7, #2]
 8000b30:	4013      	ands	r3, r2
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8000b3c:	7bba      	ldrb	r2, [r7, #14]
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	4619      	mov	r1, r3
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff56 	bl	80009f4 <VL53L0X_WrByte>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e000      	b.n	8000b50 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8000b4e:	bf00      	nop
done:
    return Status;
 8000b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	460b      	mov	r3, r1
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000b6e:	f107 030b 	add.w	r3, r7, #11
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff fe9e 	bl	80008b8 <_I2CWrite>
 8000b7c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000b84:	23ec      	movs	r3, #236	; 0xec
 8000b86:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000b88:	e00c      	b.n	8000ba4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff feb1 	bl	80008f6 <_I2CRead>
 8000b94:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000b9c:	23ec      	movs	r3, #236	; 0xec
 8000b9e:	75fb      	strb	r3, [r7, #23]
 8000ba0:	e000      	b.n	8000ba4 <VL53L0X_RdByte+0x48>
    }
done:
 8000ba2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8000ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000bc2:	f107 030b 	add.w	r3, r7, #11
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff fe74 	bl	80008b8 <_I2CWrite>
 8000bd0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000bd8:	23ec      	movs	r3, #236	; 0xec
 8000bda:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000bdc:	e017      	b.n	8000c0e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8000bde:	2202      	movs	r2, #2
 8000be0:	490e      	ldr	r1, [pc, #56]	; (8000c1c <VL53L0X_RdWord+0x6c>)
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff fe87 	bl	80008f6 <_I2CRead>
 8000be8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000bf0:	23ec      	movs	r3, #236	; 0xec
 8000bf2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000bf4:	e00b      	b.n	8000c0e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <VL53L0X_RdWord+0x6c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <VL53L0X_RdWord+0x6c>)
 8000c02:	785b      	ldrb	r3, [r3, #1]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8000c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000530 	.word	0x20000530

08000c20 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8000c32:	f107 030b 	add.w	r3, r7, #11
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	68f8      	ldr	r0, [r7, #12]
 8000c3c:	f7ff fe3c 	bl	80008b8 <_I2CWrite>
 8000c40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000c48:	23ec      	movs	r3, #236	; 0xec
 8000c4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000c4c:	e01b      	b.n	8000c86 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4910      	ldr	r1, [pc, #64]	; (8000c94 <VL53L0X_RdDWord+0x74>)
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f7ff fe4f 	bl	80008f6 <_I2CRead>
 8000c58:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8000c60:	23ec      	movs	r3, #236	; 0xec
 8000c62:	75fb      	strb	r3, [r7, #23]
        goto done;
 8000c64:	e00f      	b.n	8000c86 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <VL53L0X_RdDWord+0x74>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	061a      	lsls	r2, r3, #24
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <VL53L0X_RdDWord+0x74>)
 8000c6e:	785b      	ldrb	r3, [r3, #1]
 8000c70:	041b      	lsls	r3, r3, #16
 8000c72:	441a      	add	r2, r3
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <VL53L0X_RdDWord+0x74>)
 8000c76:	789b      	ldrb	r3, [r3, #2]
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <VL53L0X_RdDWord+0x74>)
 8000c7e:	78d2      	ldrb	r2, [r2, #3]
 8000c80:	441a      	add	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8000c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000530 	.word	0x20000530

08000c98 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f004 fc3b 	bl	8005520 <HAL_Delay>
    return status;
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ce2:	f7ff fdd7 	bl	8000894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f007 f901 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fac1 	bl	8000270 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	200004bc 	.word	0x200004bc
  ldr r2, =_sidata
 8000cfc:	08009150 	.word	0x08009150
  ldr r2, =_sbss
 8000d00:	200004bc 	.word	0x200004bc
  ldr r4, =_ebss
 8000d04:	20000584 	.word	0x20000584

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>

08000d0a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000d18:	6839      	ldr	r1, [r7, #0]
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f001 fcbf 	bl	800269e <VL53L0X_get_offset_calibration_data_micro_meter>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8000d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b096      	sub	sp, #88	; 0x58
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8000d3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d107      	bne.n	8000d56 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2188      	movs	r1, #136	; 0x88
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fe52 	bl	80009f4 <VL53L0X_WrByte>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d64:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000d6e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a9e      	ldr	r2, [pc, #632]	; (8000ff0 <VL53L0X_DataInit+0x2c0>)
 8000d76:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a9d      	ldr	r2, [pc, #628]	; (8000ff4 <VL53L0X_DataInit+0x2c4>)
 8000d7e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 fab4 	bl	80012fc <VL53L0X_GetDeviceParameters>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8000d9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d112      	bne.n	8000dc8 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000da2:	2300      	movs	r3, #0
 8000da4:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8000da6:	2300      	movs	r3, #0
 8000da8:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f103 0410 	add.w	r4, r3, #16
 8000db0:	f107 0510 	add.w	r5, r7, #16
 8000db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2264      	movs	r2, #100	; 0x64
 8000dcc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000dd6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000de0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000dea:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fdfa 	bl	80009f4 <VL53L0X_WrByte>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	21ff      	movs	r1, #255	; 0xff
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fdee 	bl	80009f4 <VL53L0X_WrByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e20:	4313      	orrs	r3, r2
 8000e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fde2 	bl	80009f4 <VL53L0X_WrByte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461a      	mov	r2, r3
 8000e34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8000e3e:	f107 030f 	add.w	r3, r7, #15
 8000e42:	461a      	mov	r2, r3
 8000e44:	2191      	movs	r1, #145	; 0x91
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff fe88 	bl	8000b5c <VL53L0X_RdByte>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e54:	4313      	orrs	r3, r2
 8000e56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2100      	movs	r1, #0
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fdc4 	bl	80009f4 <VL53L0X_WrByte>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e74:	4313      	orrs	r3, r2
 8000e76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	21ff      	movs	r1, #255	; 0xff
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fdb8 	bl	80009f4 <VL53L0X_WrByte>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff fdac 	bl	80009f4 <VL53L0X_WrByte>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	653b      	str	r3, [r7, #80]	; 0x50
 8000eae:	e014      	b.n	8000eda <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8000eb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d114      	bne.n	8000ee2 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8000eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 fd43 	bl	800194c <VL53L0X_SetLimitCheckEnable>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8000eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	dde7      	ble.n	8000eb0 <VL53L0X_DataInit+0x180>
 8000ee0:	e000      	b.n	8000ee4 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8000ee2:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8000ee4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d107      	bne.n	8000efc <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000eec:	2200      	movs	r2, #0
 8000eee:	2102      	movs	r1, #2
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fd2b 	bl	800194c <VL53L0X_SetLimitCheckEnable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000efc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d107      	bne.n	8000f14 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000f04:	2200      	movs	r2, #0
 8000f06:	2103      	movs	r1, #3
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 fd1f 	bl	800194c <VL53L0X_SetLimitCheckEnable>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000f14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d107      	bne.n	8000f2c <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 fd13 	bl	800194c <VL53L0X_SetLimitCheckEnable>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8000f2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d107      	bne.n	8000f44 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000f34:	2200      	movs	r2, #0
 8000f36:	2105      	movs	r1, #5
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fd07 	bl	800194c <VL53L0X_SetLimitCheckEnable>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8000f44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d108      	bne.n	8000f5e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f4c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8000f50:	2100      	movs	r1, #0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 fdaa 	bl	8001aac <VL53L0X_SetLimitCheckValue>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8000f5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d108      	bne.n	8000f78 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fd9d 	bl	8001aac <VL53L0X_SetLimitCheckValue>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d108      	bne.n	8000f92 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f80:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8000f84:	2102      	movs	r1, #2
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fd90 	bl	8001aac <VL53L0X_SetLimitCheckValue>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000f92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d107      	bne.n	8000faa <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fd84 	bl	8001aac <VL53L0X_SetLimitCheckValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000faa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10f      	bne.n	8000fd2 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	22ff      	movs	r2, #255	; 0xff
 8000fb6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fd18 	bl	80009f4 <VL53L0X_WrByte>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8000fd2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d103      	bne.n	8000fe2 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8000fe2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3758      	adds	r7, #88	; 0x58
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bdb0      	pop	{r4, r5, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	00016b85 	.word	0x00016b85
 8000ff4:	000970a4 	.word	0x000970a4

08000ff8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b09e      	sub	sp, #120	; 0x78
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001000:	2300      	movs	r3, #0
 8001002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f006 ff9e 	bl	8007f50 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001034:	2101      	movs	r1, #1
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f002 fa74 	bl	8003524 <VL53L0X_get_info_from_device>
 800103c:	4603      	mov	r3, r0
 800103e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8001048:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8001050:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8001054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001058:	2b01      	cmp	r3, #1
 800105a:	d80d      	bhi.n	8001078 <VL53L0X_StaticInit+0x80>
 800105c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8001064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001066:	2b20      	cmp	r3, #32
 8001068:	d806      	bhi.n	8001078 <VL53L0X_StaticInit+0x80>
 800106a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10e      	bne.n	8001090 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8001072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001074:	2b0c      	cmp	r3, #12
 8001076:	d90b      	bls.n	8001090 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001078:	f107 0218 	add.w	r2, r7, #24
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f001 fd06 	bl	8002a94 <VL53L0X_perform_ref_spad_management>
 8001088:	4603      	mov	r3, r0
 800108a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800108e:	e009      	b.n	80010a4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001094:	461a      	mov	r2, r3
 8001096:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f001 ff07 	bl	8002eac <VL53L0X_set_reference_spads>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80010a4:	4b94      	ldr	r3, [pc, #592]	; (80012f8 <VL53L0X_StaticInit+0x300>)
 80010a6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80010a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10f      	bne.n	80010d0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80010b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80010ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d104      	bne.n	80010cc <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80010c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80010ca:	e001      	b.n	80010d0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80010cc:	4b8a      	ldr	r3, [pc, #552]	; (80012f8 <VL53L0X_StaticInit+0x300>)
 80010ce:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80010d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80010d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f003 fb40 	bl	8004760 <VL53L0X_load_tuning_settings>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80010e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10a      	bne.n	8001104 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80010ee:	2300      	movs	r3, #0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2304      	movs	r3, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f001 f8ff 	bl	80022fc <VL53L0X_SetGpioConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001104:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001108:	2b00      	cmp	r3, #0
 800110a:	d121      	bne.n	8001150 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800110c:	2201      	movs	r2, #1
 800110e:	21ff      	movs	r1, #255	; 0xff
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fc6f 	bl	80009f4 <VL53L0X_WrByte>
 8001116:	4603      	mov	r3, r0
 8001118:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800111c:	f107 031a 	add.w	r3, r7, #26
 8001120:	461a      	mov	r2, r3
 8001122:	2184      	movs	r1, #132	; 0x84
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fd43 	bl	8000bb0 <VL53L0X_RdWord>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001132:	4313      	orrs	r3, r2
 8001134:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001138:	2200      	movs	r2, #0
 800113a:	21ff      	movs	r1, #255	; 0xff
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fc59 	bl	80009f4 <VL53L0X_WrByte>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800114a:	4313      	orrs	r3, r2
 800114c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001150:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001154:	2b00      	cmp	r3, #0
 8001156:	d105      	bne.n	8001164 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001158:	8b7b      	ldrh	r3, [r7, #26]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	461a      	mov	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8001164:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001168:	2b00      	cmp	r3, #0
 800116a:	d108      	bne.n	800117e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f8c2 	bl	80012fc <VL53L0X_GetDeviceParameters>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800117e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001182:	2b00      	cmp	r3, #0
 8001184:	d110      	bne.n	80011a8 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8001186:	f107 0319 	add.w	r3, r7, #25
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f984 	bl	800149a <VL53L0X_GetFractionEnable>
 8001192:	4603      	mov	r3, r0
 8001194:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8001198:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80011a0:	7e7a      	ldrb	r2, [r7, #25]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80011a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10e      	bne.n	80011ce <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f103 0410 	add.w	r4, r3, #16
 80011b6:	f107 051c 	add.w	r5, r7, #28
 80011ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80011ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d111      	bne.n	80011fa <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80011d6:	f107 0319 	add.w	r3, r7, #25
 80011da:	461a      	mov	r2, r3
 80011dc:	2101      	movs	r1, #1
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fcbc 	bl	8000b5c <VL53L0X_RdByte>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80011ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80011f2:	7e7a      	ldrb	r2, [r7, #25]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80011fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f9a4 	bl	8001554 <VL53L0X_SetSequenceStepEnable>
 800120c:	4603      	mov	r3, r0
 800120e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001212:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001216:	2b00      	cmp	r3, #0
 8001218:	d107      	bne.n	800122a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800121a:	2200      	movs	r2, #0
 800121c:	2102      	movs	r1, #2
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f998 	bl	8001554 <VL53L0X_SetSequenceStepEnable>
 8001224:	4603      	mov	r3, r0
 8001226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800122a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800123a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001242:	f107 0313 	add.w	r3, r7, #19
 8001246:	461a      	mov	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f96a 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001256:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800125e:	7cfa      	ldrb	r2, [r7, #19]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001266:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800126e:	f107 0313 	add.w	r3, r7, #19
 8001272:	461a      	mov	r2, r3
 8001274:	2101      	movs	r1, #1
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f954 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001282:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800128a:	7cfa      	ldrb	r2, [r7, #19]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001292:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	461a      	mov	r2, r3
 80012a0:	2103      	movs	r1, #3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f002 fec0 	bl	8004028 <get_sequence_step_timeout>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80012ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d103      	bne.n	80012be <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80012be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	461a      	mov	r2, r3
 80012cc:	2104      	movs	r1, #4
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f002 feaa 	bl	8004028 <get_sequence_step_timeout>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80012da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80012ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3770      	adds	r7, #112	; 0x70
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000194 	.word	0x20000194

080012fc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f8b0 	bl	8001474 <VL53L0X_GetDeviceMode>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3308      	adds	r3, #8
 8001324:	4619      	mov	r1, r3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fa94 	bl	8001854 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8001330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d107      	bne.n	8001356 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3310      	adds	r3, #16
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 faca 	bl	80018e6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d107      	bne.n	800136e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3314      	adds	r3, #20
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fcd0 	bl	8000d0a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d134      	bne.n	80013e0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	e02a      	b.n	80013d2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d12a      	bne.n	80013da <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	b299      	uxth	r1, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3308      	adds	r3, #8
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	3304      	adds	r3, #4
 8001394:	461a      	mov	r2, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fbea 	bl	8001b70 <VL53L0X_GetLimitCheckValue>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d117      	bne.n	80013de <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	b299      	uxth	r1, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3318      	adds	r3, #24
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fb51 	bl	8001a64 <VL53L0X_GetLimitCheckEnable>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	ddd1      	ble.n	800137c <VL53L0X_GetDeviceParameters+0x80>
 80013d8:	e002      	b.n	80013e0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80013da:	bf00      	nop
 80013dc:	e000      	b.n	80013e0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80013de:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	333c      	adds	r3, #60	; 0x3c
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fc4c 	bl	8001c8c <VL53L0X_GetWrapAroundCheckEnable>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3304      	adds	r3, #4
 8001404:	4619      	mov	r1, r3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f879 	bl	80014fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b15      	cmp	r3, #21
 8001430:	bf8c      	ite	hi
 8001432:	2201      	movhi	r2, #1
 8001434:	2200      	movls	r2, #0
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	2a00      	cmp	r2, #0
 800143a:	d10e      	bne.n	800145a <VL53L0X_SetDeviceMode+0x3e>
 800143c:	2201      	movs	r2, #1
 800143e:	409a      	lsls	r2, r3
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <VL53L0X_SetDeviceMode+0x54>)
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	78fa      	ldrb	r2, [r7, #3]
 8001456:	741a      	strb	r2, [r3, #16]
		break;
 8001458:	e001      	b.n	800145e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800145a:	23f8      	movs	r3, #248	; 0xf8
 800145c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	0030000b 	.word	0x0030000b

08001474 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7c1a      	ldrb	r2, [r3, #16]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	2109      	movs	r1, #9
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fb55 	bl	8000b5c <VL53L0X_RdByte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80014cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f002 ffa7 	bl	800443c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80014ee:	4603      	mov	r3, r0
 80014f0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f003 f874 	bl	80045fc <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8001518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	460b      	mov	r3, r1
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4619      	mov	r1, r3
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f002 ff46 	bl	80043ce <VL53L0X_get_vcsel_pulse_period>
 8001542:	4603      	mov	r3, r0
 8001544:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001546:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
 8001560:	4613      	mov	r3, r2
 8001562:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001570:	f107 030f 	add.w	r3, r7, #15
 8001574:	461a      	mov	r2, r3
 8001576:	2101      	movs	r1, #1
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff faef 	bl	8000b5c <VL53L0X_RdByte>
 800157e:	4603      	mov	r3, r0
 8001580:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d15a      	bne.n	8001644 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800158e:	78bb      	ldrb	r3, [r7, #2]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d12b      	bne.n	80015ec <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d825      	bhi.n	80015e6 <VL53L0X_SetSequenceStepEnable+0x92>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	080015b5 	.word	0x080015b5
 80015a4:	080015bf 	.word	0x080015bf
 80015a8:	080015c9 	.word	0x080015c9
 80015ac:	080015d3 	.word	0x080015d3
 80015b0:	080015dd 	.word	0x080015dd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80015b4:	7dbb      	ldrb	r3, [r7, #22]
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	75bb      	strb	r3, [r7, #22]
				break;
 80015bc:	e043      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80015be:	7dbb      	ldrb	r3, [r7, #22]
 80015c0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80015c4:	75bb      	strb	r3, [r7, #22]
				break;
 80015c6:	e03e      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	75bb      	strb	r3, [r7, #22]
				break;
 80015d0:	e039      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80015d2:	7dbb      	ldrb	r3, [r7, #22]
 80015d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d8:	75bb      	strb	r3, [r7, #22]
				break;
 80015da:	e034      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80015dc:	7dbb      	ldrb	r3, [r7, #22]
 80015de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e2:	75bb      	strb	r3, [r7, #22]
				break;
 80015e4:	e02f      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80015e6:	23fc      	movs	r3, #252	; 0xfc
 80015e8:	75fb      	strb	r3, [r7, #23]
 80015ea:	e02c      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d825      	bhi.n	800163e <VL53L0X_SetSequenceStepEnable+0xea>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	0800160d 	.word	0x0800160d
 80015fc:	08001617 	.word	0x08001617
 8001600:	08001621 	.word	0x08001621
 8001604:	0800162b 	.word	0x0800162b
 8001608:	08001635 	.word	0x08001635
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800160c:	7dbb      	ldrb	r3, [r7, #22]
 800160e:	f023 0310 	bic.w	r3, r3, #16
 8001612:	75bb      	strb	r3, [r7, #22]
				break;
 8001614:	e017      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800161c:	75bb      	strb	r3, [r7, #22]
				break;
 800161e:	e012      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8001620:	7dbb      	ldrb	r3, [r7, #22]
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	75bb      	strb	r3, [r7, #22]
				break;
 8001628:	e00d      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800162a:	7dbb      	ldrb	r3, [r7, #22]
 800162c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001630:	75bb      	strb	r3, [r7, #22]
				break;
 8001632:	e008      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800163a:	75bb      	strb	r3, [r7, #22]
				break;
 800163c:	e003      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800163e:	23fc      	movs	r3, #252	; 0xfc
 8001640:	75fb      	strb	r3, [r7, #23]
 8001642:	e000      	b.n	8001646 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8001644:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	7dba      	ldrb	r2, [r7, #22]
 800164a:	429a      	cmp	r2, r3
 800164c:	d01e      	beq.n	800168c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800164e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d107      	bne.n	8001666 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8001656:	7dbb      	ldrb	r3, [r7, #22]
 8001658:	461a      	mov	r2, r3
 800165a:	2101      	movs	r1, #1
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff f9c9 	bl	80009f4 <VL53L0X_WrByte>
 8001662:	4603      	mov	r3, r0
 8001664:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001666:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7dba      	ldrb	r2, [r7, #22]
 8001672:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001676:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001684:	6939      	ldr	r1, [r7, #16]
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ff26 	bl	80014d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800168c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	72fb      	strb	r3, [r7, #11]
 80016a6:	4613      	mov	r3, r2
 80016a8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d836      	bhi.n	8001728 <sequence_step_enabled+0x90>
 80016ba:	a201      	add	r2, pc, #4	; (adr r2, 80016c0 <sequence_step_enabled+0x28>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016e7 	.word	0x080016e7
 80016c8:	080016f9 	.word	0x080016f9
 80016cc:	0800170b 	.word	0x0800170b
 80016d0:	0800171d 	.word	0x0800171d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80016d4:	7abb      	ldrb	r3, [r7, #10]
 80016d6:	111b      	asrs	r3, r3, #4
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	701a      	strb	r2, [r3, #0]
		break;
 80016e4:	e022      	b.n	800172c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80016e6:	7abb      	ldrb	r3, [r7, #10]
 80016e8:	10db      	asrs	r3, r3, #3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	701a      	strb	r2, [r3, #0]
		break;
 80016f6:	e019      	b.n	800172c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80016f8:	7abb      	ldrb	r3, [r7, #10]
 80016fa:	109b      	asrs	r3, r3, #2
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	b2da      	uxtb	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	701a      	strb	r2, [r3, #0]
		break;
 8001708:	e010      	b.n	800172c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800170a:	7abb      	ldrb	r3, [r7, #10]
 800170c:	119b      	asrs	r3, r3, #6
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	701a      	strb	r2, [r3, #0]
		break;
 800171a:	e007      	b.n	800172c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800171c:	7abb      	ldrb	r3, [r7, #10]
 800171e:	09db      	lsrs	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	701a      	strb	r2, [r3, #0]
		break;
 8001726:	e001      	b.n	800172c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001728:	23fc      	movs	r3, #252	; 0xfc
 800172a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800172c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800174e:	f107 030e 	add.w	r3, r7, #14
 8001752:	461a      	mov	r2, r3
 8001754:	2101      	movs	r1, #1
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff fa00 	bl	8000b5c <VL53L0X_RdByte>
 800175c:	4603      	mov	r3, r0
 800175e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8001760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8001768:	7bba      	ldrb	r2, [r7, #14]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2100      	movs	r1, #0
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff92 	bl	8001698 <sequence_step_enabled>
 8001774:	4603      	mov	r3, r0
 8001776:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d108      	bne.n	8001792 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8001780:	7bba      	ldrb	r2, [r7, #14]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3302      	adds	r3, #2
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff85 	bl	8001698 <sequence_step_enabled>
 800178e:	4603      	mov	r3, r0
 8001790:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d108      	bne.n	80017ac <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800179a:	7bba      	ldrb	r2, [r7, #14]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	2102      	movs	r1, #2
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff78 	bl	8001698 <sequence_step_enabled>
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80017ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80017b4:	7bba      	ldrb	r2, [r7, #14]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3303      	adds	r3, #3
 80017ba:	2103      	movs	r1, #3
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff6b 	bl	8001698 <sequence_step_enabled>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80017c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80017ce:	7bba      	ldrb	r2, [r7, #14]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3304      	adds	r3, #4
 80017d4:	2104      	movs	r1, #4
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ff5e 	bl	8001698 <sequence_step_enabled>
 80017dc:	4603      	mov	r3, r0
 80017de:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80017e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80017fa:	f107 030e 	add.w	r3, r7, #14
 80017fe:	461a      	mov	r2, r3
 8001800:	21f8      	movs	r1, #248	; 0xf8
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff f9d4 	bl	8000bb0 <VL53L0X_RdWord>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800180c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d112      	bne.n	800183a <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8001814:	89fb      	ldrh	r3, [r7, #14]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	e001      	b.n	800182c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	2104      	movs	r1, #4
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff f92d 	bl	8000a90 <VL53L0X_WrDWord>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800183a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001848:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001862:	f107 030c 	add.w	r3, r7, #12
 8001866:	461a      	mov	r2, r3
 8001868:	21f8      	movs	r1, #248	; 0xf8
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff f9a0 	bl	8000bb0 <VL53L0X_RdWord>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d108      	bne.n	800188e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	461a      	mov	r2, r3
 8001882:	2104      	movs	r1, #4
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff f9cb 	bl	8000c20 <VL53L0X_RdDWord>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8001896:	89bb      	ldrh	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	89ba      	ldrh	r2, [r7, #12]
 80018a0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80018b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7f1b      	ldrb	r3, [r3, #28]
 80018ce:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	7bba      	ldrb	r2, [r7, #14]
 80018d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80018f4:	f107 030e 	add.w	r3, r7, #14
 80018f8:	461a      	mov	r2, r3
 80018fa:	2120      	movs	r1, #32
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff f957 	bl	8000bb0 <VL53L0X_RdWord>
 8001902:	4603      	mov	r3, r0
 8001904:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	771a      	strb	r2, [r3, #28]
 8001926:	e00b      	b.n	8001940 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
 8001958:	4613      	mov	r3, r2
 800195a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800195c:	2300      	movs	r3, #0
 800195e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d902      	bls.n	8001978 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001972:	23fc      	movs	r3, #252	; 0xfc
 8001974:	75fb      	strb	r3, [r7, #23]
 8001976:	e05b      	b.n	8001a30 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	73bb      	strb	r3, [r7, #14]
 800198a:	e00a      	b.n	80019a2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	330c      	adds	r3, #12
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d841      	bhi.n	8001a2c <VL53L0X_SetLimitCheckEnable+0xe0>
 80019a8:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <VL53L0X_SetLimitCheckEnable+0x64>)
 80019aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ae:	bf00      	nop
 80019b0:	080019c9 	.word	0x080019c9
 80019b4:	080019d3 	.word	0x080019d3
 80019b8:	080019e9 	.word	0x080019e9
 80019bc:	080019f3 	.word	0x080019f3
 80019c0:	080019fd 	.word	0x080019fd
 80019c4:	08001a15 	.word	0x08001a15

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80019d0:	e02e      	b.n	8001a30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	2144      	movs	r1, #68	; 0x44
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff f82d 	bl	8000a3c <VL53L0X_WrWord>
 80019e2:	4603      	mov	r3, r0
 80019e4:	75fb      	strb	r3, [r7, #23]

			break;
 80019e6:	e023      	b.n	8001a30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80019f0:	e01e      	b.n	8001a30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80019fa:	e019      	b.n	8001a30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	22fe      	movs	r2, #254	; 0xfe
 8001a06:	2160      	movs	r1, #96	; 0x60
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff f873 	bl	8000af4 <VL53L0X_UpdateByte>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8001a12:	e00d      	b.n	8001a30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	22ef      	movs	r2, #239	; 0xef
 8001a1e:	2160      	movs	r1, #96	; 0x60
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff f867 	bl	8000af4 <VL53L0X_UpdateByte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8001a2a:	e001      	b.n	8001a30 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001a2c:	23fc      	movs	r3, #252	; 0xfc
 8001a2e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001a30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10f      	bne.n	8001a58 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001a4a:	e005      	b.n	8001a58 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d905      	bls.n	8001a88 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001a7c:	23fc      	movs	r3, #252	; 0xfc
 8001a7e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e008      	b.n	8001a9a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a92:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7dba      	ldrb	r2, [r7, #22]
 8001a98:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001abe:	897b      	ldrh	r3, [r7, #10]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ac8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8001aca:	7dbb      	ldrb	r3, [r7, #22]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d107      	bne.n	8001ae0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001ad0:	897b      	ldrh	r3, [r7, #10]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	e040      	b.n	8001b62 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8001ae0:	897b      	ldrh	r3, [r7, #10]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d830      	bhi.n	8001b48 <VL53L0X_SetLimitCheckValue+0x9c>
 8001ae6:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <VL53L0X_SetLimitCheckValue+0x40>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001b05 	.word	0x08001b05
 8001af0:	08001b0d 	.word	0x08001b0d
 8001af4:	08001b23 	.word	0x08001b23
 8001af8:	08001b2b 	.word	0x08001b2b
 8001afc:	08001b33 	.word	0x08001b33
 8001b00:	08001b33 	.word	0x08001b33

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8001b0a:	e01f      	b.n	8001b4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	2144      	movs	r1, #68	; 0x44
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f7fe ff90 	bl	8000a3c <VL53L0X_WrWord>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001b20:	e014      	b.n	8001b4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8001b28:	e010      	b.n	8001b4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8001b30:	e00c      	b.n	8001b4c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	2164      	movs	r1, #100	; 0x64
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7fe ff7d 	bl	8000a3c <VL53L0X_WrWord>
 8001b42:	4603      	mov	r3, r0
 8001b44:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8001b46:	e001      	b.n	8001b4c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001b48:	23fc      	movs	r3, #252	; 0xfc
 8001b4a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8001b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d106      	bne.n	8001b62 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop

08001b70 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001b86:	897b      	ldrh	r3, [r7, #10]
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d847      	bhi.n	8001c1c <VL53L0X_GetLimitCheckValue+0xac>
 8001b8c:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <VL53L0X_GetLimitCheckValue+0x24>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001bb9 	.word	0x08001bb9
 8001b9c:	08001bdf 	.word	0x08001bdf
 8001ba0:	08001beb 	.word	0x08001beb
 8001ba4:	08001bf7 	.word	0x08001bf7
 8001ba8:	08001bf7 	.word	0x08001bf7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	77bb      	strb	r3, [r7, #30]
		break;
 8001bb6:	e033      	b.n	8001c20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001bb8:	f107 0316 	add.w	r3, r7, #22
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2144      	movs	r1, #68	; 0x44
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7fe fff5 	bl	8000bb0 <VL53L0X_RdWord>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001bca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001bd2:	8afb      	ldrh	r3, [r7, #22]
 8001bd4:	025b      	lsls	r3, r3, #9
 8001bd6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	77bb      	strb	r3, [r7, #30]
		break;
 8001bdc:	e020      	b.n	8001c20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77bb      	strb	r3, [r7, #30]
		break;
 8001be8:	e01a      	b.n	8001c20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	77bb      	strb	r3, [r7, #30]
		break;
 8001bf4:	e014      	b.n	8001c20 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8001bf6:	f107 0316 	add.w	r3, r7, #22
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2164      	movs	r1, #100	; 0x64
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7fe ffd6 	bl	8000bb0 <VL53L0X_RdWord>
 8001c04:	4603      	mov	r3, r0
 8001c06:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8001c08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001c10:	8afb      	ldrh	r3, [r7, #22]
 8001c12:	025b      	lsls	r3, r3, #9
 8001c14:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	77bb      	strb	r3, [r7, #30]
		break;
 8001c1a:	e001      	b.n	8001c20 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001c1c:	23fc      	movs	r3, #252	; 0xfc
 8001c1e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12a      	bne.n	8001c7e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8001c28:	7fbb      	ldrb	r3, [r7, #30]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d124      	bne.n	8001c78 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d110      	bne.n	8001c56 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001c34:	897b      	ldrh	r3, [r7, #10]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001c48:	897b      	ldrh	r3, [r7, #10]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001c54:	e013      	b.n	8001c7e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	330c      	adds	r3, #12
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001c76:	e002      	b.n	8001c7e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001c7e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop

08001c8c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8001c9a:	f107 030e 	add.w	r3, r7, #14
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe ff5a 	bl	8000b5c <VL53L0X_RdByte>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8001cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10e      	bne.n	8001cd2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8001cb4:	7bba      	ldrb	r2, [r7, #14]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8001cbc:	7bbb      	ldrb	r3, [r7, #14]
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da03      	bge.n	8001ccc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e002      	b.n	8001cd2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001cfc:	f107 030e 	add.w	r3, r7, #14
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fbb6 	bl	8001474 <VL53L0X_GetDeviceMode>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d104      	bne.n	8001d24 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f898 	bl	8001e50 <VL53L0X_StartMeasurement>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8001d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f001 fb3f 	bl	80033b0 <VL53L0X_measurement_poll_for_completion>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8001d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001d3e:	7bbb      	ldrb	r3, [r7, #14]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2203      	movs	r2, #3
 8001d48:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8001d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8001d68:	2301      	movs	r3, #1
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f001 fae1 	bl	8003336 <VL53L0X_perform_ref_calibration>
 8001d74:	4603      	mov	r3, r0
 8001d76:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001d9a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8001d9c:	7dbb      	ldrb	r3, [r7, #22]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d005      	beq.n	8001dae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8001da2:	7dbb      	ldrb	r3, [r7, #22]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d002      	beq.n	8001dae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8001da8:	7dbb      	ldrb	r3, [r7, #22]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d147      	bne.n	8001e3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	f107 0210 	add.w	r2, r7, #16
 8001db6:	2101      	movs	r1, #1
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fbc3 	bl	8002544 <VL53L0X_GetInterruptThresholds>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001dc8:	d803      	bhi.n	8001dd2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8001dca:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8001dcc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001dd0:	d935      	bls.n	8001e3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8001dd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d131      	bne.n	8001e3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8001de0:	491a      	ldr	r1, [pc, #104]	; (8001e4c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f002 fcbc 	bl	8004760 <VL53L0X_load_tuning_settings>
 8001de8:	4603      	mov	r3, r0
 8001dea:	75fb      	strb	r3, [r7, #23]
 8001dec:	e027      	b.n	8001e3e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001dee:	2204      	movs	r2, #4
 8001df0:	21ff      	movs	r1, #255	; 0xff
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fdfe 	bl	80009f4 <VL53L0X_WrByte>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2170      	movs	r1, #112	; 0x70
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe fdf4 	bl	80009f4 <VL53L0X_WrByte>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001e16:	2200      	movs	r2, #0
 8001e18:	21ff      	movs	r1, #255	; 0xff
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fdea 	bl	80009f4 <VL53L0X_WrByte>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe fde0 	bl	80009f4 <VL53L0X_WrByte>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8001e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000288 	.word	0x20000288

08001e50 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001e60:	f107 030e 	add.w	r3, r7, #14
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fb04 	bl	8001474 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	2180      	movs	r1, #128	; 0x80
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7fe fdbf 	bl	80009f4 <VL53L0X_WrByte>
 8001e76:	4603      	mov	r3, r0
 8001e78:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	21ff      	movs	r1, #255	; 0xff
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fdb8 	bl	80009f4 <VL53L0X_WrByte>
 8001e84:	4603      	mov	r3, r0
 8001e86:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7fe fdb1 	bl	80009f4 <VL53L0X_WrByte>
 8001e92:	4603      	mov	r3, r0
 8001e94:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2191      	movs	r1, #145	; 0x91
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7fe fda7 	bl	80009f4 <VL53L0X_WrByte>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2100      	movs	r1, #0
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fda0 	bl	80009f4 <VL53L0X_WrByte>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	21ff      	movs	r1, #255	; 0xff
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe fd99 	bl	80009f4 <VL53L0X_WrByte>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd92 	bl	80009f4 <VL53L0X_WrByte>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d054      	beq.n	8001f84 <VL53L0X_StartMeasurement+0x134>
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	dc6c      	bgt.n	8001fb8 <VL53L0X_StartMeasurement+0x168>
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <VL53L0X_StartMeasurement+0x98>
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d034      	beq.n	8001f50 <VL53L0X_StartMeasurement+0x100>
 8001ee6:	e067      	b.n	8001fb8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2100      	movs	r1, #0
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7fe fd81 	bl	80009f4 <VL53L0X_WrByte>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8001efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d15d      	bne.n	8001fbe <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8001f0c:	f107 030d 	add.w	r3, r7, #13
 8001f10:	461a      	mov	r2, r3
 8001f12:	2100      	movs	r1, #0
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe fe21 	bl	8000b5c <VL53L0X_RdByte>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	3301      	adds	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8001f24:	7b7a      	ldrb	r2, [r7, #13]
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d107      	bne.n	8001f42 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8001f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f40:	d3e1      	bcc.n	8001f06 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f48:	d339      	bcc.n	8001fbe <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8001f4a:	23f9      	movs	r3, #249	; 0xf9
 8001f4c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8001f4e:	e036      	b.n	8001fbe <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ff12 	bl	8001d84 <VL53L0X_CheckAndLoadInterruptSettings>
 8001f60:	4603      	mov	r3, r0
 8001f62:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001f64:	2202      	movs	r2, #2
 8001f66:	2100      	movs	r1, #0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7fe fd43 	bl	80009f4 <VL53L0X_WrByte>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8001f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d123      	bne.n	8001fc2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001f82:	e01e      	b.n	8001fc2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fef8 	bl	8001d84 <VL53L0X_CheckAndLoadInterruptSettings>
 8001f94:	4603      	mov	r3, r0
 8001f96:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001f98:	2204      	movs	r2, #4
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7fe fd29 	bl	80009f4 <VL53L0X_WrByte>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8001fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8001fb6:	e006      	b.n	8001fc6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001fb8:	23f8      	movs	r3, #248	; 0xf8
 8001fba:	75fb      	strb	r3, [r7, #23]
 8001fbc:	e004      	b.n	8001fc8 <VL53L0X_StartMeasurement+0x178>
		break;
 8001fbe:	bf00      	nop
 8001fc0:	e002      	b.n	8001fc8 <VL53L0X_StartMeasurement+0x178>
		break;
 8001fc2:	bf00      	nop
 8001fc4:	e000      	b.n	8001fc8 <VL53L0X_StartMeasurement+0x178>
		break;
 8001fc6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001fe8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8001fea:	7bbb      	ldrb	r3, [r7, #14]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d112      	bne.n	8002016 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fb1a 	bl	8002630 <VL53L0X_GetInterruptMaskStatus>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b04      	cmp	r3, #4
 8002004:	d103      	bne.n	800200e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e01c      	b.n	8002048 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e018      	b.n	8002048 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8002016:	f107 030d 	add.w	r3, r7, #13
 800201a:	461a      	mov	r2, r3
 800201c:	2114      	movs	r1, #20
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fd9c 	bl	8000b5c <VL53L0X_RdByte>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8002030:	7b7b      	ldrb	r3, [r7, #13]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e002      	b.n	8002048 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002048:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002054:	b5b0      	push	{r4, r5, r7, lr}
 8002056:	b096      	sub	sp, #88	; 0x58
 8002058:	af02      	add	r7, sp, #8
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002064:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002068:	230c      	movs	r3, #12
 800206a:	2114      	movs	r1, #20
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7fe fc95 	bl	800099c <VL53L0X_ReadMulti>
 8002072:	4603      	mov	r3, r0
 8002074:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002078:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 80d1 	bne.w	8002224 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800208e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002092:	b29b      	uxth	r3, r3
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	b29a      	uxth	r2, r3
 8002098:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800209c:	b29b      	uxth	r3, r3
 800209e:	4413      	add	r3, r2
 80020a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80020aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	025b      	lsls	r3, r3, #9
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020c6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80020c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	4413      	add	r3, r2
 80020da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80020de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80020ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002106:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8002108:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800210c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8002116:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800211e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002122:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002128:	d046      	beq.n	80021b8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800212a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800212c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002138:	4a57      	ldr	r2, [pc, #348]	; (8002298 <VL53L0X_GetRangingMeasurementData+0x244>)
 800213a:	fb82 1203 	smull	r1, r2, r2, r3
 800213e:	1192      	asrs	r2, r2, #6
 8002140:	17db      	asrs	r3, r3, #31
 8002142:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002144:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7f1b      	ldrb	r3, [r3, #28]
 8002152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002156:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02c      	beq.n	80021b8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800215e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002160:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	121a      	asrs	r2, r3, #8
					<= 0) {
 800216a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800216c:	429a      	cmp	r2, r3
 800216e:	d10d      	bne.n	800218c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8002170:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8002178:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800217c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002180:	e016      	b.n	80021b0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8002182:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8002186:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800218a:	e011      	b.n	80021b0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800218c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002192:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8002196:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002198:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800219c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80021a0:	121b      	asrs	r3, r3, #8
 80021a2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80021a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80021a8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80021ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80021b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80021b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00d      	beq.n	80021dc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80021c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80021cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	019b      	lsls	r3, r3, #6
 80021d4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	75da      	strb	r2, [r3, #23]
 80021da:	e006      	b.n	80021ea <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80021e2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80021ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80021ee:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80021f2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f002 ff4b 	bl	800509c <VL53L0X_get_pal_range_status>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800220e:	4313      	orrs	r3, r2
 8002210:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002214:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800221c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002224:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002228:	2b00      	cmp	r3, #0
 800222a:	d12f      	bne.n	800228c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f107 040c 	add.w	r4, r7, #12
 8002232:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8002236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800223e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8002246:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800224c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002254:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800225a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8002260:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8002266:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800226c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8002272:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800227c:	f107 050c 	add.w	r5, r7, #12
 8002280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800228c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8002290:	4618      	mov	r0, r3
 8002292:	3750      	adds	r7, #80	; 0x50
 8002294:	46bd      	mov	sp, r7
 8002296:	bdb0      	pop	{r4, r5, r7, pc}
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80022aa:	2100      	movs	r1, #0
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff f8b5 	bl	800141c <VL53L0X_SetDeviceMode>
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fd16 	bl	8001cf0 <VL53L0X_PerformSingleMeasurement>
 80022c4:	4603      	mov	r3, r0
 80022c6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80022c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff febe 	bl	8002054 <VL53L0X_GetRangingMeasurementData>
 80022d8:	4603      	mov	r3, r0
 80022da:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80022dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d105      	bne.n	80022f0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80022e4:	2100      	movs	r1, #0
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f962 	bl	80025b0 <VL53L0X_ClearInterruptMask>
 80022ec:	4603      	mov	r3, r0
 80022ee:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4603      	mov	r3, r0
 800230c:	70fb      	strb	r3, [r7, #3]
 800230e:	460b      	mov	r3, r1
 8002310:	70bb      	strb	r3, [r7, #2]
 8002312:	4613      	mov	r3, r2
 8002314:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002320:	23f6      	movs	r3, #246	; 0xf6
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e107      	b.n	8002536 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8002326:	78bb      	ldrb	r3, [r7, #2]
 8002328:	2b14      	cmp	r3, #20
 800232a:	d110      	bne.n	800234e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800232c:	7e3b      	ldrb	r3, [r7, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8002332:	2310      	movs	r3, #16
 8002334:	73bb      	strb	r3, [r7, #14]
 8002336:	e001      	b.n	800233c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8002338:	2301      	movs	r3, #1
 800233a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800233c:	7bbb      	ldrb	r3, [r7, #14]
 800233e:	461a      	mov	r2, r3
 8002340:	2184      	movs	r1, #132	; 0x84
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fb56 	bl	80009f4 <VL53L0X_WrByte>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e0f3      	b.n	8002536 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800234e:	78bb      	ldrb	r3, [r7, #2]
 8002350:	2b15      	cmp	r3, #21
 8002352:	f040 8097 	bne.w	8002484 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002356:	2201      	movs	r2, #1
 8002358:	21ff      	movs	r1, #255	; 0xff
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fb4a 	bl	80009f4 <VL53L0X_WrByte>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	4313      	orrs	r3, r2
 8002368:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fb40 	bl	80009f4 <VL53L0X_WrByte>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	4313      	orrs	r3, r2
 800237c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800237e:	2200      	movs	r2, #0
 8002380:	21ff      	movs	r1, #255	; 0xff
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fb36 	bl	80009f4 <VL53L0X_WrByte>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	4313      	orrs	r3, r2
 8002390:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002392:	2201      	movs	r2, #1
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fb2c 	bl	80009f4 <VL53L0X_WrByte>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80023a6:	2202      	movs	r2, #2
 80023a8:	2185      	movs	r1, #133	; 0x85
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fb22 	bl	80009f4 <VL53L0X_WrByte>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80023ba:	2204      	movs	r2, #4
 80023bc:	21ff      	movs	r1, #255	; 0xff
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fb18 	bl	80009f4 <VL53L0X_WrByte>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80023ce:	2200      	movs	r2, #0
 80023d0:	21cd      	movs	r1, #205	; 0xcd
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fb0e 	bl	80009f4 <VL53L0X_WrByte>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	4313      	orrs	r3, r2
 80023e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80023e2:	2211      	movs	r2, #17
 80023e4:	21cc      	movs	r1, #204	; 0xcc
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fb04 	bl	80009f4 <VL53L0X_WrByte>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80023f6:	2207      	movs	r2, #7
 80023f8:	21ff      	movs	r1, #255	; 0xff
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fafa 	bl	80009f4 <VL53L0X_WrByte>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	4313      	orrs	r3, r2
 8002408:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800240a:	2200      	movs	r2, #0
 800240c:	21be      	movs	r1, #190	; 0xbe
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe faf0 	bl	80009f4 <VL53L0X_WrByte>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	4313      	orrs	r3, r2
 800241c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800241e:	2206      	movs	r2, #6
 8002420:	21ff      	movs	r1, #255	; 0xff
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fae6 	bl	80009f4 <VL53L0X_WrByte>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	4313      	orrs	r3, r2
 8002430:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002432:	2209      	movs	r2, #9
 8002434:	21cc      	movs	r1, #204	; 0xcc
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fadc 	bl	80009f4 <VL53L0X_WrByte>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	4313      	orrs	r3, r2
 8002444:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002446:	2200      	movs	r2, #0
 8002448:	21ff      	movs	r1, #255	; 0xff
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fad2 	bl	80009f4 <VL53L0X_WrByte>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	4313      	orrs	r3, r2
 8002458:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800245a:	2201      	movs	r2, #1
 800245c:	21ff      	movs	r1, #255	; 0xff
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fac8 	bl	80009f4 <VL53L0X_WrByte>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	4313      	orrs	r3, r2
 800246c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fabe 	bl	80009f4 <VL53L0X_WrByte>
 8002478:	4603      	mov	r3, r0
 800247a:	461a      	mov	r2, r3
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	4313      	orrs	r3, r2
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e058      	b.n	8002536 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d121      	bne.n	80024d0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800248c:	787b      	ldrb	r3, [r7, #1]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d81b      	bhi.n	80024ca <VL53L0X_SetGpioConfig+0x1ce>
 8002492:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <VL53L0X_SetGpioConfig+0x19c>)
 8002494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002498:	080024ad 	.word	0x080024ad
 800249c:	080024b3 	.word	0x080024b3
 80024a0:	080024b9 	.word	0x080024b9
 80024a4:	080024bf 	.word	0x080024bf
 80024a8:	080024c5 	.word	0x080024c5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73bb      	strb	r3, [r7, #14]
				break;
 80024b0:	e00f      	b.n	80024d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73bb      	strb	r3, [r7, #14]
				break;
 80024b6:	e00c      	b.n	80024d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80024b8:	2302      	movs	r3, #2
 80024ba:	73bb      	strb	r3, [r7, #14]
				break;
 80024bc:	e009      	b.n	80024d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80024be:	2303      	movs	r3, #3
 80024c0:	73bb      	strb	r3, [r7, #14]
				break;
 80024c2:	e006      	b.n	80024d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80024c4:	2304      	movs	r3, #4
 80024c6:	73bb      	strb	r3, [r7, #14]
				break;
 80024c8:	e003      	b.n	80024d2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80024ca:	23f5      	movs	r3, #245	; 0xf5
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e000      	b.n	80024d2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80024d0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d107      	bne.n	80024ea <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	461a      	mov	r2, r3
 80024de:	210a      	movs	r1, #10
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7fe fa87 	bl	80009f4 <VL53L0X_WrByte>
 80024e6:	4603      	mov	r3, r0
 80024e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80024f2:	7e3b      	ldrb	r3, [r7, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73bb      	strb	r3, [r7, #14]
 80024fc:	e001      	b.n	8002502 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80024fe:	2310      	movs	r3, #16
 8002500:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	22ef      	movs	r2, #239	; 0xef
 8002506:	2184      	movs	r1, #132	; 0x84
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7fe faf3 	bl	8000af4 <VL53L0X_UpdateByte>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	787a      	ldrb	r2, [r7, #1]
 800251e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800252a:	2100      	movs	r1, #0
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f83f 	bl	80025b0 <VL53L0X_ClearInterruptMask>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop

08002544 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	460b      	mov	r3, r1
 8002552:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002554:	2300      	movs	r3, #0
 8002556:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	461a      	mov	r2, r3
 800255e:	210e      	movs	r1, #14
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7fe fb25 	bl	8000bb0 <VL53L0X_RdWord>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800256a:	8abb      	ldrh	r3, [r7, #20]
 800256c:	045b      	lsls	r3, r3, #17
 800256e:	461a      	mov	r2, r3
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <VL53L0X_GetInterruptThresholds+0x68>)
 8002572:	4013      	ands	r3, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10f      	bne.n	80025a0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	461a      	mov	r2, r3
 8002586:	210c      	movs	r1, #12
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7fe fb11 	bl	8000bb0 <VL53L0X_RdWord>
 800258e:	4603      	mov	r3, r0
 8002590:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002592:	8abb      	ldrh	r3, [r7, #20]
 8002594:	045b      	lsls	r3, r3, #17
 8002596:	461a      	mov	r2, r3
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <VL53L0X_GetInterruptThresholds+0x68>)
 800259a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80025a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	1ffe0000 	.word	0x1ffe0000

080025b0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80025c2:	2201      	movs	r2, #1
 80025c4:	210b      	movs	r1, #11
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fa14 	bl	80009f4 <VL53L0X_WrByte>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80025d0:	2200      	movs	r2, #0
 80025d2:	210b      	movs	r1, #11
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7fe fa0d 	bl	80009f4 <VL53L0X_WrByte>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80025e4:	f107 030d 	add.w	r3, r7, #13
 80025e8:	461a      	mov	r2, r3
 80025ea:	2113      	movs	r1, #19
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7fe fab5 	bl	8000b5c <VL53L0X_RdByte>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80025fc:	7bbb      	ldrb	r3, [r7, #14]
 80025fe:	3301      	adds	r3, #1
 8002600:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8002602:	7b7b      	ldrb	r3, [r7, #13]
 8002604:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800260c:	7bbb      	ldrb	r3, [r7, #14]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d803      	bhi.n	800261a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0d3      	beq.n	80025c2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800261a:	7bbb      	ldrb	r3, [r7, #14]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8002620:	23f4      	movs	r3, #244	; 0xf4
 8002622:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002624:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800263e:	f107 030e 	add.w	r3, r7, #14
 8002642:	461a      	mov	r2, r3
 8002644:	2113      	movs	r1, #19
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe fa88 	bl	8000b5c <VL53L0X_RdByte>
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	f003 0207 	and.w	r2, r3, #7
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800265a:	7bbb      	ldrb	r3, [r7, #14]
 800265c:	f003 0318 	and.w	r3, r3, #24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8002664:	23fa      	movs	r3, #250	; 0xfa
 8002666:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002680:	2300      	movs	r3, #0
 8002682:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fa03 	bl	8002a94 <VL53L0X_perform_ref_spad_management>
 800268e:	4603      	mov	r3, r0
 8002690:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8002692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80026ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80026b0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	461a      	mov	r2, r3
 80026be:	2128      	movs	r1, #40	; 0x28
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fe fa75 	bl	8000bb0 <VL53L0X_RdWord>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d11e      	bne.n	8002710 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80026d2:	893b      	ldrh	r3, [r7, #8]
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	b29b      	uxth	r3, r3
 80026da:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80026dc:	893b      	ldrh	r3, [r7, #8]
 80026de:	461a      	mov	r2, r3
 80026e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dd0b      	ble.n	8002700 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80026e8:	893a      	ldrh	r2, [r7, #8]
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	461a      	mov	r2, r3
					* 250;
 80026f4:	23fa      	movs	r3, #250	; 0xfa
 80026f6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e007      	b.n	8002710 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	b21b      	sxth	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	23fa      	movs	r3, #250	; 0xfa
 8002708:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8002710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800271c:	b480      	push	{r7}
 800271e:	b08b      	sub	sp, #44	; 0x2c
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800272a:	2308      	movs	r3, #8
 800272c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002738:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	fbb3 f2f2 	udiv	r2, r3, r2
 800274c:	69b9      	ldr	r1, [r7, #24]
 800274e:	fb01 f202 	mul.w	r2, r1, r2
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
 800275a:	e030      	b.n	80027be <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	4413      	add	r3, r2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	429a      	cmp	r2, r3
 8002770:	d11e      	bne.n	80027b0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8002772:	7ffa      	ldrb	r2, [r7, #31]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	fa42 f303 	asr.w	r3, r2, r3
 800277a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8002780:	e016      	b.n	80027b0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8002782:	7ffb      	ldrb	r3, [r7, #31]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <get_next_good_spad+0x88>
				success = 1;
 800278c:	2301      	movs	r3, #1
 800278e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	fb03 f202 	mul.w	r2, r3, r2
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	4413      	add	r3, r2
 800279c:	461a      	mov	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	601a      	str	r2, [r3, #0]
				break;
 80027a2:	e009      	b.n	80027b8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80027a4:	7ffb      	ldrb	r3, [r7, #31]
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	3301      	adds	r3, #1
 80027ae:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80027b0:	6a3a      	ldr	r2, [r7, #32]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d3e4      	bcc.n	8002782 <get_next_good_spad+0x66>
				coarseIndex++) {
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3301      	adds	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d202      	bcs.n	80027cc <get_next_good_spad+0xb0>
 80027c6:	7fbb      	ldrb	r3, [r7, #30]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0c7      	beq.n	800275c <get_next_good_spad+0x40>
		}
	}
}
 80027cc:	bf00      	nop
 80027ce:	372c      	adds	r7, #44	; 0x2c
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80027ea:	4a07      	ldr	r2, [pc, #28]	; (8002808 <is_aperture+0x30>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <is_aperture+0x22>
		isAperture = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20000440 	.word	0x20000440

0800280c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002818:	2300      	movs	r3, #0
 800281a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800281c:	2308      	movs	r3, #8
 800281e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	fb01 f202 	mul.w	r2, r1, r2
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d302      	bcc.n	800284a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002844:	23ce      	movs	r3, #206	; 0xce
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e010      	b.n	800286c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b25a      	sxtb	r2, r3
 8002854:	2101      	movs	r1, #1
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	b25b      	sxtb	r3, r3
 800285e:	4313      	orrs	r3, r2
 8002860:	b259      	sxtb	r1, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4413      	add	r3, r2
 8002868:	b2ca      	uxtb	r2, r1
 800286a:	701a      	strb	r2, [r3, #0]

	return status;
 800286c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3724      	adds	r7, #36	; 0x24
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8002886:	2306      	movs	r3, #6
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	21b0      	movs	r1, #176	; 0xb0
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fe f855 	bl	800093c <VL53L0X_WriteMulti>
 8002892:	4603      	mov	r3, r0
 8002894:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80028ac:	2306      	movs	r3, #6
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	21b0      	movs	r1, #176	; 0xb0
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f872 	bl	800099c <VL53L0X_ReadMulti>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80028bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	460b      	mov	r3, r1
 80028d6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80028de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80028e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80028e6:	2300      	movs	r3, #0
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ea:	e02b      	b.n	8002944 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff11 	bl	800271c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002900:	d103      	bne.n	800290a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002902:	23ce      	movs	r3, #206	; 0xce
 8002904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002908:	e020      	b.n	800294c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	461a      	mov	r2, r3
 800290e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002910:	4413      	add	r3, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ff60 	bl	80027d8 <is_aperture>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002922:	23ce      	movs	r3, #206	; 0xce
 8002924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8002928:	e010      	b.n	800294c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002932:	6838      	ldr	r0, [r7, #0]
 8002934:	f7ff ff6a 	bl	800280c <enable_spad_bit>
		currentSpad++;
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	3301      	adds	r3, #1
 800293c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	3301      	adds	r3, #1
 8002942:	62bb      	str	r3, [r7, #40]	; 0x28
 8002944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002948:	429a      	cmp	r2, r3
 800294a:	d3cf      	bcc.n	80028ec <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800294c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800294e:	6a3a      	ldr	r2, [r7, #32]
 8002950:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8002952:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800295a:	6839      	ldr	r1, [r7, #0]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff ff8d 	bl	800287c <set_ref_spad_map>
 8002962:	4603      	mov	r3, r0
 8002964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8002968:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800296c:	2b00      	cmp	r3, #0
 800296e:	d121      	bne.n	80029b4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7ff ff93 	bl	80028a2 <get_ref_spad_map>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8002986:	e011      	b.n	80029ac <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	4413      	add	r3, r2
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	f107 0114 	add.w	r1, r7, #20
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	440b      	add	r3, r1
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d003      	beq.n	80029a6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800299e:	23ce      	movs	r3, #206	; 0xce
 80029a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80029a4:	e006      	b.n	80029b4 <enable_ref_spads+0xec>
			}
			i++;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	3301      	adds	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3e9      	bcc.n	8002988 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80029b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3730      	adds	r7, #48	; 0x30
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80029dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80029e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80029e8:	22c0      	movs	r2, #192	; 0xc0
 80029ea:	2101      	movs	r1, #1
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7fe f801 	bl	80009f4 <VL53L0X_WrByte>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80029f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8002a00:	f107 0308 	add.w	r3, r7, #8
 8002a04:	4619      	mov	r1, r3
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fc48 	bl	800229c <VL53L0X_PerformSingleRangingMeasurement>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8002a12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	21ff      	movs	r1, #255	; 0xff
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fd ffe8 	bl	80009f4 <VL53L0X_WrByte>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8002a2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	21b6      	movs	r1, #182	; 0xb6
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe f8ba 	bl	8000bb0 <VL53L0X_RdWord>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8002a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	21ff      	movs	r1, #255	; 0xff
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fd ffd0 	bl	80009f4 <VL53L0X_WrByte>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8002a5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d112      	bne.n	8002a88 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a66:	461a      	mov	r2, r3
 8002a68:	2101      	movs	r1, #1
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd ffc2 	bl	80009f4 <VL53L0X_WrByte>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8002a76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002a84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8002a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3728      	adds	r7, #40	; 0x28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b09d      	sub	sp, #116	; 0x74
 8002a98:	af06      	add	r7, sp, #24
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8002aa6:	23b4      	movs	r3, #180	; 0xb4
 8002aa8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8002aac:	2303      	movs	r3, #3
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8002ab0:	232c      	movs	r3, #44	; 0x2c
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8002ac0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002ac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8002ace:	2306      	movs	r3, #6
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8002af8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002afe:	e009      	b.n	8002b14 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b10:	3301      	adds	r3, #1
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d3f1      	bcc.n	8002b00 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	21ff      	movs	r1, #255	; 0xff
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7fd ff67 	bl	80009f4 <VL53L0X_WrByte>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002b2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d107      	bne.n	8002b44 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8002b34:	2200      	movs	r2, #0
 8002b36:	214f      	movs	r1, #79	; 0x4f
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7fd ff5b 	bl	80009f4 <VL53L0X_WrByte>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002b44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8002b4c:	222c      	movs	r2, #44	; 0x2c
 8002b4e:	214e      	movs	r1, #78	; 0x4e
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7fd ff4f 	bl	80009f4 <VL53L0X_WrByte>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002b5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d107      	bne.n	8002b74 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002b64:	2200      	movs	r2, #0
 8002b66:	21ff      	movs	r1, #255	; 0xff
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7fd ff43 	bl	80009f4 <VL53L0X_WrByte>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8002b74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8002b7c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002b80:	461a      	mov	r2, r3
 8002b82:	21b6      	movs	r1, #182	; 0xb6
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7fd ff35 	bl	80009f4 <VL53L0X_WrByte>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8002b90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7fd ff29 	bl	80009f4 <VL53L0X_WrByte>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8002ba8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002bb0:	f107 0210 	add.w	r2, r7, #16
 8002bb4:	f107 0111 	add.w	r1, r7, #17
 8002bb8:	2300      	movs	r3, #0
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fbbb 	bl	8003336 <VL53L0X_perform_ref_calibration>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8002bc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d121      	bne.n	8002c12 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8002bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002bea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002bee:	f107 0218 	add.w	r2, r7, #24
 8002bf2:	9204      	str	r2, [sp, #16]
 8002bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf6:	9203      	str	r2, [sp, #12]
 8002bf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bfa:	9202      	str	r2, [sp, #8]
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4623      	mov	r3, r4
 8002c04:	4602      	mov	r2, r0
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff fe5e 	bl	80028c8 <enable_ref_spads>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d174      	bne.n	8002d04 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8002c1e:	f107 0312 	add.w	r3, r7, #18
 8002c22:	4619      	mov	r1, r3
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fecb 	bl	80029c0 <perform_ref_signal_measurement>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002c30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d161      	bne.n	8002cfc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8002c38:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8002c3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d25d      	bcs.n	8002cfc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c44:	e009      	b.n	8002c5a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8002c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c56:	3301      	adds	r3, #1
 8002c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3f1      	bcc.n	8002c46 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8002c62:	e002      	b.n	8002c6a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8002c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c66:	3301      	adds	r3, #1
 8002c68:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8002c6a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c70:	4413      	add	r3, r2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fdb0 	bl	80027d8 <is_aperture>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8002c7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d3ee      	bcc.n	8002c64 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8002c9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002c9e:	f107 0218 	add.w	r2, r7, #24
 8002ca2:	9204      	str	r2, [sp, #16]
 8002ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca6:	9203      	str	r2, [sp, #12]
 8002ca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002caa:	9202      	str	r2, [sp, #8]
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fe06 	bl	80028c8 <enable_ref_spads>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002cc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11b      	bne.n	8002d02 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8002cce:	f107 0312 	add.w	r3, r7, #18
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fe73 	bl	80029c0 <perform_ref_signal_measurement>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8002ce0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10c      	bne.n	8002d02 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8002ce8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002cea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d208      	bcs.n	8002d02 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8002cfa:	e002      	b.n	8002d02 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d00:	e000      	b.n	8002d04 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8002d02:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002d04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f040 80af 	bne.w	8002e6c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8002d0e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002d10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002d12:	429a      	cmp	r2, r3
 8002d14:	f240 80aa 	bls.w	8002e6c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8002d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f005 f900 	bl	8007f34 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002d34:	8a7b      	ldrh	r3, [r7, #18]
 8002d36:	461a      	mov	r2, r3
 8002d38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bfb8      	it	lt
 8002d40:	425b      	neglt	r3, r3
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8002d4a:	e086      	b.n	8002e5a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d5a:	f7ff fcdf 	bl	800271c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d64:	d103      	bne.n	8002d6e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002d66:	23ce      	movs	r3, #206	; 0xce
 8002d68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8002d6c:	e07e      	b.n	8002e6c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8002d6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4413      	add	r3, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fd2e 	bl	80027d8 <is_aperture>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8002d8c:	e06e      	b.n	8002e6c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d90:	3301      	adds	r3, #1
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8002d9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd32 	bl	800280c <enable_spad_bit>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8002dae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8002db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db8:	3301      	adds	r3, #1
 8002dba:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fd59 	bl	800287c <set_ref_spad_map>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8002dd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d146      	bne.n	8002e66 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8002dd8:	f107 0312 	add.w	r3, r7, #18
 8002ddc:	4619      	mov	r1, r3
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff fdee 	bl	80029c0 <perform_ref_signal_measurement>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8002dea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13b      	bne.n	8002e6a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002df2:	8a7b      	ldrh	r3, [r7, #18]
 8002df4:	461a      	mov	r2, r3
 8002df6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bfb8      	it	lt
 8002dfe:	425b      	neglt	r3, r3
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8002e02:	8a7b      	ldrh	r3, [r7, #18]
 8002e04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d21c      	bcs.n	8002e44 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d914      	bls.n	8002e3c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8002e12:	f107 031c 	add.w	r3, r7, #28
 8002e16:	4619      	mov	r1, r3
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff fd2f 	bl	800287c <set_ref_spad_map>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8002e2a:	f107 011c 	add.w	r1, r7, #28
 8002e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 f87f 	bl	8007f34 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8002e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002e42:	e00a      	b.n	8002e5a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8002e4e:	f107 031c 	add.w	r3, r7, #28
 8002e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 f86d 	bl	8007f34 <memcpy>
		while (!complete) {
 8002e5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f43f af74 	beq.w	8002d4c <VL53L0X_perform_ref_spad_management+0x2b8>
 8002e64:	e002      	b.n	8002e6c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8002e6a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e78:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8002e80:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8002ea0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	375c      	adds	r7, #92	; 0x5c
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}

08002eac <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b093      	sub	sp, #76	; 0x4c
 8002eb0:	af06      	add	r7, sp, #24
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8002ec4:	23b4      	movs	r3, #180	; 0xb4
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8002eca:	2306      	movs	r3, #6
 8002ecc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8002ece:	232c      	movs	r3, #44	; 0x2c
 8002ed0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	21ff      	movs	r1, #255	; 0xff
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7fd fd8c 	bl	80009f4 <VL53L0X_WrByte>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002ee2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8002eea:	2200      	movs	r2, #0
 8002eec:	214f      	movs	r1, #79	; 0x4f
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7fd fd80 	bl	80009f4 <VL53L0X_WrByte>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8002efa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8002f02:	222c      	movs	r2, #44	; 0x2c
 8002f04:	214e      	movs	r1, #78	; 0x4e
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7fd fd74 	bl	80009f4 <VL53L0X_WrByte>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8002f12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d107      	bne.n	8002f2a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	21ff      	movs	r1, #255	; 0xff
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7fd fd68 	bl	80009f4 <VL53L0X_WrByte>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8002f2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8002f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f36:	461a      	mov	r2, r3
 8002f38:	21b6      	movs	r1, #182	; 0xb6
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7fd fd5a 	bl	80009f4 <VL53L0X_WrByte>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e009      	b.n	8002f60 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d3f1      	bcc.n	8002f4c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002f6e:	e002      	b.n	8002f76 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	3301      	adds	r3, #1
 8002f74:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002f76:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fc2a 	bl	80027d8 <is_aperture>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <VL53L0X_set_reference_spads+0xe6>
 8002f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d3ee      	bcc.n	8002f70 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8002f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa2:	79f9      	ldrb	r1, [r7, #7]
 8002fa4:	f107 0214 	add.w	r2, r7, #20
 8002fa8:	9204      	str	r2, [sp, #16]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	9203      	str	r2, [sp, #12]
 8002fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fb0:	9202      	str	r2, [sp, #8]
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	4623      	mov	r3, r4
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fc83 	bl	80028c8 <enable_ref_spads>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8002fc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10c      	bne.n	8002fea <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	79fa      	ldrb	r2, [r7, #7]
 8002fe6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8002fea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3734      	adds	r7, #52	; 0x34
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}

08002ff6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	2100      	movs	r1, #0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fcea 	bl	80009f4 <VL53L0X_WrByte>
 8003020:	4603      	mov	r3, r0
 8003022:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8003024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f9bf 	bl	80033b0 <VL53L0X_measurement_poll_for_completion>
 8003032:	4603      	mov	r3, r0
 8003034:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800303e:	2100      	movs	r1, #0
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fab5 	bl	80025b0 <VL53L0X_ClearInterruptMask>
 8003046:	4603      	mov	r3, r0
 8003048:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fccc 	bl	80009f4 <VL53L0X_WrByte>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	70fb      	strb	r3, [r7, #3]
 800307e:	460b      	mov	r3, r1
 8003080:	70bb      	strb	r3, [r7, #2]
 8003082:	4613      	mov	r3, r2
 8003084:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800308e:	2201      	movs	r2, #1
 8003090:	21ff      	movs	r1, #255	; 0xff
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fcae 	bl	80009f4 <VL53L0X_WrByte>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	4313      	orrs	r3, r2
 80030a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fca4 	bl	80009f4 <VL53L0X_WrByte>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80030b6:	2200      	movs	r2, #0
 80030b8:	21ff      	movs	r1, #255	; 0xff
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fc9a 	bl	80009f4 <VL53L0X_WrByte>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01e      	beq.n	800310e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80030d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	21cb      	movs	r1, #203	; 0xcb
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fd fd3d 	bl	8000b5c <VL53L0X_RdByte>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80030ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d02a      	beq.n	800314a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80030f4:	f107 030e 	add.w	r3, r7, #14
 80030f8:	461a      	mov	r2, r3
 80030fa:	21ee      	movs	r1, #238	; 0xee
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd fd2d 	bl	8000b5c <VL53L0X_RdByte>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	4313      	orrs	r3, r2
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e01d      	b.n	800314a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800310e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8003116:	78bb      	ldrb	r3, [r7, #2]
 8003118:	461a      	mov	r2, r3
 800311a:	21cb      	movs	r1, #203	; 0xcb
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fd fc69 	bl	80009f4 <VL53L0X_WrByte>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	4313      	orrs	r3, r2
 800312a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800312c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	21ee      	movs	r1, #238	; 0xee
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fcda 	bl	8000af4 <VL53L0X_UpdateByte>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	4313      	orrs	r3, r2
 8003148:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800314a:	2201      	movs	r2, #1
 800314c:	21ff      	movs	r1, #255	; 0xff
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fc50 	bl	80009f4 <VL53L0X_WrByte>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	4313      	orrs	r3, r2
 800315c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800315e:	2201      	movs	r2, #1
 8003160:	2100      	movs	r1, #0
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fc46 	bl	80009f4 <VL53L0X_WrByte>
 8003168:	4603      	mov	r3, r0
 800316a:	461a      	mov	r2, r3
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	4313      	orrs	r3, r2
 8003170:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003172:	2200      	movs	r2, #0
 8003174:	21ff      	movs	r1, #255	; 0xff
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd fc3c 	bl	80009f4 <VL53L0X_WrByte>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	4313      	orrs	r3, r2
 8003184:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8003186:	7bbb      	ldrb	r3, [r7, #14]
 8003188:	f023 0310 	bic.w	r3, r3, #16
 800318c:	b2da      	uxtb	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	701a      	strb	r2, [r3, #0]

	return Status;
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08a      	sub	sp, #40	; 0x28
 80031a2:	af04      	add	r7, sp, #16
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	4611      	mov	r1, r2
 80031aa:	461a      	mov	r2, r3
 80031ac:	460b      	mov	r3, r1
 80031ae:	71fb      	strb	r3, [r7, #7]
 80031b0:	4613      	mov	r3, r2
 80031b2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80031c8:	79bb      	ldrb	r3, [r7, #6]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80031d4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80031d6:	2201      	movs	r2, #1
 80031d8:	2101      	movs	r1, #1
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7fd fc0a 	bl	80009f4 <VL53L0X_WrByte>
 80031e0:	4603      	mov	r3, r0
 80031e2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80031e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff01 	bl	8002ff6 <VL53L0X_perform_single_ref_calibration>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80031f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d115      	bne.n	800322c <VL53L0X_perform_vhv_calibration+0x8e>
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d112      	bne.n	800322c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003206:	7d39      	ldrb	r1, [r7, #20]
 8003208:	7d7a      	ldrb	r2, [r7, #21]
 800320a:	2300      	movs	r3, #0
 800320c:	9303      	str	r3, [sp, #12]
 800320e:	2301      	movs	r3, #1
 8003210:	9302      	str	r3, [sp, #8]
 8003212:	f107 0313 	add.w	r3, r7, #19
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	460b      	mov	r3, r1
 800321e:	2101      	movs	r1, #1
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f7ff ff23 	bl	800306c <VL53L0X_ref_calibration_io>
 8003226:	4603      	mov	r3, r0
 8003228:	75fb      	strb	r3, [r7, #23]
 800322a:	e002      	b.n	8003232 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d112      	bne.n	8003260 <VL53L0X_perform_vhv_calibration+0xc2>
 800323a:	79bb      	ldrb	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00f      	beq.n	8003260 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003240:	7dbb      	ldrb	r3, [r7, #22]
 8003242:	461a      	mov	r2, r3
 8003244:	2101      	movs	r1, #1
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7fd fbd4 	bl	80009f4 <VL53L0X_WrByte>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	7dba      	ldrb	r2, [r7, #22]
 800325c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8003260:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af04      	add	r7, sp, #16
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	4611      	mov	r1, r2
 8003278:	461a      	mov	r2, r3
 800327a:	460b      	mov	r3, r1
 800327c:	71fb      	strb	r3, [r7, #7]
 800327e:	4613      	mov	r3, r2
 8003280:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003292:	79bb      	ldrb	r3, [r7, #6]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800329e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80032a0:	2202      	movs	r2, #2
 80032a2:	2101      	movs	r1, #1
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7fd fba5 	bl	80009f4 <VL53L0X_WrByte>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80032ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80032b6:	2100      	movs	r1, #0
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff fe9c 	bl	8002ff6 <VL53L0X_perform_single_ref_calibration>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80032c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d115      	bne.n	80032f6 <VL53L0X_perform_phase_calibration+0x8a>
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d112      	bne.n	80032f6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80032d0:	7d39      	ldrb	r1, [r7, #20]
 80032d2:	7d7a      	ldrb	r2, [r7, #21]
 80032d4:	2301      	movs	r3, #1
 80032d6:	9303      	str	r3, [sp, #12]
 80032d8:	2300      	movs	r3, #0
 80032da:	9302      	str	r3, [sp, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	f107 0313 	add.w	r3, r7, #19
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	460b      	mov	r3, r1
 80032e8:	2101      	movs	r1, #1
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff febe 	bl	800306c <VL53L0X_ref_calibration_io>
 80032f0:	4603      	mov	r3, r0
 80032f2:	75fb      	strb	r3, [r7, #23]
 80032f4:	e002      	b.n	80032fc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80032fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d112      	bne.n	800332a <VL53L0X_perform_phase_calibration+0xbe>
 8003304:	79bb      	ldrb	r3, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00f      	beq.n	800332a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800330a:	7dbb      	ldrb	r3, [r7, #22]
 800330c:	461a      	mov	r2, r3
 800330e:	2101      	movs	r1, #1
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7fd fb6f 	bl	80009f4 <VL53L0X_WrByte>
 8003316:	4603      	mov	r3, r0
 8003318:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800331a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	7dba      	ldrb	r2, [r7, #22]
 8003326:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800332a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8003352:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	2300      	movs	r3, #0
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff ff1f 	bl	800319e <VL53L0X_perform_vhv_calibration>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	2300      	movs	r3, #0
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff7a 	bl	800326c <VL53L0X_perform_phase_calibration>
 8003378:	4603      	mov	r3, r0
 800337a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800337c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10f      	bne.n	80033a4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003384:	7dbb      	ldrb	r3, [r7, #22]
 8003386:	461a      	mov	r2, r3
 8003388:	2101      	movs	r1, #1
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7fd fb32 	bl	80009f4 <VL53L0X_WrByte>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	7dba      	ldrb	r2, [r7, #22]
 80033a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80033a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80033c4:	f107 030f 	add.w	r3, r7, #15
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe fe02 	bl	8001fd4 <VL53L0X_GetMeasurementDataReady>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80033d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d110      	bne.n	80033fe <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d00f      	beq.n	8003402 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	3301      	adds	r3, #1
 80033e6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80033ee:	d302      	bcc.n	80033f6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80033f0:	23f9      	movs	r3, #249	; 0xf9
 80033f2:	75fb      	strb	r3, [r7, #23]
			break;
 80033f4:	e006      	b.n	8003404 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fc4e 	bl	8000c98 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80033fc:	e7e2      	b.n	80033c4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8003402:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8003404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	3301      	adds	r3, #1
 8003422:	b2db      	uxtb	r3, r3
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8003442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003446:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8003448:	e002      	b.n	8003450 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d8f8      	bhi.n	800344a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8003458:	e017      	b.n	800348a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4413      	add	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	429a      	cmp	r2, r3
 8003464:	d30b      	bcc.n	800347e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4413      	add	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4413      	add	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e002      	b.n	8003484 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e4      	bne.n	800345a <VL53L0X_isqrt+0x24>
	}

	return res;
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2183      	movs	r1, #131	; 0x83
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd faa0 	bl	80009f4 <VL53L0X_WrByte>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	7dfb      	ldrb	r3, [r7, #23]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80034be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d11e      	bne.n	8003504 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80034ca:	f107 030f 	add.w	r3, r7, #15
 80034ce:	461a      	mov	r2, r3
 80034d0:	2183      	movs	r1, #131	; 0x83
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fb42 	bl	8000b5c <VL53L0X_RdByte>
 80034d8:	4603      	mov	r3, r0
 80034da:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <VL53L0X_device_read_strobe+0x5a>
 80034e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3301      	adds	r3, #1
 80034ee:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034f6:	d3e8      	bcc.n	80034ca <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034fe:	d301      	bcc.n	8003504 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003500:	23f9      	movs	r3, #249	; 0xf9
 8003502:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8003504:	2201      	movs	r2, #1
 8003506:	2183      	movs	r1, #131	; 0x83
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fd fa73 	bl	80009f4 <VL53L0X_WrByte>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	4313      	orrs	r3, r2
 8003516:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8003518:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b098      	sub	sp, #96	; 0x60
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8003554:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800356c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8003570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003574:	2b07      	cmp	r3, #7
 8003576:	f000 8408 	beq.w	8003d8a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800357a:	2201      	movs	r2, #1
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fa38 	bl	80009f4 <VL53L0X_WrByte>
 8003584:	4603      	mov	r3, r0
 8003586:	461a      	mov	r2, r3
 8003588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800358c:	4313      	orrs	r3, r2
 800358e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003592:	2201      	movs	r2, #1
 8003594:	21ff      	movs	r1, #255	; 0xff
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fa2c 	bl	80009f4 <VL53L0X_WrByte>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80035aa:	2200      	movs	r2, #0
 80035ac:	2100      	movs	r1, #0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd fa20 	bl	80009f4 <VL53L0X_WrByte>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035bc:	4313      	orrs	r3, r2
 80035be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80035c2:	2206      	movs	r2, #6
 80035c4:	21ff      	movs	r1, #255	; 0xff
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd fa14 	bl	80009f4 <VL53L0X_WrByte>
 80035cc:	4603      	mov	r3, r0
 80035ce:	461a      	mov	r2, r3
 80035d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80035da:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80035de:	461a      	mov	r2, r3
 80035e0:	2183      	movs	r1, #131	; 0x83
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd faba 	bl	8000b5c <VL53L0X_RdByte>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80035f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	2183      	movs	r1, #131	; 0x83
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fd f9f5 	bl	80009f4 <VL53L0X_WrByte>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003612:	4313      	orrs	r3, r2
 8003614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8003618:	2207      	movs	r2, #7
 800361a:	21ff      	movs	r1, #255	; 0xff
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7fd f9e9 	bl	80009f4 <VL53L0X_WrByte>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800362a:	4313      	orrs	r3, r2
 800362c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8003630:	2201      	movs	r2, #1
 8003632:	2181      	movs	r1, #129	; 0x81
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fd f9dd 	bl	80009f4 <VL53L0X_WrByte>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003642:	4313      	orrs	r3, r2
 8003644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd fb25 	bl	8000c98 <VL53L0X_PollingDelay>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003656:	4313      	orrs	r3, r2
 8003658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800365c:	2201      	movs	r2, #1
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7fd f9c7 	bl	80009f4 <VL53L0X_WrByte>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800366e:	4313      	orrs	r3, r2
 8003670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8098 	beq.w	80037b0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003680:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003684:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 8091 	bne.w	80037b0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800368e:	226b      	movs	r2, #107	; 0x6b
 8003690:	2194      	movs	r1, #148	; 0x94
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd f9ae 	bl	80009f4 <VL53L0X_WrByte>
 8003698:	4603      	mov	r3, r0
 800369a:	461a      	mov	r2, r3
 800369c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fef9 	bl	800349e <VL53L0X_device_read_strobe>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80036ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036be:	461a      	mov	r2, r3
 80036c0:	2190      	movs	r1, #144	; 0x90
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd faac 	bl	8000c20 <VL53L0X_RdDWord>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461a      	mov	r2, r3
 80036cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	0bdb      	lsrs	r3, r3, #15
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80036f2:	2224      	movs	r2, #36	; 0x24
 80036f4:	2194      	movs	r1, #148	; 0x94
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd f97c 	bl	80009f4 <VL53L0X_WrByte>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003704:	4313      	orrs	r3, r2
 8003706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fec7 	bl	800349e <VL53L0X_device_read_strobe>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003718:	4313      	orrs	r3, r2
 800371a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800371e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003722:	461a      	mov	r2, r3
 8003724:	2190      	movs	r1, #144	; 0x90
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fa7a 	bl	8000c20 <VL53L0X_RdDWord>
 800372c:	4603      	mov	r3, r0
 800372e:	461a      	mov	r2, r3
 8003730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003734:	4313      	orrs	r3, r2
 8003736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	0e1b      	lsrs	r3, r3, #24
 800373e:	b2db      	uxtb	r3, r3
 8003740:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	b2db      	uxtb	r3, r3
 8003748:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	b2db      	uxtb	r3, r3
 8003750:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	b2db      	uxtb	r3, r3
 8003756:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8003758:	2225      	movs	r2, #37	; 0x25
 800375a:	2194      	movs	r1, #148	; 0x94
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fd f949 	bl	80009f4 <VL53L0X_WrByte>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800376a:	4313      	orrs	r3, r2
 800376c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff fe94 	bl	800349e <VL53L0X_device_read_strobe>
 8003776:	4603      	mov	r3, r0
 8003778:	461a      	mov	r2, r3
 800377a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800377e:	4313      	orrs	r3, r2
 8003780:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003788:	461a      	mov	r2, r3
 800378a:	2190      	movs	r1, #144	; 0x90
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fd fa47 	bl	8000c20 <VL53L0X_RdDWord>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800379a:	4313      	orrs	r3, r2
 800379c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	0e1b      	lsrs	r3, r3, #24
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80037a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8189 	beq.w	8003ace <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80037bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80037c0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 8182 	bne.w	8003ace <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80037ca:	2202      	movs	r2, #2
 80037cc:	2194      	movs	r1, #148	; 0x94
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd f910 	bl	80009f4 <VL53L0X_WrByte>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461a      	mov	r2, r3
 80037d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037dc:	4313      	orrs	r3, r2
 80037de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fe5b 	bl	800349e <VL53L0X_device_read_strobe>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80037f6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80037fa:	461a      	mov	r2, r3
 80037fc:	2190      	movs	r1, #144	; 0x90
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd f9ac 	bl	8000b5c <VL53L0X_RdByte>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800380c:	4313      	orrs	r3, r2
 800380e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003812:	227b      	movs	r2, #123	; 0x7b
 8003814:	2194      	movs	r1, #148	; 0x94
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd f8ec 	bl	80009f4 <VL53L0X_WrByte>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003824:	4313      	orrs	r3, r2
 8003826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fe37 	bl	800349e <VL53L0X_device_read_strobe>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003838:	4313      	orrs	r3, r2
 800383a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800383e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8003842:	461a      	mov	r2, r3
 8003844:	2190      	movs	r1, #144	; 0x90
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd f988 	bl	8000b5c <VL53L0X_RdByte>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003854:	4313      	orrs	r3, r2
 8003856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800385a:	2277      	movs	r2, #119	; 0x77
 800385c:	2194      	movs	r1, #148	; 0x94
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd f8c8 	bl	80009f4 <VL53L0X_WrByte>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800386c:	4313      	orrs	r3, r2
 800386e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fe13 	bl	800349e <VL53L0X_device_read_strobe>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003880:	4313      	orrs	r3, r2
 8003882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800388a:	461a      	mov	r2, r3
 800388c:	2190      	movs	r1, #144	; 0x90
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd f9c6 	bl	8000c20 <VL53L0X_RdDWord>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800389c:	4313      	orrs	r3, r2
 800389e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	0e5b      	lsrs	r3, r3, #25
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	0c9b      	lsrs	r3, r3, #18
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80038be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c0:	0adb      	lsrs	r3, r3, #11
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80038ec:	2278      	movs	r2, #120	; 0x78
 80038ee:	2194      	movs	r1, #148	; 0x94
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fd f87f 	bl	80009f4 <VL53L0X_WrByte>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80038fe:	4313      	orrs	r3, r2
 8003900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fdca 	bl	800349e <VL53L0X_device_read_strobe>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003912:	4313      	orrs	r3, r2
 8003914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800391c:	461a      	mov	r2, r3
 800391e:	2190      	movs	r1, #144	; 0x90
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7fd f97d 	bl	8000c20 <VL53L0X_RdDWord>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800392e:	4313      	orrs	r3, r2
 8003930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	0f5b      	lsrs	r3, r3, #29
 8003938:	b2db      	uxtb	r3, r3
 800393a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800393e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8003940:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003944:	4413      	add	r3, r2
 8003946:	b2db      	uxtb	r3, r3
 8003948:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	0d9b      	lsrs	r3, r3, #22
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003954:	b2db      	uxtb	r3, r3
 8003956:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	0bdb      	lsrs	r3, r3, #15
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003962:	b2db      	uxtb	r3, r3
 8003964:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003970:	b2db      	uxtb	r3, r3
 8003972:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397e:	b2db      	uxtb	r3, r3
 8003980:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	b2db      	uxtb	r3, r3
 8003986:	019b      	lsls	r3, r3, #6
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8003994:	2279      	movs	r2, #121	; 0x79
 8003996:	2194      	movs	r1, #148	; 0x94
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fd f82b 	bl	80009f4 <VL53L0X_WrByte>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fd76 	bl	800349e <VL53L0X_device_read_strobe>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80039c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039c4:	461a      	mov	r2, r3
 80039c6:	2190      	movs	r1, #144	; 0x90
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fd f929 	bl	8000c20 <VL53L0X_RdDWord>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	0e9b      	lsrs	r3, r3, #26
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80039e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80039ec:	4413      	add	r3, r2
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	0cdb      	lsrs	r3, r3, #19
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	0b1b      	lsrs	r3, r3, #12
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	095b      	lsrs	r3, r3, #5
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8003a2e:	227a      	movs	r2, #122	; 0x7a
 8003a30:	2194      	movs	r1, #148	; 0x94
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7fc ffde 	bl	80009f4 <VL53L0X_WrByte>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fd29 	bl	800349e <VL53L0X_device_read_strobe>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003a5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2190      	movs	r1, #144	; 0x90
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd f8dc 	bl	8000c20 <VL53L0X_RdDWord>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	0f9b      	lsrs	r3, r3, #30
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a80:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8003a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a86:	4413      	add	r3, r2
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	0ddb      	lsrs	r3, r3, #23
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	0a5b      	lsrs	r3, r3, #9
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80f1 	beq.w	8003cbc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003ada:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ade:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 80ea 	bne.w	8003cbc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8003ae8:	227b      	movs	r2, #123	; 0x7b
 8003aea:	2194      	movs	r1, #148	; 0x94
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fc ff81 	bl	80009f4 <VL53L0X_WrByte>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
 8003af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fccc 	bl	800349e <VL53L0X_device_read_strobe>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8003b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2190      	movs	r1, #144	; 0x90
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7fd f87f 	bl	8000c20 <VL53L0X_RdDWord>
 8003b22:	4603      	mov	r3, r0
 8003b24:	461a      	mov	r2, r3
 8003b26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8003b30:	227c      	movs	r2, #124	; 0x7c
 8003b32:	2194      	movs	r1, #148	; 0x94
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fc ff5d 	bl	80009f4 <VL53L0X_WrByte>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fca8 	bl	800349e <VL53L0X_device_read_strobe>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	461a      	mov	r2, r3
 8003b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8003b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b60:	461a      	mov	r2, r3
 8003b62:	2190      	movs	r1, #144	; 0x90
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fd f85b 	bl	8000c20 <VL53L0X_RdDWord>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8003b78:	2273      	movs	r2, #115	; 0x73
 8003b7a:	2194      	movs	r1, #148	; 0x94
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7fc ff39 	bl	80009f4 <VL53L0X_WrByte>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fc84 	bl	800349e <VL53L0X_device_read_strobe>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003ba4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2190      	movs	r1, #144	; 0x90
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7fd f837 	bl	8000c20 <VL53L0X_RdDWord>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8003bc8:	2274      	movs	r2, #116	; 0x74
 8003bca:	2194      	movs	r1, #148	; 0x94
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7fc ff11 	bl	80009f4 <VL53L0X_WrByte>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fc5c 	bl	800349e <VL53L0X_device_read_strobe>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2190      	movs	r1, #144	; 0x90
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd f80f 	bl	8000c20 <VL53L0X_RdDWord>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8003c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c16:	4313      	orrs	r3, r2
 8003c18:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8003c1a:	2275      	movs	r2, #117	; 0x75
 8003c1c:	2194      	movs	r1, #148	; 0x94
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fc fee8 	bl	80009f4 <VL53L0X_WrByte>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fc33 	bl	800349e <VL53L0X_device_read_strobe>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2190      	movs	r1, #144	; 0x90
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fc ffe6 	bl	8000c20 <VL53L0X_RdDWord>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8003c6a:	2276      	movs	r2, #118	; 0x76
 8003c6c:	2194      	movs	r1, #148	; 0x94
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fc fec0 	bl	80009f4 <VL53L0X_WrByte>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fc0b 	bl	800349e <VL53L0X_device_read_strobe>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8003c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2190      	movs	r1, #144	; 0x90
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fc ffbe 	bl	8000c20 <VL53L0X_RdDWord>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8003cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2181      	movs	r1, #129	; 0x81
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fc fe97 	bl	80009f4 <VL53L0X_WrByte>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003cd4:	2206      	movs	r2, #6
 8003cd6:	21ff      	movs	r1, #255	; 0xff
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7fc fe8b 	bl	80009f4 <VL53L0X_WrByte>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003cec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2183      	movs	r1, #131	; 0x83
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fc ff31 	bl	8000b5c <VL53L0X_RdByte>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8003d08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003d0c:	f023 0304 	bic.w	r3, r3, #4
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	2183      	movs	r1, #131	; 0x83
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fc fe6c 	bl	80009f4 <VL53L0X_WrByte>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	21ff      	movs	r1, #255	; 0xff
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fe60 	bl	80009f4 <VL53L0X_WrByte>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003d42:	2201      	movs	r2, #1
 8003d44:	2100      	movs	r1, #0
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fc fe54 	bl	80009f4 <VL53L0X_WrByte>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	21ff      	movs	r1, #255	; 0xff
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fc fe48 	bl	80009f4 <VL53L0X_WrByte>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fc fe3c 	bl	80009f4 <VL53L0X_WrByte>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003d8a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f040 808f 	bne.w	8003eb2 <VL53L0X_get_info_from_device+0x98e>
 8003d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d98:	2b07      	cmp	r3, #7
 8003d9a:	f000 808a 	beq.w	8003eb2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d024      	beq.n	8003df2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8003da8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003dac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11e      	bne.n	8003df2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003dba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003dc4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003dc8:	2300      	movs	r3, #0
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dcc:	e00e      	b.n	8003dec <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8003dce:	f107 0208 	add.w	r2, r7, #8
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd4:	4413      	add	r3, r2
 8003dd6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8003de2:	460a      	mov	r2, r1
 8003de4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	3301      	adds	r3, #1
 8003dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	dded      	ble.n	8003dce <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d018      	beq.n	8003e2e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8003dfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e00:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d112      	bne.n	8003e2e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e08:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	33f3      	adds	r3, #243	; 0xf3
 8003e20:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8003e22:	f107 0310 	add.w	r3, r7, #16
 8003e26:	4619      	mov	r1, r3
 8003e28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e2a:	f004 f927 	bl	800807c <strcpy>

		}

		if (((option & 4) == 4) &&
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d030      	beq.n	8003e9a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8003e38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e3c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d12a      	bne.n	8003e9a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8003e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e56:	025b      	lsls	r3, r3, #9
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8003e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8003e6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8003e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7c:	fb02 f303 	mul.w	r3, r2, r3
 8003e80:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8003e82:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8003e86:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003e8a:	425b      	negs	r3, r3
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8003e92:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8003e9a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8003ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003eb2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3760      	adds	r7, #96	; 0x60
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b087      	sub	sp, #28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8003eca:	f240 6277 	movw	r2, #1655	; 0x677
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8003ed6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003eda:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8003eec:	68bb      	ldr	r3, [r7, #8]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003f1a:	e005      	b.n	8003f28 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	3301      	adds	r3, #1
 8003f26:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f4      	bne.n	8003f1c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8003f32:	89fb      	ldrh	r3, [r7, #14]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8003f40:	4413      	add	r3, r2
 8003f42:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8003f44:	8afb      	ldrh	r3, [r7, #22]

}
 8003f46:	4618      	mov	r0, r3
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003f60:	88fb      	ldrh	r3, [r7, #6]
 8003f62:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8003f64:	88fa      	ldrh	r2, [r7, #6]
 8003f66:	0a12      	lsrs	r2, r2, #8
 8003f68:	b292      	uxth	r2, r2
 8003f6a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8003f70:	68fb      	ldr	r3, [r7, #12]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	4619      	mov	r1, r3
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff ff91 	bl	8003ebe <VL53L0X_calc_macro_period_ps>
 8003f9c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003fa4:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <VL53L0X_calc_timeout_mclks+0x50>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	099b      	lsrs	r3, r3, #6
 8003fac:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fb4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	441a      	add	r2, r3
	timeout_period_mclks =
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	10624dd3 	.word	0x10624dd3

08003fd4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	807b      	strh	r3, [r7, #2]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8003fe8:	787b      	ldrb	r3, [r7, #1]
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff66 	bl	8003ebe <VL53L0X_calc_macro_period_ps>
 8003ff2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <VL53L0X_calc_timeout_us+0x50>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	099b      	lsrs	r3, r3, #6
 8004002:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	fb02 f303 	mul.w	r3, r2, r3
 800400c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <VL53L0X_calc_timeout_us+0x50>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	099b      	lsrs	r3, r3, #6
 8004018:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800401a:	697b      	ldr	r3, [r7, #20]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	10624dd3 	.word	0x10624dd3

08004028 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	; 0x30
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	460b      	mov	r3, r1
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004036:	2300      	movs	r3, #0
 8004038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800404e:	7afb      	ldrb	r3, [r7, #11]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <get_sequence_step_timeout+0x38>
 8004054:	7afb      	ldrb	r3, [r7, #11]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d002      	beq.n	8004060 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800405a:	7afb      	ldrb	r3, [r7, #11]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d128      	bne.n	80040b2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004060:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004064:	461a      	mov	r2, r3
 8004066:	2100      	movs	r1, #0
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7fd fa5b 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8004074:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800407c:	f107 0320 	add.w	r3, r7, #32
 8004080:	461a      	mov	r2, r3
 8004082:	2146      	movs	r1, #70	; 0x46
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7fc fd69 	bl	8000b5c <VL53L0X_RdByte>
 800408a:	4603      	mov	r3, r0
 800408c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8004090:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004094:	b29b      	uxth	r3, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff ff5b 	bl	8003f52 <VL53L0X_decode_timeout>
 800409c:	4603      	mov	r3, r0
 800409e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80040a0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80040a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff ff93 	bl	8003fd4 <VL53L0X_calc_timeout_us>
 80040ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80040b0:	e092      	b.n	80041d8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d135      	bne.n	8004124 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80040bc:	461a      	mov	r2, r3
 80040be:	2100      	movs	r1, #0
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7fd fa2f 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80040cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f040 8081 	bne.w	80041d8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80040d6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80040da:	461a      	mov	r2, r3
 80040dc:	2100      	movs	r1, #0
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7fd fa20 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80040ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80040f2:	f107 031e 	add.w	r3, r7, #30
 80040f6:	461a      	mov	r2, r3
 80040f8:	2151      	movs	r1, #81	; 0x51
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7fc fd58 	bl	8000bb0 <VL53L0X_RdWord>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004106:	8bfb      	ldrh	r3, [r7, #30]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff22 	bl	8003f52 <VL53L0X_decode_timeout>
 800410e:	4603      	mov	r3, r0
 8004110:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004112:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004116:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f7ff ff5a 	bl	8003fd4 <VL53L0X_calc_timeout_us>
 8004120:	62b8      	str	r0, [r7, #40]	; 0x28
 8004122:	e059      	b.n	80041d8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004124:	7afb      	ldrb	r3, [r7, #11]
 8004126:	2b04      	cmp	r3, #4
 8004128:	d156      	bne.n	80041d8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800412a:	f107 0314 	add.w	r3, r7, #20
 800412e:	4619      	mov	r1, r3
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7fd fb03 	bl	800173c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d01d      	beq.n	800417c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004140:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004144:	461a      	mov	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7fd f9eb 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8004154:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10f      	bne.n	800417c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800415c:	f107 031e 	add.w	r3, r7, #30
 8004160:	461a      	mov	r2, r3
 8004162:	2151      	movs	r1, #81	; 0x51
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7fc fd23 	bl	8000bb0 <VL53L0X_RdWord>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004170:	8bfb      	ldrh	r3, [r7, #30]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff feed 	bl	8003f52 <VL53L0X_decode_timeout>
 8004178:	4603      	mov	r3, r0
 800417a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800417c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004184:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004188:	461a      	mov	r2, r3
 800418a:	2101      	movs	r1, #1
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7fd f9c9 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004198:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10f      	bne.n	80041c0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80041a0:	f107 031c 	add.w	r3, r7, #28
 80041a4:	461a      	mov	r2, r3
 80041a6:	2171      	movs	r1, #113	; 0x71
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7fc fd01 	bl	8000bb0 <VL53L0X_RdWord>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80041b4:	8bbb      	ldrh	r3, [r7, #28]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fecb 	bl	8003f52 <VL53L0X_decode_timeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80041c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80041c8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80041cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041ce:	4619      	mov	r1, r3
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff feff 	bl	8003fd4 <VL53L0X_calc_timeout_us>
 80041d6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041dc:	601a      	str	r2, [r3, #0]

	return Status;
 80041de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3730      	adds	r7, #48	; 0x30
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b08a      	sub	sp, #40	; 0x28
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	460b      	mov	r3, r1
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <set_sequence_step_timeout+0x26>
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d002      	beq.n	8004210 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d138      	bne.n	8004282 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004210:	f107 031b 	add.w	r3, r7, #27
 8004214:	461a      	mov	r2, r3
 8004216:	2100      	movs	r1, #0
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f7fd f983 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8004224:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004228:	2b00      	cmp	r3, #0
 800422a:	d11a      	bne.n	8004262 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800422c:	7efb      	ldrb	r3, [r7, #27]
 800422e:	461a      	mov	r2, r3
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff fea4 	bl	8003f80 <VL53L0X_calc_timeout_mclks>
 8004238:	4603      	mov	r3, r0
 800423a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800423c:	8bbb      	ldrh	r3, [r7, #28]
 800423e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004242:	d903      	bls.n	800424c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8004244:	23ff      	movs	r3, #255	; 0xff
 8004246:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800424a:	e004      	b.n	8004256 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800424c:	8bbb      	ldrh	r3, [r7, #28]
 800424e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8004250:	3b01      	subs	r3, #1
 8004252:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004262:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 80ab 	bne.w	80043c2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800426c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004270:	461a      	mov	r2, r3
 8004272:	2146      	movs	r1, #70	; 0x46
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7fc fbbd 	bl	80009f4 <VL53L0X_WrByte>
 800427a:	4603      	mov	r3, r0
 800427c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8004280:	e09f      	b.n	80043c2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004282:	7afb      	ldrb	r3, [r7, #11]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d135      	bne.n	80042f4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8004288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800428c:	2b00      	cmp	r3, #0
 800428e:	d11b      	bne.n	80042c8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004290:	f107 031b 	add.w	r3, r7, #27
 8004294:	461a      	mov	r2, r3
 8004296:	2100      	movs	r1, #0
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7fd f943 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 800429e:	4603      	mov	r3, r0
 80042a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80042a4:	7efb      	ldrb	r3, [r7, #27]
 80042a6:	461a      	mov	r2, r3
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f7ff fe68 	bl	8003f80 <VL53L0X_calc_timeout_mclks>
 80042b0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80042b2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80042b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fe1f 	bl	8003efa <VL53L0X_encode_timeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80042c0:	8b3a      	ldrh	r2, [r7, #24]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80042c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d108      	bne.n	80042e2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80042d0:	8b3b      	ldrh	r3, [r7, #24]
 80042d2:	461a      	mov	r2, r3
 80042d4:	2151      	movs	r1, #81	; 0x51
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7fc fbb0 	bl	8000a3c <VL53L0X_WrWord>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80042e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d16b      	bne.n	80043c2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80042f2:	e066      	b.n	80043c2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80042f4:	7afb      	ldrb	r3, [r7, #11]
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d160      	bne.n	80043bc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80042fa:	f107 0310 	add.w	r3, r7, #16
 80042fe:	4619      	mov	r1, r3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7fd fa1b 	bl	800173c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01d      	beq.n	800434c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004310:	f107 031b 	add.w	r3, r7, #27
 8004314:	461a      	mov	r2, r3
 8004316:	2100      	movs	r1, #0
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7fd f903 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8004324:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10f      	bne.n	800434c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800432c:	f107 0318 	add.w	r3, r7, #24
 8004330:	461a      	mov	r2, r3
 8004332:	2151      	movs	r1, #81	; 0x51
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fc fc3b 	bl	8000bb0 <VL53L0X_RdWord>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8004340:	8b3b      	ldrh	r3, [r7, #24]
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff fe05 	bl	8003f52 <VL53L0X_decode_timeout>
 8004348:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800434a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800434c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004354:	f107 031b 	add.w	r3, r7, #27
 8004358:	461a      	mov	r2, r3
 800435a:	2101      	movs	r1, #1
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fd f8e1 	bl	8001524 <VL53L0X_GetVcselPulsePeriod>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004368:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800436c:	2b00      	cmp	r3, #0
 800436e:	d128      	bne.n	80043c2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8004370:	7efb      	ldrb	r3, [r7, #27]
 8004372:	461a      	mov	r2, r3
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff fe02 	bl	8003f80 <VL53L0X_calc_timeout_mclks>
 800437c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800437e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	4413      	add	r3, r2
 8004384:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8004386:	6a38      	ldr	r0, [r7, #32]
 8004388:	f7ff fdb7 	bl	8003efa <VL53L0X_encode_timeout>
 800438c:	4603      	mov	r3, r0
 800438e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8004390:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004394:	2b00      	cmp	r3, #0
 8004396:	d108      	bne.n	80043aa <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8004398:	8bfb      	ldrh	r3, [r7, #30]
 800439a:	461a      	mov	r2, r3
 800439c:	2171      	movs	r1, #113	; 0x71
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7fc fb4c 	bl	8000a3c <VL53L0X_WrWord>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80043aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d107      	bne.n	80043c2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80043ba:	e002      	b.n	80043c2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80043bc:	23fc      	movs	r3, #252	; 0xfc
 80043be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80043c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3728      	adds	r7, #40	; 0x28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	460b      	mov	r3, r1
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043dc:	2300      	movs	r3, #0
 80043de:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80043e0:	7afb      	ldrb	r3, [r7, #11]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <VL53L0X_get_vcsel_pulse_period+0x1e>
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d00a      	beq.n	8004400 <VL53L0X_get_vcsel_pulse_period+0x32>
 80043ea:	e013      	b.n	8004414 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80043ec:	f107 0316 	add.w	r3, r7, #22
 80043f0:	461a      	mov	r2, r3
 80043f2:	2150      	movs	r1, #80	; 0x50
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7fc fbb1 	bl	8000b5c <VL53L0X_RdByte>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80043fe:	e00b      	b.n	8004418 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8004400:	f107 0316 	add.w	r3, r7, #22
 8004404:	461a      	mov	r2, r3
 8004406:	2170      	movs	r1, #112	; 0x70
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7fc fba7 	bl	8000b5c <VL53L0X_RdByte>
 800440e:	4603      	mov	r3, r0
 8004410:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8004412:	e001      	b.n	8004418 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004414:	23fc      	movs	r3, #252	; 0xfc
 8004416:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8004420:	7dbb      	ldrb	r3, [r7, #22]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fff4 	bl	8003410 <VL53L0X_decode_vcsel_period>
 8004428:	4603      	mov	r3, r0
 800442a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	701a      	strb	r2, [r3, #0]

	return Status;
 8004430:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b092      	sub	sp, #72	; 0x48
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800444c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004450:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004452:	f240 7376 	movw	r3, #1910	; 0x776
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8004458:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800445c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800445e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8004464:	f240 234e 	movw	r3, #590	; 0x24e
 8004468:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800446a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004470:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004476:	f240 2326 	movw	r3, #550	; 0x226
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800447c:	2300      	movs	r3, #0
 800447e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8004480:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004484:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	429a      	cmp	r2, r3
 8004490:	d205      	bcs.n	800449e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004492:	23fc      	movs	r3, #252	; 0xfc
 8004494:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8004498:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800449c:	e0aa      	b.n	80045f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800449e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	4619      	mov	r1, r3
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7fd f943 	bl	800173c <VL53L0X_GetSequenceStepEnables>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80044bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d15b      	bne.n	800457c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80044c4:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d105      	bne.n	80044d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80044ca:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80044d0:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d052      	beq.n	800457c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80044d6:	f107 0310 	add.w	r3, r7, #16
 80044da:	461a      	mov	r2, r3
 80044dc:	2102      	movs	r1, #2
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fda2 	bl	8004028 <get_sequence_step_timeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80044ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80044f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80044f6:	e07d      	b.n	80045f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80044f8:	7d3b      	ldrb	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00f      	beq.n	800451e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80044fe:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	4413      	add	r3, r2
 8004504:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450a:	429a      	cmp	r2, r3
 800450c:	d204      	bcs.n	8004518 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800450e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	643b      	str	r3, [r7, #64]	; 0x40
 8004516:	e002      	b.n	800451e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004518:	23fc      	movs	r3, #252	; 0xfc
 800451a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800451e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8004526:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800452a:	e063      	b.n	80045f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800452c:	7dbb      	ldrb	r3, [r7, #22]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d011      	beq.n	8004556 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	4413      	add	r3, r2
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004540:	429a      	cmp	r2, r3
 8004542:	d204      	bcs.n	800454e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8004544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	643b      	str	r3, [r7, #64]	; 0x40
 800454c:	e016      	b.n	800457c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800454e:	23fc      	movs	r3, #252	; 0xfc
 8004550:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8004554:	e012      	b.n	800457c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8004556:	7d7b      	ldrb	r3, [r7, #21]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00f      	beq.n	800457c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004560:	4413      	add	r3, r2
 8004562:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	429a      	cmp	r2, r3
 800456a:	d204      	bcs.n	8004576 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800456c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	643b      	str	r3, [r7, #64]	; 0x40
 8004574:	e002      	b.n	800457c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004576:	23fc      	movs	r3, #252	; 0xfc
 8004578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800457c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004584:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8004588:	e034      	b.n	80045f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d019      	beq.n	80045c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	461a      	mov	r2, r3
 8004596:	2103      	movs	r1, #3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff fd45 	bl	8004028 <get_sequence_step_timeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a8:	4413      	add	r3, r2
 80045aa:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d204      	bcs.n	80045be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80045b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	643b      	str	r3, [r7, #64]	; 0x40
 80045bc:	e002      	b.n	80045c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80045be:	23fc      	movs	r3, #252	; 0xfc
 80045c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80045c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80045cc:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00e      	beq.n	80045f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80045d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80045da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045dc:	2104      	movs	r1, #4
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fe03 	bl	80041ea <set_sequence_step_timeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80045f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3748      	adds	r7, #72	; 0x48
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b090      	sub	sp, #64	; 0x40
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004606:	2300      	movs	r3, #0
 8004608:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800460c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004610:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8004612:	f240 7376 	movw	r3, #1910	; 0x776
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8004618:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800461e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004622:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8004624:	f240 234e 	movw	r3, #590	; 0x24e
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800462a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8004630:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8004636:	f240 2326 	movw	r3, #550	; 0x226
 800463a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8004640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004644:	441a      	add	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800464a:	f107 0318 	add.w	r3, r7, #24
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fd f873 	bl	800173c <VL53L0X_GetSequenceStepEnables>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800465c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8004664:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004668:	e075      	b.n	8004756 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800466a:	7e3b      	ldrb	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d105      	bne.n	800467c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8004670:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8004676:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8004678:	2b00      	cmp	r3, #0
 800467a:	d030      	beq.n	80046de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800467c:	f107 0310 	add.w	r3, r7, #16
 8004680:	461a      	mov	r2, r3
 8004682:	2102      	movs	r1, #2
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff fccf 	bl	8004028 <get_sequence_step_timeout>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8004690:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004694:	2b00      	cmp	r3, #0
 8004696:	d122      	bne.n	80046de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8004698:	7e3b      	ldrb	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80046a2:	6939      	ldr	r1, [r7, #16]
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80046a8:	441a      	add	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80046ae:	7ebb      	ldrb	r3, [r7, #26]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80046b8:	6939      	ldr	r1, [r7, #16]
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	440b      	add	r3, r1
 80046be:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80046c0:	441a      	add	r2, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e00a      	b.n	80046de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80046c8:	7e7b      	ldrb	r3, [r7, #25]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80046d8:	441a      	add	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d114      	bne.n	8004710 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80046e6:	7efb      	ldrb	r3, [r7, #27]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80046ec:	f107 030c 	add.w	r3, r7, #12
 80046f0:	461a      	mov	r2, r3
 80046f2:	2103      	movs	r1, #3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff fc97 	bl	8004028 <get_sequence_step_timeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8004704:	68f9      	ldr	r1, [r7, #12]
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800470a:	441a      	add	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004710:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004714:	2b00      	cmp	r3, #0
 8004716:	d114      	bne.n	8004742 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8004718:	7f3b      	ldrb	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800471e:	f107 0314 	add.w	r3, r7, #20
 8004722:	461a      	mov	r2, r3
 8004724:	2104      	movs	r1, #4
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fc7e 	bl	8004028 <get_sequence_step_timeout>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8004736:	6979      	ldr	r1, [r7, #20]
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800473c:	441a      	add	r2, r3
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004742:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004752:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004756:	4618      	mov	r0, r3
 8004758:	3740      	adds	r7, #64	; 0x40
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800476a:	2300      	movs	r3, #0
 800476c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004772:	e0c6      	b.n	8004902 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	3301      	adds	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2bff      	cmp	r3, #255	; 0xff
 8004788:	f040 808d 	bne.w	80048a6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	4413      	add	r3, r2
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	747b      	strb	r3, [r7, #17]
			Index++;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	3301      	adds	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800479c:	7c7b      	ldrb	r3, [r7, #17]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d87e      	bhi.n	80048a0 <VL53L0X_load_tuning_settings+0x140>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <VL53L0X_load_tuning_settings+0x48>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047b9 	.word	0x080047b9
 80047ac:	080047f3 	.word	0x080047f3
 80047b0:	0800482d 	.word	0x0800482d
 80047b4:	08004867 	.word	0x08004867
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	743b      	strb	r3, [r7, #16]
				Index++;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	3301      	adds	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	3301      	adds	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80047d8:	7c3b      	ldrb	r3, [r7, #16]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	b29a      	uxth	r2, r3
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4413      	add	r3, r2
 80047e6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	89ba      	ldrh	r2, [r7, #12]
 80047ec:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80047f0:	e087      	b.n	8004902 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	743b      	strb	r3, [r7, #16]
				Index++;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	3301      	adds	r3, #1
 8004800:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	4413      	add	r3, r2
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3301      	adds	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004812:	7c3b      	ldrb	r3, [r7, #16]
 8004814:	b29b      	uxth	r3, r3
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	b29a      	uxth	r2, r3
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	b29b      	uxth	r3, r3
 800481e:	4413      	add	r3, r2
 8004820:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	89ba      	ldrh	r2, [r7, #12]
 8004826:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800482a:	e06a      	b.n	8004902 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	4413      	add	r3, r2
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	743b      	strb	r3, [r7, #16]
				Index++;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	3301      	adds	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800484c:	7c3b      	ldrb	r3, [r7, #16]
 800484e:	b29b      	uxth	r3, r3
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	b29a      	uxth	r2, r3
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	b29b      	uxth	r3, r3
 8004858:	4413      	add	r3, r2
 800485a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	89ba      	ldrh	r2, [r7, #12]
 8004860:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8004864:	e04d      	b.n	8004902 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	4413      	add	r3, r2
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	743b      	strb	r3, [r7, #16]
				Index++;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	3301      	adds	r3, #1
 8004874:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4413      	add	r3, r2
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	3301      	adds	r3, #1
 8004884:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8004886:	7c3b      	ldrb	r3, [r7, #16]
 8004888:	b29b      	uxth	r3, r3
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	b29a      	uxth	r2, r3
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	b29b      	uxth	r3, r3
 8004892:	4413      	add	r3, r2
 8004894:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	89ba      	ldrh	r2, [r7, #12]
 800489a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800489e:	e030      	b.n	8004902 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048a0:	23fc      	movs	r3, #252	; 0xfc
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e02d      	b.n	8004902 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d828      	bhi.n	80048fe <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	4413      	add	r3, r2
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	74bb      	strb	r3, [r7, #18]
			Index++;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	3301      	adds	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e00f      	b.n	80048e2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	7819      	ldrb	r1, [r3, #0]
 80048ca:	f107 0208 	add.w	r2, r7, #8
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	4413      	add	r3, r2
 80048d2:	460a      	mov	r2, r1
 80048d4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	3301      	adds	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3301      	adds	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	dbeb      	blt.n	80048c2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	f107 0208 	add.w	r2, r7, #8
 80048f0:	7cb9      	ldrb	r1, [r7, #18]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc f822 	bl	800093c <VL53L0X_WriteMulti>
 80048f8:	4603      	mov	r3, r0
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e001      	b.n	8004902 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80048fe:	23fc      	movs	r3, #252	; 0xfc
 8004900:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	4413      	add	r3, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d004      	beq.n	8004918 <VL53L0X_load_tuning_settings+0x1b8>
 800490e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f43f af2e 	beq.w	8004774 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004918:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004930:	2300      	movs	r3, #0
 8004932:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800493a:	f107 0313 	add.w	r3, r7, #19
 800493e:	4619      	mov	r1, r3
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f7fc ffbb 	bl	80018bc <VL53L0X_GetXTalkCompensationEnable>
 8004946:	4603      	mov	r3, r0
 8004948:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800494a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d111      	bne.n	8004976 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	8a9b      	ldrh	r3, [r3, #20]
 8004962:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3380      	adds	r3, #128	; 0x80
 8004970:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8004976:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800498e:	2300      	movs	r3, #0
 8004990:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800499a:	f107 0310 	add.w	r3, r7, #16
 800499e:	461a      	mov	r2, r3
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7ff ffbe 	bl	8004924 <VL53L0X_get_total_xtalk_rate>
 80049a8:	4603      	mov	r3, r0
 80049aa:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80049ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	441a      	add	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	601a      	str	r2, [r3, #0]

	return Status;
 80049c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b09a      	sub	sp, #104	; 0x68
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80049da:	2312      	movs	r3, #18
 80049dc:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80049de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049e2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80049e4:	2342      	movs	r3, #66	; 0x42
 80049e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80049e8:	2306      	movs	r3, #6
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80049ec:	2307      	movs	r3, #7
 80049ee:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004a04:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8004a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a12:	3380      	adds	r3, #128	; 0x80
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8004a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a1c:	fb02 f303 	mul.w	r3, r2, r3
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01a      	beq.n	8004a62 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	029b      	lsls	r3, r3, #10
 8004a30:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8004a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a38:	4413      	add	r3, r2
 8004a3a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8004a3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8004a46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8004a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a52:	fb03 f303 	mul.w	r3, r3, r3
 8004a56:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8004a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	fb03 f303 	mul.w	r3, r3, r3
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8004a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004a84:	0c1b      	lsrs	r3, r3, #16
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	085a      	lsrs	r2, r3, #1
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	441a      	add	r2, r3
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d302      	bcc.n	8004ab0 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <VL53L0X_calc_dmax+0x230>)
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
 8004aae:	e015      	b.n	8004adc <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8004ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab2:	085a      	lsrs	r2, r3, #1
 8004ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab6:	441a      	add	r2, r3
 8004ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8004ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8004aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004acc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8004ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad6:	fb03 f303 	mul.w	r3, r3, r3
 8004ada:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8004adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ade:	039b      	lsls	r3, r3, #14
 8004ae0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004ae4:	4a46      	ldr	r2, [pc, #280]	; (8004c00 <VL53L0X_calc_dmax+0x234>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	099b      	lsrs	r3, r3, #6
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	fb03 f303 	mul.w	r3, r3, r3
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8004af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af8:	fb03 f303 	mul.w	r3, r3, r3
 8004afc:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	3308      	adds	r3, #8
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	4613      	mov	r3, r2
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	4413      	add	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004b20:	0b9b      	lsrs	r3, r3, #14
 8004b22:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8004b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b28:	4413      	add	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8004b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4413      	add	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	039b      	lsls	r3, r3, #14
 8004b44:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004b6a:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <VL53L0X_calc_dmax+0x234>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004b80:	4a1f      	ldr	r2, [pc, #124]	; (8004c00 <VL53L0X_calc_dmax+0x234>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8004b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8c:	3380      	adds	r3, #128	; 0x80
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	085a      	lsrs	r2, r3, #1
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	441a      	add	r2, r3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ba8:	e001      	b.n	8004bae <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8004bae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004bb0:	f7fe fc41 	bl	8003436 <VL53L0X_isqrt>
 8004bb4:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	085a      	lsrs	r2, r3, #1
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	441a      	add	r2, r3
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bcc:	e001      	b.n	8004bd2 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8004bd2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004bd4:	f7fe fc2f 	bl	8003436 <VL53L0X_isqrt>
 8004bd8:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8004bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d902      	bls.n	8004bee <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8004be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bec:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8004bee:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3768      	adds	r7, #104	; 0x68
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	fff00000 	.word	0xfff00000
 8004c00:	10624dd3 	.word	0x10624dd3

08004c04 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b0b4      	sub	sp, #208	; 0xd0
 8004c08:	af04      	add	r7, sp, #16
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8004c12:	f44f 7348 	mov.w	r3, #800	; 0x320
 8004c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8004c1a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8004c22:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8004c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8004c2a:	f241 235c 	movw	r3, #4700	; 0x125c
 8004c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8004c32:	4b9e      	ldr	r3, [pc, #632]	; (8004eac <VL53L0X_calc_sigma_estimate+0x2a8>)
 8004c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8004c38:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8004c3e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8004c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8004c4c:	4b98      	ldr	r3, [pc, #608]	; (8004eb0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8004c4e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8004c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c54:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8004c56:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8004c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8004c5c:	f240 6377 	movw	r3, #1655	; 0x677
 8004c60:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	461a      	mov	r2, r3
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff fe78 	bl	8004982 <VL53L0X_get_total_signal_rate>
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fe3f 	bl	8004924 <VL53L0X_get_total_xtalk_rate>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8004cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004cbe:	0c1b      	lsrs	r3, r3, #16
 8004cc0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8004cd0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d902      	bls.n	8004ce0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8004ce0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d168      	bne.n	8004dba <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004cf8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8004cfc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004d00:	461a      	mov	r2, r3
 8004d02:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff f93a 	bl	8003f80 <VL53L0X_calc_timeout_mclks>
 8004d0c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8004d1e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8004d22:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff f927 	bl	8003f80 <VL53L0X_calc_timeout_mclks>
 8004d32:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8004d34:	2303      	movs	r3, #3
 8004d36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8004d3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d102      	bne.n	8004d48 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8004d42:	2302      	movs	r3, #2
 8004d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8004d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8004d4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	02db      	lsls	r3, r3, #11
 8004d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8004d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d64:	4a53      	ldr	r2, [pc, #332]	; (8004eb4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	099b      	lsrs	r3, r3, #6
 8004d6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8004d70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8004d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004d86:	4a4b      	ldr	r2, [pc, #300]	; (8004eb4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	099b      	lsrs	r3, r3, #6
 8004d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3380      	adds	r3, #128	; 0x80
 8004d96:	0a1b      	lsrs	r3, r3, #8
 8004d98:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004da0:	fb02 f303 	mul.w	r3, r2, r3
 8004da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8004da8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dac:	3380      	adds	r3, #128	; 0x80
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8004dba:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8004dc2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8004dc6:	e15e      	b.n	8005086 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8004dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10c      	bne.n	8004de8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dd4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ddc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	e14c      	b.n	8005082 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8004de8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8004df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dfa:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8004dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dfe:	041a      	lsls	r2, r3, #16
 8004e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8004e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d902      	bls.n	8004e1a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8004e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8004e1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004e1e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8004e2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe fafd 	bl	8003436 <VL53L0X_isqrt>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	891b      	ldrh	r3, [r3, #8]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e52:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8004e54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e58:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004e5a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8004e5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8004e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004e72:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	099b      	lsrs	r3, r3, #6
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8004e82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfb8      	it	lt
 8004e8e:	425b      	neglt	r3, r3
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8004e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e94:	021b      	lsls	r3, r3, #8
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	7e1b      	ldrb	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8004ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ea8:	e033      	b.n	8004f12 <VL53L0X_calc_sigma_estimate+0x30e>
 8004eaa:	bf00      	nop
 8004eac:	028f87ae 	.word	0x028f87ae
 8004eb0:	0006999a 	.word	0x0006999a
 8004eb4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8004eb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8004ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ed0:	fb02 f303 	mul.w	r3, r2, r3
 8004ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8004ed8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ede:	4413      	add	r3, r2
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8004ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8004ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8004efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f00:	fb03 f303 	mul.w	r3, r3, r3
 8004f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8004f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f0c:	0b9b      	lsrs	r3, r3, #14
 8004f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8004f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f18:	fb02 f303 	mul.w	r3, r2, r3
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	fb03 f303 	mul.w	r3, r3, r3
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8004f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	fb03 f303 	mul.w	r3, r3, r3
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8004f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	4413      	add	r3, r2
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8004f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f52:	f7fe fa70 	bl	8003436 <VL53L0X_isqrt>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	3332      	adds	r3, #50	; 0x32
 8004f62:	4a4b      	ldr	r2, [pc, #300]	; (8005090 <VL53L0X_calc_sigma_estimate+0x48c>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095a      	lsrs	r2, r3, #5
 8004f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8004f74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f78:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8004f7c:	fb02 f303 	mul.w	r3, r2, r3
 8004f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8004f84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f88:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8004f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f96:	4a3f      	ldr	r2, [pc, #252]	; (8005094 <VL53L0X_calc_sigma_estimate+0x490>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	0b5b      	lsrs	r3, r3, #13
 8004f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8004fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d902      	bls.n	8004fb2 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8004fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8004fb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8004fc0:	4a35      	ldr	r2, [pc, #212]	; (8005098 <VL53L0X_calc_sigma_estimate+0x494>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8004fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd2:	441a      	add	r2, r3
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fa2b 	bl	8003436 <VL53L0X_isqrt>
 8004fe0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <VL53L0X_calc_sigma_estimate+0x494>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8004ff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ffc:	fb03 f303 	mul.w	r3, r3, r3
 8005000:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	fb03 f303 	mul.w	r3, r3, r3
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800500a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500e:	4413      	add	r3, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fa10 	bl	8003436 <VL53L0X_isqrt>
 8005016:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800501e:	fb02 f303 	mul.w	r3, r2, r3
 8005022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8005026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d009      	beq.n	8005040 <VL53L0X_calc_sigma_estimate+0x43c>
 800502c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <VL53L0X_calc_sigma_estimate+0x43c>
 8005034:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800503c:	429a      	cmp	r2, r3
 800503e:	d903      	bls.n	8005048 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8005040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800504e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800505a:	6939      	ldr	r1, [r7, #16]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005064:	9302      	str	r3, [sp, #8]
 8005066:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fca8 	bl	80049cc <VL53L0X_calc_dmax>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005082:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8005086:	4618      	mov	r0, r3
 8005088:	37c0      	adds	r7, #192	; 0xc0
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	51eb851f 	.word	0x51eb851f
 8005094:	d1b71759 	.word	0xd1b71759
 8005098:	10624dd3 	.word	0x10624dd3

0800509c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b090      	sub	sp, #64	; 0x40
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	461a      	mov	r2, r3
 80050a8:	460b      	mov	r3, r1
 80050aa:	72fb      	strb	r3, [r7, #11]
 80050ac:	4613      	mov	r3, r2
 80050ae:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	10db      	asrs	r3, r3, #3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80050fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d017      	beq.n	8005134 <VL53L0X_get_pal_range_status+0x98>
 8005104:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005108:	2b05      	cmp	r3, #5
 800510a:	d013      	beq.n	8005134 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800510c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005110:	2b07      	cmp	r3, #7
 8005112:	d00f      	beq.n	8005134 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8005114:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005118:	2b0c      	cmp	r3, #12
 800511a:	d00b      	beq.n	8005134 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800511c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005120:	2b0d      	cmp	r3, #13
 8005122:	d007      	beq.n	8005134 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8005124:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005128:	2b0e      	cmp	r3, #14
 800512a:	d003      	beq.n	8005134 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800512c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005130:	2b0f      	cmp	r3, #15
 8005132:	d103      	bne.n	800513c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800513a:	e002      	b.n	8005142 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005142:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800514a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800514e:	461a      	mov	r2, r3
 8005150:	2100      	movs	r1, #0
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7fc fc86 	bl	8001a64 <VL53L0X_GetLimitCheckEnable>
 8005158:	4603      	mov	r3, r0
 800515a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800515e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005162:	2b00      	cmp	r3, #0
 8005164:	d02e      	beq.n	80051c4 <VL53L0X_get_pal_range_status+0x128>
 8005166:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800516a:	2b00      	cmp	r3, #0
 800516c:	d12a      	bne.n	80051c4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800516e:	f107 0310 	add.w	r3, r7, #16
 8005172:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005176:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff fd43 	bl	8004c04 <VL53L0X_calc_sigma_estimate>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8005184:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005188:	2b00      	cmp	r3, #0
 800518a:	d103      	bne.n	8005194 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	b29a      	uxth	r2, r3
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8005194:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005198:	2b00      	cmp	r3, #0
 800519a:	d113      	bne.n	80051c4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800519c:	f107 0320 	add.w	r3, r7, #32
 80051a0:	461a      	mov	r2, r3
 80051a2:	2100      	movs	r1, #0
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f7fc fce3 	bl	8001b70 <VL53L0X_GetLimitCheckValue>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d902      	bls.n	80051c4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80051be:	2301      	movs	r3, #1
 80051c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80051c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80051cc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80051d0:	461a      	mov	r2, r3
 80051d2:	2102      	movs	r1, #2
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7fc fc45 	bl	8001a64 <VL53L0X_GetLimitCheckEnable>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80051e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d044      	beq.n	8005272 <VL53L0X_get_pal_range_status+0x1d6>
 80051e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d140      	bne.n	8005272 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80051f0:	f107 031c 	add.w	r3, r7, #28
 80051f4:	461a      	mov	r2, r3
 80051f6:	2102      	movs	r1, #2
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7fc fcb9 	bl	8001b70 <VL53L0X_GetLimitCheckValue>
 80051fe:	4603      	mov	r3, r0
 8005200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8005204:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005208:	2b00      	cmp	r3, #0
 800520a:	d107      	bne.n	800521c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800520c:	2201      	movs	r2, #1
 800520e:	21ff      	movs	r1, #255	; 0xff
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7fb fbef 	bl	80009f4 <VL53L0X_WrByte>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800521c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8005224:	f107 0316 	add.w	r3, r7, #22
 8005228:	461a      	mov	r2, r3
 800522a:	21b6      	movs	r1, #182	; 0xb6
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7fb fcbf 	bl	8000bb0 <VL53L0X_RdWord>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8005238:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800523c:	2b00      	cmp	r3, #0
 800523e:	d107      	bne.n	8005250 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005240:	2200      	movs	r2, #0
 8005242:	21ff      	movs	r1, #255	; 0xff
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f7fb fbd5 	bl	80009f4 <VL53L0X_WrByte>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8005250:	8afb      	ldrh	r3, [r7, #22]
 8005252:	025b      	lsls	r3, r3, #9
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800525a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d006      	beq.n	8005272 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8005264:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8005266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d902      	bls.n	8005272 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005272:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800527a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800527e:	461a      	mov	r2, r3
 8005280:	2103      	movs	r1, #3
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7fc fbee 	bl	8001a64 <VL53L0X_GetLimitCheckEnable>
 8005288:	4603      	mov	r3, r0
 800528a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800528e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d023      	beq.n	80052de <VL53L0X_get_pal_range_status+0x242>
 8005296:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11f      	bne.n	80052de <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800529e:	893b      	ldrh	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
 80052a8:	e005      	b.n	80052b6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	021a      	lsls	r2, r3, #8
 80052ae:	893b      	ldrh	r3, [r7, #8]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80052b6:	f107 0318 	add.w	r3, r7, #24
 80052ba:	461a      	mov	r2, r3
 80052bc:	2103      	movs	r1, #3
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7fc fc56 	bl	8001b70 <VL53L0X_GetLimitCheckValue>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80052d0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80052d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d202      	bcs.n	80052de <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80052de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d14a      	bne.n	800537c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80052e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d103      	bne.n	80052f6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80052ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e042      	b.n	800537c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80052f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d007      	beq.n	800530e <VL53L0X_get_pal_range_status+0x272>
 80052fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005302:	2b02      	cmp	r3, #2
 8005304:	d003      	beq.n	800530e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8005306:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800530a:	2b03      	cmp	r3, #3
 800530c:	d103      	bne.n	8005316 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005310:	2205      	movs	r2, #5
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e032      	b.n	800537c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8005316:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800531a:	2b06      	cmp	r3, #6
 800531c:	d003      	beq.n	8005326 <VL53L0X_get_pal_range_status+0x28a>
 800531e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005322:	2b09      	cmp	r3, #9
 8005324:	d103      	bne.n	800532e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	2204      	movs	r2, #4
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e026      	b.n	800537c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800532e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005332:	2b08      	cmp	r3, #8
 8005334:	d007      	beq.n	8005346 <VL53L0X_get_pal_range_status+0x2aa>
 8005336:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800533a:	2b0a      	cmp	r3, #10
 800533c:	d003      	beq.n	8005346 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800533e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005342:	2b01      	cmp	r3, #1
 8005344:	d103      	bne.n	800534e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	2203      	movs	r2, #3
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e016      	b.n	800537c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800534e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005352:	2b04      	cmp	r3, #4
 8005354:	d003      	beq.n	800535e <VL53L0X_get_pal_range_status+0x2c2>
 8005356:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800535a:	2b01      	cmp	r3, #1
 800535c:	d103      	bne.n	8005366 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800535e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005360:	2202      	movs	r2, #2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e00a      	b.n	800537c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8005366:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800536a:	2b01      	cmp	r3, #1
 800536c:	d103      	bne.n	8005376 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e002      	b.n	800537c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8005376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800537c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8005384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005386:	2200      	movs	r2, #0
 8005388:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800538a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800538e:	461a      	mov	r2, r3
 8005390:	2101      	movs	r1, #1
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7fc fb66 	bl	8001a64 <VL53L0X_GetLimitCheckEnable>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800539e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d14f      	bne.n	8005446 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80053a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <VL53L0X_get_pal_range_status+0x31a>
 80053ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d103      	bne.n	80053be <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053bc:	e002      	b.n	80053c4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80053ca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80053ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d003      	beq.n	80053de <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80053d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e4:	e002      	b.n	80053ec <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80053f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80053f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <VL53L0X_get_pal_range_status+0x36a>
 80053fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d103      	bne.n	800540e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540c:	e002      	b.n	8005414 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800541a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800541e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <VL53L0X_get_pal_range_status+0x392>
 8005426:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800542a:	2b01      	cmp	r3, #1
 800542c:	d103      	bne.n	8005436 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005434:	e002      	b.n	800543c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8005442:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005446:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800544a:	4618      	mov	r0, r3
 800544c:	3740      	adds	r7, #64	; 0x40
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_Init+0x28>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a07      	ldr	r2, [pc, #28]	; (800547c <HAL_Init+0x28>)
 800545e:	f043 0310 	orr.w	r3, r3, #16
 8005462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005464:	2003      	movs	r0, #3
 8005466:	f000 f931 	bl	80056cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800546a:	2000      	movs	r0, #0
 800546c:	f000 f808 	bl	8005480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005470:	f7fb f8da 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40022000 	.word	0x40022000

08005480 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005488:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_InitTick+0x54>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_InitTick+0x58>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005496:	fbb3 f3f1 	udiv	r3, r3, r1
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f93b 	bl	800571a <HAL_SYSTICK_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e00e      	b.n	80054cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d80a      	bhi.n	80054ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054b4:	2200      	movs	r2, #0
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054bc:	f000 f911 	bl	80056e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054c0:	4a06      	ldr	r2, [pc, #24]	; (80054dc <HAL_InitTick+0x5c>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20000190 	.word	0x20000190
 80054d8:	20000454 	.word	0x20000454
 80054dc:	20000450 	.word	0x20000450

080054e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <HAL_IncTick+0x20>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <HAL_IncTick+0x24>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4413      	add	r3, r2
 80054f0:	4a04      	ldr	r2, [pc, #16]	; (8005504 <HAL_IncTick+0x24>)
 80054f2:	6013      	str	r3, [r2, #0]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000454 	.word	0x20000454
 8005504:	20000570 	.word	0x20000570

08005508 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return uwTick;  
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <HAL_GetTick+0x14>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20000570 	.word	0x20000570

08005520 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005528:	f7ff ffee 	bl	8005508 <HAL_GetTick>
 800552c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005538:	d005      	beq.n	8005546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <HAL_Delay+0x44>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005546:	bf00      	nop
 8005548:	f7ff ffde 	bl	8005508 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d8f7      	bhi.n	8005548 <HAL_Delay+0x28>
  {
  }
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000454 	.word	0x20000454

08005568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005578:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <__NVIC_SetPriorityGrouping+0x44>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005584:	4013      	ands	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800559a:	4a04      	ldr	r2, [pc, #16]	; (80055ac <__NVIC_SetPriorityGrouping+0x44>)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	60d3      	str	r3, [r2, #12]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	e000ed00 	.word	0xe000ed00

080055b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <__NVIC_GetPriorityGrouping+0x18>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f003 0307 	and.w	r3, r3, #7
}
 80055be:	4618      	mov	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	e000ed00 	.word	0xe000ed00

080055cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	6039      	str	r1, [r7, #0]
 80055d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	db0a      	blt.n	80055f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	490c      	ldr	r1, [pc, #48]	; (8005618 <__NVIC_SetPriority+0x4c>)
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	0112      	lsls	r2, r2, #4
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	440b      	add	r3, r1
 80055f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055f4:	e00a      	b.n	800560c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	4908      	ldr	r1, [pc, #32]	; (800561c <__NVIC_SetPriority+0x50>)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	3b04      	subs	r3, #4
 8005604:	0112      	lsls	r2, r2, #4
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	440b      	add	r3, r1
 800560a:	761a      	strb	r2, [r3, #24]
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	e000e100 	.word	0xe000e100
 800561c:	e000ed00 	.word	0xe000ed00

08005620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005620:	b480      	push	{r7}
 8005622:	b089      	sub	sp, #36	; 0x24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f1c3 0307 	rsb	r3, r3, #7
 800563a:	2b04      	cmp	r3, #4
 800563c:	bf28      	it	cs
 800563e:	2304      	movcs	r3, #4
 8005640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	3304      	adds	r3, #4
 8005646:	2b06      	cmp	r3, #6
 8005648:	d902      	bls.n	8005650 <NVIC_EncodePriority+0x30>
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	3b03      	subs	r3, #3
 800564e:	e000      	b.n	8005652 <NVIC_EncodePriority+0x32>
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	43da      	mvns	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	401a      	ands	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005668:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	fa01 f303 	lsl.w	r3, r1, r3
 8005672:	43d9      	mvns	r1, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005678:	4313      	orrs	r3, r2
         );
}
 800567a:	4618      	mov	r0, r3
 800567c:	3724      	adds	r7, #36	; 0x24
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3b01      	subs	r3, #1
 8005694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005698:	d301      	bcc.n	800569e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800569a:	2301      	movs	r3, #1
 800569c:	e00f      	b.n	80056be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800569e:	4a0a      	ldr	r2, [pc, #40]	; (80056c8 <SysTick_Config+0x40>)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056a6:	210f      	movs	r1, #15
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ac:	f7ff ff8e 	bl	80055cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <SysTick_Config+0x40>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056b6:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <SysTick_Config+0x40>)
 80056b8:	2207      	movs	r2, #7
 80056ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	e000e010 	.word	0xe000e010

080056cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff ff47 	bl	8005568 <__NVIC_SetPriorityGrouping>
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	4603      	mov	r3, r0
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056f4:	f7ff ff5c 	bl	80055b0 <__NVIC_GetPriorityGrouping>
 80056f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7ff ff8e 	bl	8005620 <NVIC_EncodePriority>
 8005704:	4602      	mov	r2, r0
 8005706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff5d 	bl	80055cc <__NVIC_SetPriority>
}
 8005712:	bf00      	nop
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ffb0 	bl	8005688 <SysTick_Config>
 8005728:	4603      	mov	r3, r0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005742:	e154      	b.n	80059ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	2101      	movs	r1, #1
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	4013      	ands	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8146 	beq.w	80059e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	2b01      	cmp	r3, #1
 8005766:	d005      	beq.n	8005774 <HAL_GPIO_Init+0x40>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d130      	bne.n	80057d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	2203      	movs	r2, #3
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4013      	ands	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057aa:	2201      	movs	r2, #1
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43db      	mvns	r3, r3
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4013      	ands	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	f003 0201 	and.w	r2, r3, #1
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d017      	beq.n	8005812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	2203      	movs	r2, #3
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d123      	bne.n	8005866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	08da      	lsrs	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3208      	adds	r2, #8
 8005826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	220f      	movs	r2, #15
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	08da      	lsrs	r2, r3, #3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3208      	adds	r2, #8
 8005860:	6939      	ldr	r1, [r7, #16]
 8005862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	2203      	movs	r2, #3
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4013      	ands	r3, r2
 800587c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f003 0203 	and.w	r2, r3, #3
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80a0 	beq.w	80059e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a8:	4b58      	ldr	r3, [pc, #352]	; (8005a0c <HAL_GPIO_Init+0x2d8>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4a57      	ldr	r2, [pc, #348]	; (8005a0c <HAL_GPIO_Init+0x2d8>)
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	6193      	str	r3, [r2, #24]
 80058b4:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <HAL_GPIO_Init+0x2d8>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	60bb      	str	r3, [r7, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80058c0:	4a53      	ldr	r2, [pc, #332]	; (8005a10 <HAL_GPIO_Init+0x2dc>)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	089b      	lsrs	r3, r3, #2
 80058c6:	3302      	adds	r3, #2
 80058c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	220f      	movs	r2, #15
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43db      	mvns	r3, r3
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4013      	ands	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80058ea:	d019      	beq.n	8005920 <HAL_GPIO_Init+0x1ec>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a49      	ldr	r2, [pc, #292]	; (8005a14 <HAL_GPIO_Init+0x2e0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_GPIO_Init+0x1e8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a48      	ldr	r2, [pc, #288]	; (8005a18 <HAL_GPIO_Init+0x2e4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00d      	beq.n	8005918 <HAL_GPIO_Init+0x1e4>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a47      	ldr	r2, [pc, #284]	; (8005a1c <HAL_GPIO_Init+0x2e8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d007      	beq.n	8005914 <HAL_GPIO_Init+0x1e0>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a46      	ldr	r2, [pc, #280]	; (8005a20 <HAL_GPIO_Init+0x2ec>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d101      	bne.n	8005910 <HAL_GPIO_Init+0x1dc>
 800590c:	2304      	movs	r3, #4
 800590e:	e008      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 8005910:	2305      	movs	r3, #5
 8005912:	e006      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 8005914:	2303      	movs	r3, #3
 8005916:	e004      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 8005918:	2302      	movs	r3, #2
 800591a:	e002      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <HAL_GPIO_Init+0x1ee>
 8005920:	2300      	movs	r3, #0
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	f002 0203 	and.w	r2, r2, #3
 8005928:	0092      	lsls	r2, r2, #2
 800592a:	4093      	lsls	r3, r2
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005932:	4937      	ldr	r1, [pc, #220]	; (8005a10 <HAL_GPIO_Init+0x2dc>)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	3302      	adds	r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005940:	4b38      	ldr	r3, [pc, #224]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	43db      	mvns	r3, r3
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4013      	ands	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005964:	4a2f      	ldr	r2, [pc, #188]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800596a:	4b2e      	ldr	r3, [pc, #184]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	43db      	mvns	r3, r3
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4013      	ands	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800598e:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	43db      	mvns	r3, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059b8:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	43db      	mvns	r3, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059e2:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <HAL_GPIO_Init+0x2f0>)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	3301      	adds	r3, #1
 80059ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f47f aea3 	bne.w	8005744 <HAL_GPIO_Init+0x10>
  }
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40010000 	.word	0x40010000
 8005a14:	48000400 	.word	0x48000400
 8005a18:	48000800 	.word	0x48000800
 8005a1c:	48000c00 	.word	0x48000c00
 8005a20:	48001000 	.word	0x48001000
 8005a24:	40010400 	.word	0x40010400

08005a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	807b      	strh	r3, [r7, #2]
 8005a34:	4613      	mov	r3, r2
 8005a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a38:	787b      	ldrb	r3, [r7, #1]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a3e:	887a      	ldrh	r2, [r7, #2]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a44:	e002      	b.n	8005a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a46:	887a      	ldrh	r2, [r7, #2]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e081      	b.n	8005b6e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fa fdf6 	bl	8000670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2224      	movs	r2, #36	; 0x24
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0201 	bic.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005aa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ab8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d107      	bne.n	8005ad2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	e006      	b.n	8005ae0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ade:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d104      	bne.n	8005af2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005af0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69d9      	ldr	r1, [r3, #28]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	460b      	mov	r3, r1
 8005b86:	817b      	strh	r3, [r7, #10]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	f040 80da 	bne.w	8005d4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_I2C_Master_Transmit+0x30>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e0d3      	b.n	8005d50 <HAL_I2C_Master_Transmit+0x1d8>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bb0:	f7ff fcaa 	bl	8005508 <HAL_GetTick>
 8005bb4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	2319      	movs	r3, #25
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fb54 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e0be      	b.n	8005d50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2221      	movs	r2, #33	; 0x21
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2210      	movs	r2, #16
 8005bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	893a      	ldrh	r2, [r7, #8]
 8005bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2bff      	cmp	r3, #255	; 0xff
 8005c02:	d90e      	bls.n	8005c22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	8979      	ldrh	r1, [r7, #10]
 8005c12:	4b51      	ldr	r3, [pc, #324]	; (8005d58 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fcc6 	bl	80065ac <I2C_TransferConfig>
 8005c20:	e06c      	b.n	8005cfc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	8979      	ldrh	r1, [r7, #10]
 8005c34:	4b48      	ldr	r3, [pc, #288]	; (8005d58 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 fcb5 	bl	80065ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c42:	e05b      	b.n	8005cfc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	6a39      	ldr	r1, [r7, #32]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 fb51 	bl	80062f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e07b      	b.n	8005d50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d034      	beq.n	8005cfc <HAL_I2C_Master_Transmit+0x184>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d130      	bne.n	8005cfc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2180      	movs	r1, #128	; 0x80
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fae3 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e04d      	b.n	8005d50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2bff      	cmp	r3, #255	; 0xff
 8005cbc:	d90e      	bls.n	8005cdc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	22ff      	movs	r2, #255	; 0xff
 8005cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	8979      	ldrh	r1, [r7, #10]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fc69 	bl	80065ac <I2C_TransferConfig>
 8005cda:	e00f      	b.n	8005cfc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	8979      	ldrh	r1, [r7, #10]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fc58 	bl	80065ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d19e      	bne.n	8005c44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	6a39      	ldr	r1, [r7, #32]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 fb30 	bl	8006370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e01a      	b.n	8005d50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <HAL_I2C_Master_Transmit+0x1e4>)
 8005d2e:	400b      	ands	r3, r1
 8005d30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e000      	b.n	8005d50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
  }
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	80002000 	.word	0x80002000
 8005d5c:	fe00e800 	.word	0xfe00e800

08005d60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	817b      	strh	r3, [r7, #10]
 8005d70:	4613      	mov	r3, r2
 8005d72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	f040 80db 	bne.w	8005f38 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_I2C_Master_Receive+0x30>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e0d4      	b.n	8005f3a <HAL_I2C_Master_Receive+0x1da>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d98:	f7ff fbb6 	bl	8005508 <HAL_GetTick>
 8005d9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	2319      	movs	r3, #25
 8005da4:	2201      	movs	r2, #1
 8005da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fa60 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e0bf      	b.n	8005f3a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2222      	movs	r2, #34	; 0x22
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	893a      	ldrh	r2, [r7, #8]
 8005dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2bff      	cmp	r3, #255	; 0xff
 8005dea:	d90e      	bls.n	8005e0a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	22ff      	movs	r2, #255	; 0xff
 8005df0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	8979      	ldrh	r1, [r7, #10]
 8005dfa:	4b52      	ldr	r3, [pc, #328]	; (8005f44 <HAL_I2C_Master_Receive+0x1e4>)
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fbd2 	bl	80065ac <I2C_TransferConfig>
 8005e08:	e06d      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	8979      	ldrh	r1, [r7, #10]
 8005e1c:	4b49      	ldr	r3, [pc, #292]	; (8005f44 <HAL_I2C_Master_Receive+0x1e4>)
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fbc1 	bl	80065ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005e2a:	e05c      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	6a39      	ldr	r1, [r7, #32]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fad9 	bl	80063e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e07c      	b.n	8005f3a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d034      	beq.n	8005ee6 <HAL_I2C_Master_Receive+0x186>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d130      	bne.n	8005ee6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f9ee 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e04d      	b.n	8005f3a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2bff      	cmp	r3, #255	; 0xff
 8005ea6:	d90e      	bls.n	8005ec6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	22ff      	movs	r2, #255	; 0xff
 8005eac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	8979      	ldrh	r1, [r7, #10]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 fb74 	bl	80065ac <I2C_TransferConfig>
 8005ec4:	e00f      	b.n	8005ee6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	8979      	ldrh	r1, [r7, #10]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fb63 	bl	80065ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d19d      	bne.n	8005e2c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	6a39      	ldr	r1, [r7, #32]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fa3b 	bl	8006370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e01a      	b.n	8005f3a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <HAL_I2C_Master_Receive+0x1e8>)
 8005f18:	400b      	ands	r3, r1
 8005f1a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e000      	b.n	8005f3a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f38:	2302      	movs	r3, #2
  }
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	80002400 	.word	0x80002400
 8005f48:	fe00e800 	.word	0xfe00e800

08005f4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	4608      	mov	r0, r1
 8005f56:	4611      	mov	r1, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	817b      	strh	r3, [r7, #10]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	813b      	strh	r3, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	f040 80fd 	bne.w	800616e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_I2C_Mem_Read+0x34>
 8005f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0f1      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_I2C_Mem_Read+0x4e>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e0ea      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fa2:	f7ff fab1 	bl	8005508 <HAL_GetTick>
 8005fa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2319      	movs	r3, #25
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f95b 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0d5      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2222      	movs	r2, #34	; 0x22
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2240      	movs	r2, #64	; 0x40
 8005fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a3a      	ldr	r2, [r7, #32]
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fec:	88f8      	ldrh	r0, [r7, #6]
 8005fee:	893a      	ldrh	r2, [r7, #8]
 8005ff0:	8979      	ldrh	r1, [r7, #10]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f8bf 	bl	8006180 <I2C_RequestMemoryRead>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e0ad      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006018:	b29b      	uxth	r3, r3
 800601a:	2bff      	cmp	r3, #255	; 0xff
 800601c:	d90e      	bls.n	800603c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	22ff      	movs	r2, #255	; 0xff
 8006022:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006028:	b2da      	uxtb	r2, r3
 800602a:	8979      	ldrh	r1, [r7, #10]
 800602c:	4b52      	ldr	r3, [pc, #328]	; (8006178 <HAL_I2C_Mem_Read+0x22c>)
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 fab9 	bl	80065ac <I2C_TransferConfig>
 800603a:	e00f      	b.n	800605c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006040:	b29a      	uxth	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604a:	b2da      	uxtb	r2, r3
 800604c:	8979      	ldrh	r1, [r7, #10]
 800604e:	4b4a      	ldr	r3, [pc, #296]	; (8006178 <HAL_I2C_Mem_Read+0x22c>)
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 faa8 	bl	80065ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	2200      	movs	r2, #0
 8006064:	2104      	movs	r1, #4
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f902 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07c      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d034      	beq.n	800611c <HAL_I2C_Mem_Read+0x1d0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d130      	bne.n	800611c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c0:	2200      	movs	r2, #0
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f8d3 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e04d      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2bff      	cmp	r3, #255	; 0xff
 80060dc:	d90e      	bls.n	80060fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	22ff      	movs	r2, #255	; 0xff
 80060e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	8979      	ldrh	r1, [r7, #10]
 80060ec:	2300      	movs	r3, #0
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fa59 	bl	80065ac <I2C_TransferConfig>
 80060fa:	e00f      	b.n	800611c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610a:	b2da      	uxtb	r2, r3
 800610c:	8979      	ldrh	r1, [r7, #10]
 800610e:	2300      	movs	r3, #0
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fa48 	bl	80065ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d19a      	bne.n	800605c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f920 	bl	8006370 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e01a      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2220      	movs	r2, #32
 8006140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6859      	ldr	r1, [r3, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_I2C_Mem_Read+0x230>)
 800614e:	400b      	ands	r3, r1
 8006150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	e000      	b.n	8006170 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800616e:	2302      	movs	r3, #2
  }
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	80002400 	.word	0x80002400
 800617c:	fe00e800 	.word	0xfe00e800

08006180 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	4608      	mov	r0, r1
 800618a:	4611      	mov	r1, r2
 800618c:	461a      	mov	r2, r3
 800618e:	4603      	mov	r3, r0
 8006190:	817b      	strh	r3, [r7, #10]
 8006192:	460b      	mov	r3, r1
 8006194:	813b      	strh	r3, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	8979      	ldrh	r1, [r7, #10]
 80061a0:	4b20      	ldr	r3, [pc, #128]	; (8006224 <I2C_RequestMemoryRead+0xa4>)
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fa00 	bl	80065ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	69b9      	ldr	r1, [r7, #24]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f89d 	bl	80062f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e02c      	b.n	800621a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d105      	bne.n	80061d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061c6:	893b      	ldrh	r3, [r7, #8]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	629a      	str	r2, [r3, #40]	; 0x28
 80061d0:	e015      	b.n	80061fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061d2:	893b      	ldrh	r3, [r7, #8]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	69b9      	ldr	r1, [r7, #24]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f883 	bl	80062f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e012      	b.n	800621a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061f4:	893b      	ldrh	r3, [r7, #8]
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2200      	movs	r2, #0
 8006206:	2140      	movs	r1, #64	; 0x40
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f831 	bl	8006270 <I2C_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	80002000 	.word	0x80002000

08006228 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d103      	bne.n	8006246 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d007      	beq.n	8006264 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699a      	ldr	r2, [r3, #24]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0201 	orr.w	r2, r2, #1
 8006262:	619a      	str	r2, [r3, #24]
  }
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006280:	e022      	b.n	80062c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006288:	d01e      	beq.n	80062c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7ff f93d 	bl	8005508 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d113      	bne.n	80062c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a4:	f043 0220 	orr.w	r2, r3, #32
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e00f      	b.n	80062e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d0cd      	beq.n	8006282 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062fc:	e02c      	b.n	8006358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f8dc 	bl	80064c0 <I2C_IsAcknowledgeFailed>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e02a      	b.n	8006368 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006318:	d01e      	beq.n	8006358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7ff f8f5 	bl	8005508 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d113      	bne.n	8006358 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e007      	b.n	8006368 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b02      	cmp	r3, #2
 8006364:	d1cb      	bne.n	80062fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800637c:	e028      	b.n	80063d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f89c 	bl	80064c0 <I2C_IsAcknowledgeFailed>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e026      	b.n	80063e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7ff f8b9 	bl	8005508 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d113      	bne.n	80063d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e007      	b.n	80063e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d1cf      	bne.n	800637e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063f4:	e055      	b.n	80064a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f860 	bl	80064c0 <I2C_IsAcknowledgeFailed>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e053      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b20      	cmp	r3, #32
 8006416:	d129      	bne.n	800646c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b04      	cmp	r3, #4
 8006424:	d105      	bne.n	8006432 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e03f      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2220      	movs	r2, #32
 8006438:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6859      	ldr	r1, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006446:	400b      	ands	r3, r1
 8006448:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e022      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646c:	f7ff f84c 	bl	8005508 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	d302      	bcc.n	8006482 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10f      	bne.n	80064a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e007      	b.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d1a2      	bne.n	80063f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	fe00e800 	.word	0xfe00e800

080064c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d161      	bne.n	800659e <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064e8:	d02b      	beq.n	8006542 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f8:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064fa:	e022      	b.n	8006542 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006502:	d01e      	beq.n	8006542 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006504:	f7ff f800 	bl	8005508 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <I2C_IsAcknowledgeFailed+0x5a>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d113      	bne.n	8006542 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651e:	f043 0220 	orr.w	r2, r3, #32
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e02e      	b.n	80065a0 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b20      	cmp	r3, #32
 800654e:	d1d5      	bne.n	80064fc <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2210      	movs	r2, #16
 8006556:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2220      	movs	r2, #32
 800655e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff fe61 	bl	8006228 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6859      	ldr	r1, [r3, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <I2C_IsAcknowledgeFailed+0xe8>)
 8006572:	400b      	ands	r3, r1
 8006574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f043 0204 	orr.w	r2, r3, #4
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	fe00e800 	.word	0xfe00e800

080065ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	607b      	str	r3, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	817b      	strh	r3, [r7, #10]
 80065ba:	4613      	mov	r3, r2
 80065bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	0d5b      	lsrs	r3, r3, #21
 80065c8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80065cc:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <I2C_TransferConfig+0x58>)
 80065ce:	430b      	orrs	r3, r1
 80065d0:	43db      	mvns	r3, r3
 80065d2:	ea02 0103 	and.w	r1, r2, r3
 80065d6:	897b      	ldrh	r3, [r7, #10]
 80065d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065dc:	7a7b      	ldrb	r3, [r7, #9]
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	03ff63ff 	.word	0x03ff63ff

08006608 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b20      	cmp	r3, #32
 800661c:	d138      	bne.n	8006690 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006628:	2302      	movs	r3, #2
 800662a:	e032      	b.n	8006692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2224      	movs	r2, #36	; 0x24
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0201 	bic.w	r2, r2, #1
 800664a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800665a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006690:	2302      	movs	r3, #2
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d139      	bne.n	8006728 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066be:	2302      	movs	r3, #2
 80066c0:	e033      	b.n	800672a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2224      	movs	r2, #36	; 0x24
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	021b      	lsls	r3, r3, #8
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	e000      	b.n	800672a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800673e:	af00      	add	r7, sp, #0
 8006740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006748:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800674a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800674e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f001 b823 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800675e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 817d 	beq.w	8006a6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006774:	4bbc      	ldr	r3, [pc, #752]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 030c 	and.w	r3, r3, #12
 800677c:	2b04      	cmp	r3, #4
 800677e:	d00c      	beq.n	800679a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006780:	4bb9      	ldr	r3, [pc, #740]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f003 030c 	and.w	r3, r3, #12
 8006788:	2b08      	cmp	r3, #8
 800678a:	d15c      	bne.n	8006846 <HAL_RCC_OscConfig+0x10e>
 800678c:	4bb6      	ldr	r3, [pc, #728]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006798:	d155      	bne.n	8006846 <HAL_RCC_OscConfig+0x10e>
 800679a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800679e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80067a6:	fa93 f3a3 	rbit	r3, r3
 80067aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80067ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b2:	fab3 f383 	clz	r3, r3
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d102      	bne.n	80067cc <HAL_RCC_OscConfig+0x94>
 80067c6:	4ba8      	ldr	r3, [pc, #672]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	e015      	b.n	80067f8 <HAL_RCC_OscConfig+0xc0>
 80067cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80067d8:	fa93 f3a3 	rbit	r3, r3
 80067dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80067e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80067e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80067ec:	fa93 f3a3 	rbit	r3, r3
 80067f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80067f4:	4b9c      	ldr	r3, [pc, #624]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006800:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006804:	fa92 f2a2 	rbit	r2, r2
 8006808:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800680c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006810:	fab2 f282 	clz	r2, r2
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	f042 0220 	orr.w	r2, r2, #32
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	f002 021f 	and.w	r2, r2, #31
 8006820:	2101      	movs	r1, #1
 8006822:	fa01 f202 	lsl.w	r2, r1, r2
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 811f 	beq.w	8006a6c <HAL_RCC_OscConfig+0x334>
 800682e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f040 8116 	bne.w	8006a6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f000 bfaf 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800684a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006856:	d106      	bne.n	8006866 <HAL_RCC_OscConfig+0x12e>
 8006858:	4b83      	ldr	r3, [pc, #524]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a82      	ldr	r2, [pc, #520]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 800685e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	e036      	b.n	80068d4 <HAL_RCC_OscConfig+0x19c>
 8006866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800686a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x158>
 8006876:	4b7c      	ldr	r3, [pc, #496]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a7b      	ldr	r2, [pc, #492]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 800687c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b79      	ldr	r3, [pc, #484]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a78      	ldr	r2, [pc, #480]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 8006888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e021      	b.n	80068d4 <HAL_RCC_OscConfig+0x19c>
 8006890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006894:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0x184>
 80068a2:	4b71      	ldr	r3, [pc, #452]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a70      	ldr	r2, [pc, #448]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	4b6e      	ldr	r3, [pc, #440]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a6d      	ldr	r2, [pc, #436]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0x19c>
 80068bc:	4b6a      	ldr	r3, [pc, #424]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a69      	ldr	r2, [pc, #420]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	4b67      	ldr	r3, [pc, #412]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a66      	ldr	r2, [pc, #408]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068d4:	4b64      	ldr	r3, [pc, #400]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	f023 020f 	bic.w	r2, r3, #15
 80068dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	495f      	ldr	r1, [pc, #380]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d059      	beq.n	80069b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fe:	f7fe fe03 	bl	8005508 <HAL_GetTick>
 8006902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006906:	e00a      	b.n	800691e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006908:	f7fe fdfe 	bl	8005508 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b64      	cmp	r3, #100	; 0x64
 8006916:	d902      	bls.n	800691e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	f000 bf43 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
 800691e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006922:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006926:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800692a:	fa93 f3a3 	rbit	r3, r3
 800692e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006932:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006936:	fab3 f383 	clz	r3, r3
 800693a:	b2db      	uxtb	r3, r3
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	b2db      	uxtb	r3, r3
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b01      	cmp	r3, #1
 8006948:	d102      	bne.n	8006950 <HAL_RCC_OscConfig+0x218>
 800694a:	4b47      	ldr	r3, [pc, #284]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	e015      	b.n	800697c <HAL_RCC_OscConfig+0x244>
 8006950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006954:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006958:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800695c:	fa93 f3a3 	rbit	r3, r3
 8006960:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006968:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800696c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006970:	fa93 f3a3 	rbit	r3, r3
 8006974:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006978:	4b3b      	ldr	r3, [pc, #236]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006980:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006984:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006988:	fa92 f2a2 	rbit	r2, r2
 800698c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006990:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006994:	fab2 f282 	clz	r2, r2
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	f042 0220 	orr.w	r2, r2, #32
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	f002 021f 	and.w	r2, r2, #31
 80069a4:	2101      	movs	r1, #1
 80069a6:	fa01 f202 	lsl.w	r2, r1, r2
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0ab      	beq.n	8006908 <HAL_RCC_OscConfig+0x1d0>
 80069b0:	e05d      	b.n	8006a6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b2:	f7fe fda9 	bl	8005508 <HAL_GetTick>
 80069b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069bc:	f7fe fda4 	bl	8005508 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b64      	cmp	r3, #100	; 0x64
 80069ca:	d902      	bls.n	80069d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	f000 bee9 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
 80069d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80069de:	fa93 f3a3 	rbit	r3, r3
 80069e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80069e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ea:	fab3 f383 	clz	r3, r3
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d102      	bne.n	8006a04 <HAL_RCC_OscConfig+0x2cc>
 80069fe:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	e015      	b.n	8006a30 <HAL_RCC_OscConfig+0x2f8>
 8006a04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006a10:	fa93 f3a3 	rbit	r3, r3
 8006a14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006a20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006a24:	fa93 f3a3 	rbit	r3, r3
 8006a28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006a2c:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <HAL_RCC_OscConfig+0x330>)
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006a38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006a3c:	fa92 f2a2 	rbit	r2, r2
 8006a40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006a44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006a48:	fab2 f282 	clz	r2, r2
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	f042 0220 	orr.w	r2, r2, #32
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	f002 021f 	and.w	r2, r2, #31
 8006a58:	2101      	movs	r1, #1
 8006a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5e:	4013      	ands	r3, r2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1ab      	bne.n	80069bc <HAL_RCC_OscConfig+0x284>
 8006a64:	e003      	b.n	8006a6e <HAL_RCC_OscConfig+0x336>
 8006a66:	bf00      	nop
 8006a68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 817d 	beq.w	8006d7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006a84:	4ba6      	ldr	r3, [pc, #664]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 030c 	and.w	r3, r3, #12
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00b      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a90:	4ba3      	ldr	r3, [pc, #652]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 030c 	and.w	r3, r3, #12
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d172      	bne.n	8006b82 <HAL_RCC_OscConfig+0x44a>
 8006a9c:	4ba0      	ldr	r3, [pc, #640]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d16c      	bne.n	8006b82 <HAL_RCC_OscConfig+0x44a>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006aba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006abe:	fab3 f383 	clz	r3, r3
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f043 0301 	orr.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d102      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x3a0>
 8006ad2:	4b93      	ldr	r3, [pc, #588]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	e013      	b.n	8006b00 <HAL_RCC_OscConfig+0x3c8>
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ade:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006ae2:	fa93 f3a3 	rbit	r3, r3
 8006ae6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006aea:	2302      	movs	r3, #2
 8006aec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006af0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006af4:	fa93 f3a3 	rbit	r3, r3
 8006af8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006afc:	4b88      	ldr	r3, [pc, #544]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2202      	movs	r2, #2
 8006b02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006b06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006b0a:	fa92 f2a2 	rbit	r2, r2
 8006b0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006b12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006b16:	fab2 f282 	clz	r2, r2
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	f042 0220 	orr.w	r2, r2, #32
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	f002 021f 	and.w	r2, r2, #31
 8006b26:	2101      	movs	r1, #1
 8006b28:	fa01 f202 	lsl.w	r2, r1, r2
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <HAL_RCC_OscConfig+0x410>
 8006b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d002      	beq.n	8006b48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f000 be2e 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b48:	4b75      	ldr	r3, [pc, #468]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	21f8      	movs	r1, #248	; 0xf8
 8006b5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006b66:	fa91 f1a1 	rbit	r1, r1
 8006b6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006b6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006b72:	fab1 f181 	clz	r1, r1
 8006b76:	b2c9      	uxtb	r1, r1
 8006b78:	408b      	lsls	r3, r1
 8006b7a:	4969      	ldr	r1, [pc, #420]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b80:	e0fd      	b.n	8006d7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 8088 	beq.w	8006ca4 <HAL_RCC_OscConfig+0x56c>
 8006b94:	2301      	movs	r3, #1
 8006b96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006b9e:	fa93 f3a3 	rbit	r3, r3
 8006ba2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006ba6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006baa:	fab3 f383 	clz	r3, r3
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	461a      	mov	r2, r3
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc0:	f7fe fca2 	bl	8005508 <HAL_GetTick>
 8006bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bca:	f7fe fc9d 	bl	8005508 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d902      	bls.n	8006be0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	f000 bde2 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
 8006be0:	2302      	movs	r3, #2
 8006be2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006bf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf6:	fab3 f383 	clz	r3, r3
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d102      	bne.n	8006c10 <HAL_RCC_OscConfig+0x4d8>
 8006c0a:	4b45      	ldr	r3, [pc, #276]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	e013      	b.n	8006c38 <HAL_RCC_OscConfig+0x500>
 8006c10:	2302      	movs	r3, #2
 8006c12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006c1a:	fa93 f3a3 	rbit	r3, r3
 8006c1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006c22:	2302      	movs	r3, #2
 8006c24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006c28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006c2c:	fa93 f3a3 	rbit	r3, r3
 8006c30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006c34:	4b3a      	ldr	r3, [pc, #232]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006c3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006c42:	fa92 f2a2 	rbit	r2, r2
 8006c46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006c4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006c4e:	fab2 f282 	clz	r2, r2
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	f042 0220 	orr.w	r2, r2, #32
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	f002 021f 	and.w	r2, r2, #31
 8006c5e:	2101      	movs	r1, #1
 8006c60:	fa01 f202 	lsl.w	r2, r1, r2
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0af      	beq.n	8006bca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6a:	4b2d      	ldr	r3, [pc, #180]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	21f8      	movs	r1, #248	; 0xf8
 8006c80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006c88:	fa91 f1a1 	rbit	r1, r1
 8006c8c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006c90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006c94:	fab1 f181 	clz	r1, r1
 8006c98:	b2c9      	uxtb	r1, r1
 8006c9a:	408b      	lsls	r3, r1
 8006c9c:	4920      	ldr	r1, [pc, #128]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]
 8006ca2:	e06c      	b.n	8006d7e <HAL_RCC_OscConfig+0x646>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006caa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006cae:	fa93 f3a3 	rbit	r3, r3
 8006cb2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006cb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2300      	movs	r3, #0
 8006cce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd0:	f7fe fc1a 	bl	8005508 <HAL_GetTick>
 8006cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd8:	e00a      	b.n	8006cf0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cda:	f7fe fc15 	bl	8005508 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d902      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	f000 bd5a 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006cfa:	fa93 f3a3 	rbit	r3, r3
 8006cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d06:	fab3 f383 	clz	r3, r3
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	095b      	lsrs	r3, r3, #5
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d104      	bne.n	8006d24 <HAL_RCC_OscConfig+0x5ec>
 8006d1a:	4b01      	ldr	r3, [pc, #4]	; (8006d20 <HAL_RCC_OscConfig+0x5e8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	e015      	b.n	8006d4c <HAL_RCC_OscConfig+0x614>
 8006d20:	40021000 	.word	0x40021000
 8006d24:	2302      	movs	r3, #2
 8006d26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d2e:	fa93 f3a3 	rbit	r3, r3
 8006d32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d36:	2302      	movs	r3, #2
 8006d38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d40:	fa93 f3a3 	rbit	r3, r3
 8006d44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006d48:	4bc8      	ldr	r3, [pc, #800]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006d52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d56:	fa92 f2a2 	rbit	r2, r2
 8006d5a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006d5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006d62:	fab2 f282 	clz	r2, r2
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	f042 0220 	orr.w	r2, r2, #32
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	f002 021f 	and.w	r2, r2, #31
 8006d72:	2101      	movs	r1, #1
 8006d74:	fa01 f202 	lsl.w	r2, r1, r2
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1ad      	bne.n	8006cda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8110 	beq.w	8006fb4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d079      	beq.n	8006e98 <HAL_RCC_OscConfig+0x760>
 8006da4:	2301      	movs	r3, #1
 8006da6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006daa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006dae:	fa93 f3a3 	rbit	r3, r3
 8006db2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dba:	fab3 f383 	clz	r3, r3
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4bab      	ldr	r3, [pc, #684]	; (8007070 <HAL_RCC_OscConfig+0x938>)
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2301      	movs	r3, #1
 8006dcc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dce:	f7fe fb9b 	bl	8005508 <HAL_GetTick>
 8006dd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dd6:	e00a      	b.n	8006dee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dd8:	f7fe fb96 	bl	8005508 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d902      	bls.n	8006dee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	f000 bcdb 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
 8006dee:	2302      	movs	r3, #2
 8006df0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006df8:	fa93 f3a3 	rbit	r3, r3
 8006dfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006e08:	2202      	movs	r2, #2
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	fa93 f2a3 	rbit	r2, r3
 8006e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	fa93 f2a3 	rbit	r2, r3
 8006e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e48:	4b88      	ldr	r3, [pc, #544]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8006e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e54:	2102      	movs	r1, #2
 8006e56:	6019      	str	r1, [r3, #0]
 8006e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	fa93 f1a3 	rbit	r1, r3
 8006e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e6e:	6019      	str	r1, [r3, #0]
  return result;
 8006e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	fab3 f383 	clz	r3, r3
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0a0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x6a0>
 8006e96:	e08d      	b.n	8006fb4 <HAL_RCC_OscConfig+0x87c>
 8006e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ea8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	fa93 f2a3 	rbit	r2, r3
 8006eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006eba:	601a      	str	r2, [r3, #0]
  return result;
 8006ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ec0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ec4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ec6:	fab3 f383 	clz	r3, r3
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b68      	ldr	r3, [pc, #416]	; (8007070 <HAL_RCC_OscConfig+0x938>)
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eda:	f7fe fb15 	bl	8005508 <HAL_GetTick>
 8006ede:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ee2:	e00a      	b.n	8006efa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ee4:	f7fe fb10 	bl	8005508 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d902      	bls.n	8006efa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	f000 bc55 	b.w	80077a4 <HAL_RCC_OscConfig+0x106c>
 8006efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006efe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f02:	2202      	movs	r2, #2
 8006f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	fa93 f2a3 	rbit	r2, r3
 8006f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006f26:	2202      	movs	r2, #2
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	fa93 f2a3 	rbit	r2, r3
 8006f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	fa93 f2a3 	rbit	r2, r3
 8006f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f66:	4b41      	ldr	r3, [pc, #260]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8006f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f72:	2102      	movs	r1, #2
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	fa93 f1a3 	rbit	r1, r3
 8006f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f8c:	6019      	str	r1, [r3, #0]
  return result;
 8006f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	fab3 f383 	clz	r3, r3
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f303 	lsl.w	r3, r1, r3
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d197      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 81a1 	beq.w	800730c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd0:	4b26      	ldr	r3, [pc, #152]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d116      	bne.n	800700a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fdc:	4b23      	ldr	r3, [pc, #140]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	4a22      	ldr	r2, [pc, #136]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8006fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe6:	61d3      	str	r3, [r2, #28]
 8006fe8:	4b20      	ldr	r3, [pc, #128]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ff4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ffe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007002:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007004:	2301      	movs	r3, #1
 8007006:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700a:	4b1a      	ldr	r3, [pc, #104]	; (8007074 <HAL_RCC_OscConfig+0x93c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d11a      	bne.n	800704c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007016:	4b17      	ldr	r3, [pc, #92]	; (8007074 <HAL_RCC_OscConfig+0x93c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a16      	ldr	r2, [pc, #88]	; (8007074 <HAL_RCC_OscConfig+0x93c>)
 800701c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007020:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007022:	f7fe fa71 	bl	8005508 <HAL_GetTick>
 8007026:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702a:	e009      	b.n	8007040 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800702c:	f7fe fa6c 	bl	8005508 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b64      	cmp	r3, #100	; 0x64
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e3b1      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <HAL_RCC_OscConfig+0x93c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0ef      	beq.n	800702c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800704c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d10d      	bne.n	8007078 <HAL_RCC_OscConfig+0x940>
 800705c:	4b03      	ldr	r3, [pc, #12]	; (800706c <HAL_RCC_OscConfig+0x934>)
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	4a02      	ldr	r2, [pc, #8]	; (800706c <HAL_RCC_OscConfig+0x934>)
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	6213      	str	r3, [r2, #32]
 8007068:	e03c      	b.n	80070e4 <HAL_RCC_OscConfig+0x9ac>
 800706a:	bf00      	nop
 800706c:	40021000 	.word	0x40021000
 8007070:	10908120 	.word	0x10908120
 8007074:	40007000 	.word	0x40007000
 8007078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800707c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10c      	bne.n	80070a2 <HAL_RCC_OscConfig+0x96a>
 8007088:	4bc1      	ldr	r3, [pc, #772]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	4ac0      	ldr	r2, [pc, #768]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 800708e:	f023 0301 	bic.w	r3, r3, #1
 8007092:	6213      	str	r3, [r2, #32]
 8007094:	4bbe      	ldr	r3, [pc, #760]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	4abd      	ldr	r2, [pc, #756]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 800709a:	f023 0304 	bic.w	r3, r3, #4
 800709e:	6213      	str	r3, [r2, #32]
 80070a0:	e020      	b.n	80070e4 <HAL_RCC_OscConfig+0x9ac>
 80070a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d10c      	bne.n	80070cc <HAL_RCC_OscConfig+0x994>
 80070b2:	4bb7      	ldr	r3, [pc, #732]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	4ab6      	ldr	r2, [pc, #728]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070b8:	f043 0304 	orr.w	r3, r3, #4
 80070bc:	6213      	str	r3, [r2, #32]
 80070be:	4bb4      	ldr	r3, [pc, #720]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	4ab3      	ldr	r2, [pc, #716]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	6213      	str	r3, [r2, #32]
 80070ca:	e00b      	b.n	80070e4 <HAL_RCC_OscConfig+0x9ac>
 80070cc:	4bb0      	ldr	r3, [pc, #704]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	4aaf      	ldr	r2, [pc, #700]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	6213      	str	r3, [r2, #32]
 80070d8:	4bad      	ldr	r3, [pc, #692]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	4aac      	ldr	r2, [pc, #688]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80070de:	f023 0304 	bic.w	r3, r3, #4
 80070e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 8081 	beq.w	80071f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070f6:	f7fe fa07 	bl	8005508 <HAL_GetTick>
 80070fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fe:	e00b      	b.n	8007118 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007100:	f7fe fa02 	bl	8005508 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007110:	4293      	cmp	r3, r2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e345      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
 8007118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800711c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007120:	2202      	movs	r2, #2
 8007122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007128:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	fa93 f2a3 	rbit	r2, r3
 8007132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007136:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007140:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007144:	2202      	movs	r2, #2
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800714c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	fa93 f2a3 	rbit	r2, r3
 8007156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800715a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800715e:	601a      	str	r2, [r3, #0]
  return result;
 8007160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007164:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007168:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800716a:	fab3 f383 	clz	r3, r3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	b2db      	uxtb	r3, r3
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d102      	bne.n	8007184 <HAL_RCC_OscConfig+0xa4c>
 800717e:	4b84      	ldr	r3, [pc, #528]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	e013      	b.n	80071ac <HAL_RCC_OscConfig+0xa74>
 8007184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007188:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800718c:	2202      	movs	r2, #2
 800718e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007194:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	fa93 f2a3 	rbit	r2, r3
 800719e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	4b79      	ldr	r3, [pc, #484]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80071b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80071b4:	2102      	movs	r1, #2
 80071b6:	6011      	str	r1, [r2, #0]
 80071b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80071bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80071c0:	6812      	ldr	r2, [r2, #0]
 80071c2:	fa92 f1a2 	rbit	r1, r2
 80071c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80071ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80071ce:	6011      	str	r1, [r2, #0]
  return result;
 80071d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80071d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	fab2 f282 	clz	r2, r2
 80071de:	b2d2      	uxtb	r2, r2
 80071e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	f002 021f 	and.w	r2, r2, #31
 80071ea:	2101      	movs	r1, #1
 80071ec:	fa01 f202 	lsl.w	r2, r1, r2
 80071f0:	4013      	ands	r3, r2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d084      	beq.n	8007100 <HAL_RCC_OscConfig+0x9c8>
 80071f6:	e07f      	b.n	80072f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071f8:	f7fe f986 	bl	8005508 <HAL_GetTick>
 80071fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007200:	e00b      	b.n	800721a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007202:	f7fe f981 	bl	8005508 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e2c4      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
 800721a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800721e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007222:	2202      	movs	r2, #2
 8007224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800722a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	fa93 f2a3 	rbit	r2, r3
 8007234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007238:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007242:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007246:	2202      	movs	r2, #2
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800724e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	fa93 f2a3 	rbit	r2, r3
 8007258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800725c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007260:	601a      	str	r2, [r3, #0]
  return result;
 8007262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007266:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800726a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800726c:	fab3 f383 	clz	r3, r3
 8007270:	b2db      	uxtb	r3, r3
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f043 0302 	orr.w	r3, r3, #2
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d102      	bne.n	8007286 <HAL_RCC_OscConfig+0xb4e>
 8007280:	4b43      	ldr	r3, [pc, #268]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	e013      	b.n	80072ae <HAL_RCC_OscConfig+0xb76>
 8007286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800728a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800728e:	2202      	movs	r2, #2
 8007290:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007296:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	fa93 f2a3 	rbit	r2, r3
 80072a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	4b39      	ldr	r3, [pc, #228]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80072b6:	2102      	movs	r1, #2
 80072b8:	6011      	str	r1, [r2, #0]
 80072ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80072c2:	6812      	ldr	r2, [r2, #0]
 80072c4:	fa92 f1a2 	rbit	r1, r2
 80072c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80072d0:	6011      	str	r1, [r2, #0]
  return result;
 80072d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80072d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	fab2 f282 	clz	r2, r2
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	f002 021f 	and.w	r2, r2, #31
 80072ec:	2101      	movs	r1, #1
 80072ee:	fa01 f202 	lsl.w	r2, r1, r2
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d184      	bne.n	8007202 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007300:	4b23      	ldr	r3, [pc, #140]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	4a22      	ldr	r2, [pc, #136]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 8007306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800730a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800730c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8242 	beq.w	80077a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800731e:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <HAL_RCC_OscConfig+0xc58>)
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f003 030c 	and.w	r3, r3, #12
 8007326:	2b08      	cmp	r3, #8
 8007328:	f000 8213 	beq.w	8007752 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800732c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	2b02      	cmp	r3, #2
 800733a:	f040 8162 	bne.w	8007602 <HAL_RCC_OscConfig+0xeca>
 800733e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007342:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007346:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800734a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007350:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	fa93 f2a3 	rbit	r2, r3
 800735a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800735e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007362:	601a      	str	r2, [r3, #0]
  return result;
 8007364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007368:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800736c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800736e:	fab3 f383 	clz	r3, r3
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	461a      	mov	r2, r3
 8007380:	2300      	movs	r3, #0
 8007382:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007384:	f7fe f8c0 	bl	8005508 <HAL_GetTick>
 8007388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800738c:	e00c      	b.n	80073a8 <HAL_RCC_OscConfig+0xc70>
 800738e:	bf00      	nop
 8007390:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007394:	f7fe f8b8 	bl	8005508 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e1fd      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
 80073a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80073b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	fa93 f2a3 	rbit	r2, r3
 80073c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80073cc:	601a      	str	r2, [r3, #0]
  return result;
 80073ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80073d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073d8:	fab3 f383 	clz	r3, r3
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d102      	bne.n	80073f2 <HAL_RCC_OscConfig+0xcba>
 80073ec:	4bb0      	ldr	r3, [pc, #704]	; (80076b0 <HAL_RCC_OscConfig+0xf78>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	e027      	b.n	8007442 <HAL_RCC_OscConfig+0xd0a>
 80073f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007404:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	fa93 f2a3 	rbit	r2, r3
 800740e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007412:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800741c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007420:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800742a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	fa93 f2a3 	rbit	r2, r3
 8007434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007438:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	4b9c      	ldr	r3, [pc, #624]	; (80076b0 <HAL_RCC_OscConfig+0xf78>)
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007446:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800744a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800744e:	6011      	str	r1, [r2, #0]
 8007450:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007454:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	fa92 f1a2 	rbit	r1, r2
 800745e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007462:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007466:	6011      	str	r1, [r2, #0]
  return result;
 8007468:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800746c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	fab2 f282 	clz	r2, r2
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	f042 0220 	orr.w	r2, r2, #32
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	f002 021f 	and.w	r2, r2, #31
 8007482:	2101      	movs	r1, #1
 8007484:	fa01 f202 	lsl.w	r2, r1, r2
 8007488:	4013      	ands	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d182      	bne.n	8007394 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800748e:	4b88      	ldr	r3, [pc, #544]	; (80076b0 <HAL_RCC_OscConfig+0xf78>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800749a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80074a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	430b      	orrs	r3, r1
 80074b0:	497f      	ldr	r1, [pc, #508]	; (80076b0 <HAL_RCC_OscConfig+0xf78>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	604b      	str	r3, [r1, #4]
 80074b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80074be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	fa93 f2a3 	rbit	r2, r3
 80074d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80074da:	601a      	str	r2, [r3, #0]
  return result;
 80074dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80074e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e6:	fab3 f383 	clz	r3, r3
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	461a      	mov	r2, r3
 80074f8:	2301      	movs	r3, #1
 80074fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074fc:	f7fe f804 	bl	8005508 <HAL_GetTick>
 8007500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007504:	e009      	b.n	800751a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007506:	f7fd ffff 	bl	8005508 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e144      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
 800751a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800751e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007522:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	fa93 f2a3 	rbit	r2, r3
 8007536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800753a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800753e:	601a      	str	r2, [r3, #0]
  return result;
 8007540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007544:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007548:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800754a:	fab3 f383 	clz	r3, r3
 800754e:	b2db      	uxtb	r3, r3
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d102      	bne.n	8007564 <HAL_RCC_OscConfig+0xe2c>
 800755e:	4b54      	ldr	r3, [pc, #336]	; (80076b0 <HAL_RCC_OscConfig+0xf78>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	e027      	b.n	80075b4 <HAL_RCC_OscConfig+0xe7c>
 8007564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007568:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800756c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007576:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	fa93 f2a3 	rbit	r2, r3
 8007580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007584:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800758e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800759c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	fa93 f2a3 	rbit	r2, r3
 80075a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	4b3f      	ldr	r3, [pc, #252]	; (80076b0 <HAL_RCC_OscConfig+0xf78>)
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80075bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	fa92 f1a2 	rbit	r1, r2
 80075d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80075d8:	6011      	str	r1, [r2, #0]
  return result;
 80075da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	fab2 f282 	clz	r2, r2
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	f042 0220 	orr.w	r2, r2, #32
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	f002 021f 	and.w	r2, r2, #31
 80075f4:	2101      	movs	r1, #1
 80075f6:	fa01 f202 	lsl.w	r2, r1, r2
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d082      	beq.n	8007506 <HAL_RCC_OscConfig+0xdce>
 8007600:	e0cf      	b.n	80077a2 <HAL_RCC_OscConfig+0x106a>
 8007602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007606:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800760a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800760e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007614:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	fa93 f2a3 	rbit	r2, r3
 800761e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007622:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007626:	601a      	str	r2, [r3, #0]
  return result;
 8007628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007630:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007632:	fab3 f383 	clz	r3, r3
 8007636:	b2db      	uxtb	r3, r3
 8007638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800763c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	461a      	mov	r2, r3
 8007644:	2300      	movs	r3, #0
 8007646:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007648:	f7fd ff5e 	bl	8005508 <HAL_GetTick>
 800764c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007650:	e009      	b.n	8007666 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007652:	f7fd ff59 	bl	8005508 <HAL_GetTick>
 8007656:	4602      	mov	r2, r0
 8007658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e09e      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
 8007666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800766a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800766e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007678:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	fa93 f2a3 	rbit	r2, r3
 8007682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007686:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800768a:	601a      	str	r2, [r3, #0]
  return result;
 800768c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007690:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007694:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007696:	fab3 f383 	clz	r3, r3
 800769a:	b2db      	uxtb	r3, r3
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	f043 0301 	orr.w	r3, r3, #1
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d104      	bne.n	80076b4 <HAL_RCC_OscConfig+0xf7c>
 80076aa:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <HAL_RCC_OscConfig+0xf78>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	e029      	b.n	8007704 <HAL_RCC_OscConfig+0xfcc>
 80076b0:	40021000 	.word	0x40021000
 80076b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80076bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	fa93 f2a3 	rbit	r2, r3
 80076d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80076e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	fa93 f2a3 	rbit	r2, r3
 80076f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <HAL_RCC_OscConfig+0x1078>)
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007708:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800770c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007710:	6011      	str	r1, [r2, #0]
 8007712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007716:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	fa92 f1a2 	rbit	r1, r2
 8007720:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007724:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007728:	6011      	str	r1, [r2, #0]
  return result;
 800772a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800772e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	fab2 f282 	clz	r2, r2
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	f042 0220 	orr.w	r2, r2, #32
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	f002 021f 	and.w	r2, r2, #31
 8007744:	2101      	movs	r1, #1
 8007746:	fa01 f202 	lsl.w	r2, r1, r2
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d180      	bne.n	8007652 <HAL_RCC_OscConfig+0xf1a>
 8007750:	e027      	b.n	80077a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007756:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e01e      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007766:	4b12      	ldr	r3, [pc, #72]	; (80077b0 <HAL_RCC_OscConfig+0x1078>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800776e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007772:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800777a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	429a      	cmp	r2, r3
 8007784:	d10b      	bne.n	800779e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007786:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800778a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800778e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800779a:	429a      	cmp	r2, r3
 800779c:	d001      	beq.n	80077a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40021000 	.word	0x40021000

080077b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b09e      	sub	sp, #120	; 0x78
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e162      	b.n	8007a92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077cc:	4b90      	ldr	r3, [pc, #576]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0307 	and.w	r3, r3, #7
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d910      	bls.n	80077fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077da:	4b8d      	ldr	r3, [pc, #564]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f023 0207 	bic.w	r2, r3, #7
 80077e2:	498b      	ldr	r1, [pc, #556]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b89      	ldr	r3, [pc, #548]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e14a      	b.n	8007a92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007808:	4b82      	ldr	r3, [pc, #520]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	497f      	ldr	r1, [pc, #508]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 8007816:	4313      	orrs	r3, r2
 8007818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80dc 	beq.w	80079e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d13c      	bne.n	80078aa <HAL_RCC_ClockConfig+0xf6>
 8007830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007834:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007838:	fa93 f3a3 	rbit	r3, r3
 800783c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800783e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007840:	fab3 f383 	clz	r3, r3
 8007844:	b2db      	uxtb	r3, r3
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f043 0301 	orr.w	r3, r3, #1
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b01      	cmp	r3, #1
 8007852:	d102      	bne.n	800785a <HAL_RCC_ClockConfig+0xa6>
 8007854:	4b6f      	ldr	r3, [pc, #444]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	e00f      	b.n	800787a <HAL_RCC_ClockConfig+0xc6>
 800785a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800785e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007862:	fa93 f3a3 	rbit	r3, r3
 8007866:	667b      	str	r3, [r7, #100]	; 0x64
 8007868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800786c:	663b      	str	r3, [r7, #96]	; 0x60
 800786e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007870:	fa93 f3a3 	rbit	r3, r3
 8007874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007876:	4b67      	ldr	r3, [pc, #412]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800787e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007882:	fa92 f2a2 	rbit	r2, r2
 8007886:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800788a:	fab2 f282 	clz	r2, r2
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	f042 0220 	orr.w	r2, r2, #32
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	f002 021f 	and.w	r2, r2, #31
 800789a:	2101      	movs	r1, #1
 800789c:	fa01 f202 	lsl.w	r2, r1, r2
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d17b      	bne.n	800799e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e0f3      	b.n	8007a92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d13c      	bne.n	800792c <HAL_RCC_ClockConfig+0x178>
 80078b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ba:	fa93 f3a3 	rbit	r3, r3
 80078be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80078c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c2:	fab3 f383 	clz	r3, r3
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	095b      	lsrs	r3, r3, #5
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d102      	bne.n	80078dc <HAL_RCC_ClockConfig+0x128>
 80078d6:	4b4f      	ldr	r3, [pc, #316]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	e00f      	b.n	80078fc <HAL_RCC_ClockConfig+0x148>
 80078dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e4:	fa93 f3a3 	rbit	r3, r3
 80078e8:	647b      	str	r3, [r7, #68]	; 0x44
 80078ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078ee:	643b      	str	r3, [r7, #64]	; 0x40
 80078f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f2:	fa93 f3a3 	rbit	r3, r3
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f8:	4b46      	ldr	r3, [pc, #280]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007900:	63ba      	str	r2, [r7, #56]	; 0x38
 8007902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007904:	fa92 f2a2 	rbit	r2, r2
 8007908:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800790a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800790c:	fab2 f282 	clz	r2, r2
 8007910:	b2d2      	uxtb	r2, r2
 8007912:	f042 0220 	orr.w	r2, r2, #32
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	f002 021f 	and.w	r2, r2, #31
 800791c:	2101      	movs	r1, #1
 800791e:	fa01 f202 	lsl.w	r2, r1, r2
 8007922:	4013      	ands	r3, r2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d13a      	bne.n	800799e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e0b2      	b.n	8007a92 <HAL_RCC_ClockConfig+0x2de>
 800792c:	2302      	movs	r3, #2
 800792e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	fa93 f3a3 	rbit	r3, r3
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800793a:	fab3 f383 	clz	r3, r3
 800793e:	b2db      	uxtb	r3, r3
 8007940:	095b      	lsrs	r3, r3, #5
 8007942:	b2db      	uxtb	r3, r3
 8007944:	f043 0301 	orr.w	r3, r3, #1
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d102      	bne.n	8007954 <HAL_RCC_ClockConfig+0x1a0>
 800794e:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	e00d      	b.n	8007970 <HAL_RCC_ClockConfig+0x1bc>
 8007954:	2302      	movs	r3, #2
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	fa93 f3a3 	rbit	r3, r3
 800795e:	627b      	str	r3, [r7, #36]	; 0x24
 8007960:	2302      	movs	r3, #2
 8007962:	623b      	str	r3, [r7, #32]
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	fa93 f3a3 	rbit	r3, r3
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	4b29      	ldr	r3, [pc, #164]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	2202      	movs	r2, #2
 8007972:	61ba      	str	r2, [r7, #24]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	fa92 f2a2 	rbit	r2, r2
 800797a:	617a      	str	r2, [r7, #20]
  return result;
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	fab2 f282 	clz	r2, r2
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	f042 0220 	orr.w	r2, r2, #32
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	f002 021f 	and.w	r2, r2, #31
 800798e:	2101      	movs	r1, #1
 8007990:	fa01 f202 	lsl.w	r2, r1, r2
 8007994:	4013      	ands	r3, r2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e079      	b.n	8007a92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800799e:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f023 0203 	bic.w	r2, r3, #3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	491a      	ldr	r1, [pc, #104]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079b0:	f7fd fdaa 	bl	8005508 <HAL_GetTick>
 80079b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079b6:	e00a      	b.n	80079ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079b8:	f7fd fda6 	bl	8005508 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e061      	b.n	8007a92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ce:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <HAL_RCC_ClockConfig+0x260>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f003 020c 	and.w	r2, r3, #12
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	429a      	cmp	r2, r3
 80079de:	d1eb      	bne.n	80079b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d214      	bcs.n	8007a18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ee:	4b08      	ldr	r3, [pc, #32]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f023 0207 	bic.w	r2, r3, #7
 80079f6:	4906      	ldr	r1, [pc, #24]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fe:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <HAL_RCC_ClockConfig+0x25c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d005      	beq.n	8007a18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e040      	b.n	8007a92 <HAL_RCC_ClockConfig+0x2de>
 8007a10:	40022000 	.word	0x40022000
 8007a14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a24:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <HAL_RCC_ClockConfig+0x2e8>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	491a      	ldr	r1, [pc, #104]	; (8007a9c <HAL_RCC_ClockConfig+0x2e8>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a42:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <HAL_RCC_ClockConfig+0x2e8>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	4912      	ldr	r1, [pc, #72]	; (8007a9c <HAL_RCC_ClockConfig+0x2e8>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007a56:	f000 f829 	bl	8007aac <HAL_RCC_GetSysClockFreq>
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <HAL_RCC_ClockConfig+0x2e8>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a64:	22f0      	movs	r2, #240	; 0xf0
 8007a66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	fa92 f2a2 	rbit	r2, r2
 8007a6e:	60fa      	str	r2, [r7, #12]
  return result;
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	fab2 f282 	clz	r2, r2
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	40d3      	lsrs	r3, r2
 8007a7a:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <HAL_RCC_ClockConfig+0x2ec>)
 8007a7c:	5cd3      	ldrb	r3, [r2, r3]
 8007a7e:	fa21 f303 	lsr.w	r3, r1, r3
 8007a82:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <HAL_RCC_ClockConfig+0x2f0>)
 8007a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007a86:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <HAL_RCC_ClockConfig+0x2f4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fd fcf8 	bl	8005480 <HAL_InitTick>
  
  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3778      	adds	r7, #120	; 0x78
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	40021000 	.word	0x40021000
 8007aa0:	08009080 	.word	0x08009080
 8007aa4:	20000190 	.word	0x20000190
 8007aa8:	20000450 	.word	0x20000450

08007aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b08b      	sub	sp, #44	; 0x2c
 8007ab0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007ac6:	4b29      	ldr	r3, [pc, #164]	; (8007b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f003 030c 	and.w	r3, r3, #12
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d002      	beq.n	8007adc <HAL_RCC_GetSysClockFreq+0x30>
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d003      	beq.n	8007ae2 <HAL_RCC_GetSysClockFreq+0x36>
 8007ada:	e03c      	b.n	8007b56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007adc:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ade:	623b      	str	r3, [r7, #32]
      break;
 8007ae0:	e03c      	b.n	8007b5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007ae8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007aec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	fa92 f2a2 	rbit	r2, r2
 8007af4:	607a      	str	r2, [r7, #4]
  return result;
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	fab2 f282 	clz	r2, r2
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	40d3      	lsrs	r3, r2
 8007b00:	4a1c      	ldr	r2, [pc, #112]	; (8007b74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b02:	5cd3      	ldrb	r3, [r2, r3]
 8007b04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007b06:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	220f      	movs	r2, #15
 8007b10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	fa92 f2a2 	rbit	r2, r2
 8007b18:	60fa      	str	r2, [r7, #12]
  return result;
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	fab2 f282 	clz	r2, r2
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	40d3      	lsrs	r3, r2
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b26:	5cd3      	ldrb	r3, [r2, r3]
 8007b28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b34:	4a0e      	ldr	r2, [pc, #56]	; (8007b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	fb02 f303 	mul.w	r3, r2, r3
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
 8007b44:	e004      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	4a0c      	ldr	r2, [pc, #48]	; (8007b7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b4a:	fb02 f303 	mul.w	r3, r2, r3
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	623b      	str	r3, [r7, #32]
      break;
 8007b54:	e002      	b.n	8007b5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b56:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b58:	623b      	str	r3, [r7, #32]
      break;
 8007b5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	372c      	adds	r7, #44	; 0x2c
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	007a1200 	.word	0x007a1200
 8007b74:	08009090 	.word	0x08009090
 8007b78:	080090a0 	.word	0x080090a0
 8007b7c:	003d0900 	.word	0x003d0900

08007b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b092      	sub	sp, #72	; 0x48
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007b90:	2300      	movs	r3, #0
 8007b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80d4 	beq.w	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ba4:	4b4e      	ldr	r3, [pc, #312]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10e      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bb0:	4b4b      	ldr	r3, [pc, #300]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	4a4a      	ldr	r2, [pc, #296]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bba:	61d3      	str	r3, [r2, #28]
 8007bbc:	4b48      	ldr	r3, [pc, #288]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc4:	60bb      	str	r3, [r7, #8]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bce:	4b45      	ldr	r3, [pc, #276]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d118      	bne.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bda:	4b42      	ldr	r3, [pc, #264]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a41      	ldr	r2, [pc, #260]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007be6:	f7fd fc8f 	bl	8005508 <HAL_GetTick>
 8007bea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bec:	e008      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bee:	f7fd fc8b 	bl	8005508 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b64      	cmp	r3, #100	; 0x64
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e169      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c00:	4b38      	ldr	r3, [pc, #224]	; (8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0f0      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c0c:	4b34      	ldr	r3, [pc, #208]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8084 	beq.w	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d07c      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	fa93 f3a3 	rbit	r3, r3
 8007c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c46:	fab3 f383 	clz	r3, r3
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	4b26      	ldr	r3, [pc, #152]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	461a      	mov	r2, r3
 8007c56:	2301      	movs	r3, #1
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	fa93 f3a3 	rbit	r3, r3
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c6a:	fab3 f383 	clz	r3, r3
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007c7e:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d04b      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c8e:	f7fd fc3b 	bl	8005508 <HAL_GetTick>
 8007c92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c94:	e00a      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c96:	f7fd fc37 	bl	8005508 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d901      	bls.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e113      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007cac:	2302      	movs	r3, #2
 8007cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	fa93 f3a3 	rbit	r3, r3
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb8:	2302      	movs	r3, #2
 8007cba:	623b      	str	r3, [r7, #32]
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	fa93 f3a3 	rbit	r3, r3
 8007cc2:	61fb      	str	r3, [r7, #28]
  return result;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc6:	fab3 f383 	clz	r3, r3
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	095b      	lsrs	r3, r3, #5
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f043 0302 	orr.w	r3, r3, #2
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d108      	bne.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007cda:	4b01      	ldr	r3, [pc, #4]	; (8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	e00d      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007ce0:	40021000 	.word	0x40021000
 8007ce4:	40007000 	.word	0x40007000
 8007ce8:	10908100 	.word	0x10908100
 8007cec:	2302      	movs	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	fa93 f3a3 	rbit	r3, r3
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	4b78      	ldr	r3, [pc, #480]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	613a      	str	r2, [r7, #16]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	fa92 f2a2 	rbit	r2, r2
 8007d06:	60fa      	str	r2, [r7, #12]
  return result;
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	fab2 f282 	clz	r2, r2
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	f002 021f 	and.w	r2, r2, #31
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0b7      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007d26:	4b6d      	ldr	r3, [pc, #436]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	496a      	ldr	r1, [pc, #424]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d34:	4313      	orrs	r3, r2
 8007d36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d105      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d40:	4b66      	ldr	r3, [pc, #408]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d42:	69db      	ldr	r3, [r3, #28]
 8007d44:	4a65      	ldr	r2, [pc, #404]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d008      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d58:	4b60      	ldr	r3, [pc, #384]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	f023 0203 	bic.w	r2, r3, #3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	495d      	ldr	r1, [pc, #372]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0302 	and.w	r3, r3, #2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d76:	4b59      	ldr	r3, [pc, #356]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	4956      	ldr	r1, [pc, #344]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d94:	4b51      	ldr	r3, [pc, #324]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	494e      	ldr	r1, [pc, #312]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0320 	and.w	r3, r3, #32
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d008      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007db2:	4b4a      	ldr	r3, [pc, #296]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	f023 0210 	bic.w	r2, r3, #16
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	4947      	ldr	r1, [pc, #284]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007dd0:	4b42      	ldr	r3, [pc, #264]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	493f      	ldr	r1, [pc, #252]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007dee:	4b3b      	ldr	r3, [pc, #236]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	f023 0220 	bic.w	r2, r3, #32
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	4938      	ldr	r1, [pc, #224]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e0c:	4b33      	ldr	r3, [pc, #204]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	4930      	ldr	r1, [pc, #192]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d008      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007e2a:	4b2c      	ldr	r3, [pc, #176]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	4929      	ldr	r1, [pc, #164]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d008      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e48:	4b24      	ldr	r3, [pc, #144]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	4921      	ldr	r1, [pc, #132]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d008      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e66:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	491a      	ldr	r1, [pc, #104]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007e84:	4b15      	ldr	r3, [pc, #84]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	4912      	ldr	r1, [pc, #72]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d008      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ea2:	4b0e      	ldr	r3, [pc, #56]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	490b      	ldr	r1, [pc, #44]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ecc:	4903      	ldr	r1, [pc, #12]	; (8007edc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3748      	adds	r7, #72	; 0x48
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	40021000 	.word	0x40021000

08007ee0 <__errno>:
 8007ee0:	4b01      	ldr	r3, [pc, #4]	; (8007ee8 <__errno+0x8>)
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000458 	.word	0x20000458

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4d0d      	ldr	r5, [pc, #52]	; (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	; (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1b64      	subs	r4, r4, r5
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	42a6      	cmp	r6, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4d0b      	ldr	r5, [pc, #44]	; (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	; (8007f30 <__libc_init_array+0x44>)
 8007f00:	f001 f83a 	bl	8008f78 <_init>
 8007f04:	1b64      	subs	r4, r4, r5
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2600      	movs	r6, #0
 8007f0a:	42a6      	cmp	r6, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f14:	4798      	blx	r3
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1e:	4798      	blx	r3
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	08009148 	.word	0x08009148
 8007f28:	08009148 	.word	0x08009148
 8007f2c:	08009148 	.word	0x08009148
 8007f30:	0800914c 	.word	0x0800914c

08007f34 <memcpy>:
 8007f34:	440a      	add	r2, r1
 8007f36:	4291      	cmp	r1, r2
 8007f38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007f3c:	d100      	bne.n	8007f40 <memcpy+0xc>
 8007f3e:	4770      	bx	lr
 8007f40:	b510      	push	{r4, lr}
 8007f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	d1f9      	bne.n	8007f42 <memcpy+0xe>
 8007f4e:	bd10      	pop	{r4, pc}

08007f50 <memset>:
 8007f50:	4402      	add	r2, r0
 8007f52:	4603      	mov	r3, r0
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d100      	bne.n	8007f5a <memset+0xa>
 8007f58:	4770      	bx	lr
 8007f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f5e:	e7f9      	b.n	8007f54 <memset+0x4>

08007f60 <iprintf>:
 8007f60:	b40f      	push	{r0, r1, r2, r3}
 8007f62:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <iprintf+0x2c>)
 8007f64:	b513      	push	{r0, r1, r4, lr}
 8007f66:	681c      	ldr	r4, [r3, #0]
 8007f68:	b124      	cbz	r4, 8007f74 <iprintf+0x14>
 8007f6a:	69a3      	ldr	r3, [r4, #24]
 8007f6c:	b913      	cbnz	r3, 8007f74 <iprintf+0x14>
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 fa66 	bl	8008440 <__sinit>
 8007f74:	ab05      	add	r3, sp, #20
 8007f76:	9a04      	ldr	r2, [sp, #16]
 8007f78:	68a1      	ldr	r1, [r4, #8]
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fc6f 	bl	8008860 <_vfiprintf_r>
 8007f82:	b002      	add	sp, #8
 8007f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f88:	b004      	add	sp, #16
 8007f8a:	4770      	bx	lr
 8007f8c:	20000458 	.word	0x20000458

08007f90 <_puts_r>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	460e      	mov	r6, r1
 8007f94:	4605      	mov	r5, r0
 8007f96:	b118      	cbz	r0, 8007fa0 <_puts_r+0x10>
 8007f98:	6983      	ldr	r3, [r0, #24]
 8007f9a:	b90b      	cbnz	r3, 8007fa0 <_puts_r+0x10>
 8007f9c:	f000 fa50 	bl	8008440 <__sinit>
 8007fa0:	69ab      	ldr	r3, [r5, #24]
 8007fa2:	68ac      	ldr	r4, [r5, #8]
 8007fa4:	b913      	cbnz	r3, 8007fac <_puts_r+0x1c>
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 fa4a 	bl	8008440 <__sinit>
 8007fac:	4b2c      	ldr	r3, [pc, #176]	; (8008060 <_puts_r+0xd0>)
 8007fae:	429c      	cmp	r4, r3
 8007fb0:	d120      	bne.n	8007ff4 <_puts_r+0x64>
 8007fb2:	686c      	ldr	r4, [r5, #4]
 8007fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fb6:	07db      	lsls	r3, r3, #31
 8007fb8:	d405      	bmi.n	8007fc6 <_puts_r+0x36>
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	0598      	lsls	r0, r3, #22
 8007fbe:	d402      	bmi.n	8007fc6 <_puts_r+0x36>
 8007fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fc2:	f000 fadb 	bl	800857c <__retarget_lock_acquire_recursive>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	0719      	lsls	r1, r3, #28
 8007fca:	d51d      	bpl.n	8008008 <_puts_r+0x78>
 8007fcc:	6923      	ldr	r3, [r4, #16]
 8007fce:	b1db      	cbz	r3, 8008008 <_puts_r+0x78>
 8007fd0:	3e01      	subs	r6, #1
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	60a3      	str	r3, [r4, #8]
 8007fdc:	bb39      	cbnz	r1, 800802e <_puts_r+0x9e>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	da38      	bge.n	8008054 <_puts_r+0xc4>
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	210a      	movs	r1, #10
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 f850 	bl	800808c <__swbuf_r>
 8007fec:	3001      	adds	r0, #1
 8007fee:	d011      	beq.n	8008014 <_puts_r+0x84>
 8007ff0:	250a      	movs	r5, #10
 8007ff2:	e011      	b.n	8008018 <_puts_r+0x88>
 8007ff4:	4b1b      	ldr	r3, [pc, #108]	; (8008064 <_puts_r+0xd4>)
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d101      	bne.n	8007ffe <_puts_r+0x6e>
 8007ffa:	68ac      	ldr	r4, [r5, #8]
 8007ffc:	e7da      	b.n	8007fb4 <_puts_r+0x24>
 8007ffe:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <_puts_r+0xd8>)
 8008000:	429c      	cmp	r4, r3
 8008002:	bf08      	it	eq
 8008004:	68ec      	ldreq	r4, [r5, #12]
 8008006:	e7d5      	b.n	8007fb4 <_puts_r+0x24>
 8008008:	4621      	mov	r1, r4
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f890 	bl	8008130 <__swsetup_r>
 8008010:	2800      	cmp	r0, #0
 8008012:	d0dd      	beq.n	8007fd0 <_puts_r+0x40>
 8008014:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800801a:	07da      	lsls	r2, r3, #31
 800801c:	d405      	bmi.n	800802a <_puts_r+0x9a>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	059b      	lsls	r3, r3, #22
 8008022:	d402      	bmi.n	800802a <_puts_r+0x9a>
 8008024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008026:	f000 faaa 	bl	800857e <__retarget_lock_release_recursive>
 800802a:	4628      	mov	r0, r5
 800802c:	bd70      	pop	{r4, r5, r6, pc}
 800802e:	2b00      	cmp	r3, #0
 8008030:	da04      	bge.n	800803c <_puts_r+0xac>
 8008032:	69a2      	ldr	r2, [r4, #24]
 8008034:	429a      	cmp	r2, r3
 8008036:	dc06      	bgt.n	8008046 <_puts_r+0xb6>
 8008038:	290a      	cmp	r1, #10
 800803a:	d004      	beq.n	8008046 <_puts_r+0xb6>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	6022      	str	r2, [r4, #0]
 8008042:	7019      	strb	r1, [r3, #0]
 8008044:	e7c5      	b.n	8007fd2 <_puts_r+0x42>
 8008046:	4622      	mov	r2, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f000 f81f 	bl	800808c <__swbuf_r>
 800804e:	3001      	adds	r0, #1
 8008050:	d1bf      	bne.n	8007fd2 <_puts_r+0x42>
 8008052:	e7df      	b.n	8008014 <_puts_r+0x84>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	250a      	movs	r5, #10
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	6022      	str	r2, [r4, #0]
 800805c:	701d      	strb	r5, [r3, #0]
 800805e:	e7db      	b.n	8008018 <_puts_r+0x88>
 8008060:	080090d4 	.word	0x080090d4
 8008064:	080090f4 	.word	0x080090f4
 8008068:	080090b4 	.word	0x080090b4

0800806c <puts>:
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <puts+0xc>)
 800806e:	4601      	mov	r1, r0
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f7ff bf8d 	b.w	8007f90 <_puts_r>
 8008076:	bf00      	nop
 8008078:	20000458 	.word	0x20000458

0800807c <strcpy>:
 800807c:	4603      	mov	r3, r0
 800807e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008082:	f803 2b01 	strb.w	r2, [r3], #1
 8008086:	2a00      	cmp	r2, #0
 8008088:	d1f9      	bne.n	800807e <strcpy+0x2>
 800808a:	4770      	bx	lr

0800808c <__swbuf_r>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	460e      	mov	r6, r1
 8008090:	4614      	mov	r4, r2
 8008092:	4605      	mov	r5, r0
 8008094:	b118      	cbz	r0, 800809e <__swbuf_r+0x12>
 8008096:	6983      	ldr	r3, [r0, #24]
 8008098:	b90b      	cbnz	r3, 800809e <__swbuf_r+0x12>
 800809a:	f000 f9d1 	bl	8008440 <__sinit>
 800809e:	4b21      	ldr	r3, [pc, #132]	; (8008124 <__swbuf_r+0x98>)
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d12b      	bne.n	80080fc <__swbuf_r+0x70>
 80080a4:	686c      	ldr	r4, [r5, #4]
 80080a6:	69a3      	ldr	r3, [r4, #24]
 80080a8:	60a3      	str	r3, [r4, #8]
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	071a      	lsls	r2, r3, #28
 80080ae:	d52f      	bpl.n	8008110 <__swbuf_r+0x84>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	b36b      	cbz	r3, 8008110 <__swbuf_r+0x84>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	1ac0      	subs	r0, r0, r3
 80080ba:	6963      	ldr	r3, [r4, #20]
 80080bc:	b2f6      	uxtb	r6, r6
 80080be:	4283      	cmp	r3, r0
 80080c0:	4637      	mov	r7, r6
 80080c2:	dc04      	bgt.n	80080ce <__swbuf_r+0x42>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 f926 	bl	8008318 <_fflush_r>
 80080cc:	bb30      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	701e      	strb	r6, [r3, #0]
 80080dc:	6963      	ldr	r3, [r4, #20]
 80080de:	3001      	adds	r0, #1
 80080e0:	4283      	cmp	r3, r0
 80080e2:	d004      	beq.n	80080ee <__swbuf_r+0x62>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d506      	bpl.n	80080f8 <__swbuf_r+0x6c>
 80080ea:	2e0a      	cmp	r6, #10
 80080ec:	d104      	bne.n	80080f8 <__swbuf_r+0x6c>
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 f911 	bl	8008318 <_fflush_r>
 80080f6:	b988      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080f8:	4638      	mov	r0, r7
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <__swbuf_r+0x9c>)
 80080fe:	429c      	cmp	r4, r3
 8008100:	d101      	bne.n	8008106 <__swbuf_r+0x7a>
 8008102:	68ac      	ldr	r4, [r5, #8]
 8008104:	e7cf      	b.n	80080a6 <__swbuf_r+0x1a>
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <__swbuf_r+0xa0>)
 8008108:	429c      	cmp	r4, r3
 800810a:	bf08      	it	eq
 800810c:	68ec      	ldreq	r4, [r5, #12]
 800810e:	e7ca      	b.n	80080a6 <__swbuf_r+0x1a>
 8008110:	4621      	mov	r1, r4
 8008112:	4628      	mov	r0, r5
 8008114:	f000 f80c 	bl	8008130 <__swsetup_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0cb      	beq.n	80080b4 <__swbuf_r+0x28>
 800811c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008120:	e7ea      	b.n	80080f8 <__swbuf_r+0x6c>
 8008122:	bf00      	nop
 8008124:	080090d4 	.word	0x080090d4
 8008128:	080090f4 	.word	0x080090f4
 800812c:	080090b4 	.word	0x080090b4

08008130 <__swsetup_r>:
 8008130:	4b32      	ldr	r3, [pc, #200]	; (80081fc <__swsetup_r+0xcc>)
 8008132:	b570      	push	{r4, r5, r6, lr}
 8008134:	681d      	ldr	r5, [r3, #0]
 8008136:	4606      	mov	r6, r0
 8008138:	460c      	mov	r4, r1
 800813a:	b125      	cbz	r5, 8008146 <__swsetup_r+0x16>
 800813c:	69ab      	ldr	r3, [r5, #24]
 800813e:	b913      	cbnz	r3, 8008146 <__swsetup_r+0x16>
 8008140:	4628      	mov	r0, r5
 8008142:	f000 f97d 	bl	8008440 <__sinit>
 8008146:	4b2e      	ldr	r3, [pc, #184]	; (8008200 <__swsetup_r+0xd0>)
 8008148:	429c      	cmp	r4, r3
 800814a:	d10f      	bne.n	800816c <__swsetup_r+0x3c>
 800814c:	686c      	ldr	r4, [r5, #4]
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008154:	0719      	lsls	r1, r3, #28
 8008156:	d42c      	bmi.n	80081b2 <__swsetup_r+0x82>
 8008158:	06dd      	lsls	r5, r3, #27
 800815a:	d411      	bmi.n	8008180 <__swsetup_r+0x50>
 800815c:	2309      	movs	r3, #9
 800815e:	6033      	str	r3, [r6, #0]
 8008160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800816a:	e03e      	b.n	80081ea <__swsetup_r+0xba>
 800816c:	4b25      	ldr	r3, [pc, #148]	; (8008204 <__swsetup_r+0xd4>)
 800816e:	429c      	cmp	r4, r3
 8008170:	d101      	bne.n	8008176 <__swsetup_r+0x46>
 8008172:	68ac      	ldr	r4, [r5, #8]
 8008174:	e7eb      	b.n	800814e <__swsetup_r+0x1e>
 8008176:	4b24      	ldr	r3, [pc, #144]	; (8008208 <__swsetup_r+0xd8>)
 8008178:	429c      	cmp	r4, r3
 800817a:	bf08      	it	eq
 800817c:	68ec      	ldreq	r4, [r5, #12]
 800817e:	e7e6      	b.n	800814e <__swsetup_r+0x1e>
 8008180:	0758      	lsls	r0, r3, #29
 8008182:	d512      	bpl.n	80081aa <__swsetup_r+0x7a>
 8008184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008186:	b141      	cbz	r1, 800819a <__swsetup_r+0x6a>
 8008188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800818c:	4299      	cmp	r1, r3
 800818e:	d002      	beq.n	8008196 <__swsetup_r+0x66>
 8008190:	4630      	mov	r0, r6
 8008192:	f000 fa5b 	bl	800864c <_free_r>
 8008196:	2300      	movs	r3, #0
 8008198:	6363      	str	r3, [r4, #52]	; 0x34
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	2300      	movs	r3, #0
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f043 0308 	orr.w	r3, r3, #8
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	b94b      	cbnz	r3, 80081ca <__swsetup_r+0x9a>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c0:	d003      	beq.n	80081ca <__swsetup_r+0x9a>
 80081c2:	4621      	mov	r1, r4
 80081c4:	4630      	mov	r0, r6
 80081c6:	f000 fa01 	bl	80085cc <__smakebuf_r>
 80081ca:	89a0      	ldrh	r0, [r4, #12]
 80081cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d0:	f010 0301 	ands.w	r3, r0, #1
 80081d4:	d00a      	beq.n	80081ec <__swsetup_r+0xbc>
 80081d6:	2300      	movs	r3, #0
 80081d8:	60a3      	str	r3, [r4, #8]
 80081da:	6963      	ldr	r3, [r4, #20]
 80081dc:	425b      	negs	r3, r3
 80081de:	61a3      	str	r3, [r4, #24]
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	b943      	cbnz	r3, 80081f6 <__swsetup_r+0xc6>
 80081e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e8:	d1ba      	bne.n	8008160 <__swsetup_r+0x30>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	0781      	lsls	r1, r0, #30
 80081ee:	bf58      	it	pl
 80081f0:	6963      	ldrpl	r3, [r4, #20]
 80081f2:	60a3      	str	r3, [r4, #8]
 80081f4:	e7f4      	b.n	80081e0 <__swsetup_r+0xb0>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e7f7      	b.n	80081ea <__swsetup_r+0xba>
 80081fa:	bf00      	nop
 80081fc:	20000458 	.word	0x20000458
 8008200:	080090d4 	.word	0x080090d4
 8008204:	080090f4 	.word	0x080090f4
 8008208:	080090b4 	.word	0x080090b4

0800820c <__sflush_r>:
 800820c:	898a      	ldrh	r2, [r1, #12]
 800820e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	4605      	mov	r5, r0
 8008214:	0710      	lsls	r0, r2, #28
 8008216:	460c      	mov	r4, r1
 8008218:	d458      	bmi.n	80082cc <__sflush_r+0xc0>
 800821a:	684b      	ldr	r3, [r1, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dc05      	bgt.n	800822c <__sflush_r+0x20>
 8008220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	dc02      	bgt.n	800822c <__sflush_r+0x20>
 8008226:	2000      	movs	r0, #0
 8008228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800822c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800822e:	2e00      	cmp	r6, #0
 8008230:	d0f9      	beq.n	8008226 <__sflush_r+0x1a>
 8008232:	2300      	movs	r3, #0
 8008234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008238:	682f      	ldr	r7, [r5, #0]
 800823a:	602b      	str	r3, [r5, #0]
 800823c:	d032      	beq.n	80082a4 <__sflush_r+0x98>
 800823e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	075a      	lsls	r2, r3, #29
 8008244:	d505      	bpl.n	8008252 <__sflush_r+0x46>
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	1ac0      	subs	r0, r0, r3
 800824a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800824c:	b10b      	cbz	r3, 8008252 <__sflush_r+0x46>
 800824e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008250:	1ac0      	subs	r0, r0, r3
 8008252:	2300      	movs	r3, #0
 8008254:	4602      	mov	r2, r0
 8008256:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008258:	6a21      	ldr	r1, [r4, #32]
 800825a:	4628      	mov	r0, r5
 800825c:	47b0      	blx	r6
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	d106      	bne.n	8008272 <__sflush_r+0x66>
 8008264:	6829      	ldr	r1, [r5, #0]
 8008266:	291d      	cmp	r1, #29
 8008268:	d82c      	bhi.n	80082c4 <__sflush_r+0xb8>
 800826a:	4a2a      	ldr	r2, [pc, #168]	; (8008314 <__sflush_r+0x108>)
 800826c:	40ca      	lsrs	r2, r1
 800826e:	07d6      	lsls	r6, r2, #31
 8008270:	d528      	bpl.n	80082c4 <__sflush_r+0xb8>
 8008272:	2200      	movs	r2, #0
 8008274:	6062      	str	r2, [r4, #4]
 8008276:	04d9      	lsls	r1, r3, #19
 8008278:	6922      	ldr	r2, [r4, #16]
 800827a:	6022      	str	r2, [r4, #0]
 800827c:	d504      	bpl.n	8008288 <__sflush_r+0x7c>
 800827e:	1c42      	adds	r2, r0, #1
 8008280:	d101      	bne.n	8008286 <__sflush_r+0x7a>
 8008282:	682b      	ldr	r3, [r5, #0]
 8008284:	b903      	cbnz	r3, 8008288 <__sflush_r+0x7c>
 8008286:	6560      	str	r0, [r4, #84]	; 0x54
 8008288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800828a:	602f      	str	r7, [r5, #0]
 800828c:	2900      	cmp	r1, #0
 800828e:	d0ca      	beq.n	8008226 <__sflush_r+0x1a>
 8008290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008294:	4299      	cmp	r1, r3
 8008296:	d002      	beq.n	800829e <__sflush_r+0x92>
 8008298:	4628      	mov	r0, r5
 800829a:	f000 f9d7 	bl	800864c <_free_r>
 800829e:	2000      	movs	r0, #0
 80082a0:	6360      	str	r0, [r4, #52]	; 0x34
 80082a2:	e7c1      	b.n	8008228 <__sflush_r+0x1c>
 80082a4:	6a21      	ldr	r1, [r4, #32]
 80082a6:	2301      	movs	r3, #1
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b0      	blx	r6
 80082ac:	1c41      	adds	r1, r0, #1
 80082ae:	d1c7      	bne.n	8008240 <__sflush_r+0x34>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0c4      	beq.n	8008240 <__sflush_r+0x34>
 80082b6:	2b1d      	cmp	r3, #29
 80082b8:	d001      	beq.n	80082be <__sflush_r+0xb2>
 80082ba:	2b16      	cmp	r3, #22
 80082bc:	d101      	bne.n	80082c2 <__sflush_r+0xb6>
 80082be:	602f      	str	r7, [r5, #0]
 80082c0:	e7b1      	b.n	8008226 <__sflush_r+0x1a>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	e7ad      	b.n	8008228 <__sflush_r+0x1c>
 80082cc:	690f      	ldr	r7, [r1, #16]
 80082ce:	2f00      	cmp	r7, #0
 80082d0:	d0a9      	beq.n	8008226 <__sflush_r+0x1a>
 80082d2:	0793      	lsls	r3, r2, #30
 80082d4:	680e      	ldr	r6, [r1, #0]
 80082d6:	bf08      	it	eq
 80082d8:	694b      	ldreq	r3, [r1, #20]
 80082da:	600f      	str	r7, [r1, #0]
 80082dc:	bf18      	it	ne
 80082de:	2300      	movne	r3, #0
 80082e0:	eba6 0807 	sub.w	r8, r6, r7
 80082e4:	608b      	str	r3, [r1, #8]
 80082e6:	f1b8 0f00 	cmp.w	r8, #0
 80082ea:	dd9c      	ble.n	8008226 <__sflush_r+0x1a>
 80082ec:	6a21      	ldr	r1, [r4, #32]
 80082ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082f0:	4643      	mov	r3, r8
 80082f2:	463a      	mov	r2, r7
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b0      	blx	r6
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dc06      	bgt.n	800830a <__sflush_r+0xfe>
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008308:	e78e      	b.n	8008228 <__sflush_r+0x1c>
 800830a:	4407      	add	r7, r0
 800830c:	eba8 0800 	sub.w	r8, r8, r0
 8008310:	e7e9      	b.n	80082e6 <__sflush_r+0xda>
 8008312:	bf00      	nop
 8008314:	20400001 	.word	0x20400001

08008318 <_fflush_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	690b      	ldr	r3, [r1, #16]
 800831c:	4605      	mov	r5, r0
 800831e:	460c      	mov	r4, r1
 8008320:	b913      	cbnz	r3, 8008328 <_fflush_r+0x10>
 8008322:	2500      	movs	r5, #0
 8008324:	4628      	mov	r0, r5
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	b118      	cbz	r0, 8008332 <_fflush_r+0x1a>
 800832a:	6983      	ldr	r3, [r0, #24]
 800832c:	b90b      	cbnz	r3, 8008332 <_fflush_r+0x1a>
 800832e:	f000 f887 	bl	8008440 <__sinit>
 8008332:	4b14      	ldr	r3, [pc, #80]	; (8008384 <_fflush_r+0x6c>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d11b      	bne.n	8008370 <_fflush_r+0x58>
 8008338:	686c      	ldr	r4, [r5, #4]
 800833a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0ef      	beq.n	8008322 <_fflush_r+0xa>
 8008342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008344:	07d0      	lsls	r0, r2, #31
 8008346:	d404      	bmi.n	8008352 <_fflush_r+0x3a>
 8008348:	0599      	lsls	r1, r3, #22
 800834a:	d402      	bmi.n	8008352 <_fflush_r+0x3a>
 800834c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834e:	f000 f915 	bl	800857c <__retarget_lock_acquire_recursive>
 8008352:	4628      	mov	r0, r5
 8008354:	4621      	mov	r1, r4
 8008356:	f7ff ff59 	bl	800820c <__sflush_r>
 800835a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800835c:	07da      	lsls	r2, r3, #31
 800835e:	4605      	mov	r5, r0
 8008360:	d4e0      	bmi.n	8008324 <_fflush_r+0xc>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	059b      	lsls	r3, r3, #22
 8008366:	d4dd      	bmi.n	8008324 <_fflush_r+0xc>
 8008368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836a:	f000 f908 	bl	800857e <__retarget_lock_release_recursive>
 800836e:	e7d9      	b.n	8008324 <_fflush_r+0xc>
 8008370:	4b05      	ldr	r3, [pc, #20]	; (8008388 <_fflush_r+0x70>)
 8008372:	429c      	cmp	r4, r3
 8008374:	d101      	bne.n	800837a <_fflush_r+0x62>
 8008376:	68ac      	ldr	r4, [r5, #8]
 8008378:	e7df      	b.n	800833a <_fflush_r+0x22>
 800837a:	4b04      	ldr	r3, [pc, #16]	; (800838c <_fflush_r+0x74>)
 800837c:	429c      	cmp	r4, r3
 800837e:	bf08      	it	eq
 8008380:	68ec      	ldreq	r4, [r5, #12]
 8008382:	e7da      	b.n	800833a <_fflush_r+0x22>
 8008384:	080090d4 	.word	0x080090d4
 8008388:	080090f4 	.word	0x080090f4
 800838c:	080090b4 	.word	0x080090b4

08008390 <std>:
 8008390:	2300      	movs	r3, #0
 8008392:	b510      	push	{r4, lr}
 8008394:	4604      	mov	r4, r0
 8008396:	e9c0 3300 	strd	r3, r3, [r0]
 800839a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800839e:	6083      	str	r3, [r0, #8]
 80083a0:	8181      	strh	r1, [r0, #12]
 80083a2:	6643      	str	r3, [r0, #100]	; 0x64
 80083a4:	81c2      	strh	r2, [r0, #14]
 80083a6:	6183      	str	r3, [r0, #24]
 80083a8:	4619      	mov	r1, r3
 80083aa:	2208      	movs	r2, #8
 80083ac:	305c      	adds	r0, #92	; 0x5c
 80083ae:	f7ff fdcf 	bl	8007f50 <memset>
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <std+0x38>)
 80083b4:	6263      	str	r3, [r4, #36]	; 0x24
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <std+0x3c>)
 80083b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x40>)
 80083bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <std+0x44>)
 80083c0:	6224      	str	r4, [r4, #32]
 80083c2:	6323      	str	r3, [r4, #48]	; 0x30
 80083c4:	bd10      	pop	{r4, pc}
 80083c6:	bf00      	nop
 80083c8:	08008e09 	.word	0x08008e09
 80083cc:	08008e2b 	.word	0x08008e2b
 80083d0:	08008e63 	.word	0x08008e63
 80083d4:	08008e87 	.word	0x08008e87

080083d8 <_cleanup_r>:
 80083d8:	4901      	ldr	r1, [pc, #4]	; (80083e0 <_cleanup_r+0x8>)
 80083da:	f000 b8af 	b.w	800853c <_fwalk_reent>
 80083de:	bf00      	nop
 80083e0:	08008319 	.word	0x08008319

080083e4 <__sfmoreglue>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	2268      	movs	r2, #104	; 0x68
 80083e8:	1e4d      	subs	r5, r1, #1
 80083ea:	4355      	muls	r5, r2
 80083ec:	460e      	mov	r6, r1
 80083ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083f2:	f000 f997 	bl	8008724 <_malloc_r>
 80083f6:	4604      	mov	r4, r0
 80083f8:	b140      	cbz	r0, 800840c <__sfmoreglue+0x28>
 80083fa:	2100      	movs	r1, #0
 80083fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008400:	300c      	adds	r0, #12
 8008402:	60a0      	str	r0, [r4, #8]
 8008404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008408:	f7ff fda2 	bl	8007f50 <memset>
 800840c:	4620      	mov	r0, r4
 800840e:	bd70      	pop	{r4, r5, r6, pc}

08008410 <__sfp_lock_acquire>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__sfp_lock_acquire+0x8>)
 8008412:	f000 b8b3 	b.w	800857c <__retarget_lock_acquire_recursive>
 8008416:	bf00      	nop
 8008418:	20000575 	.word	0x20000575

0800841c <__sfp_lock_release>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__sfp_lock_release+0x8>)
 800841e:	f000 b8ae 	b.w	800857e <__retarget_lock_release_recursive>
 8008422:	bf00      	nop
 8008424:	20000575 	.word	0x20000575

08008428 <__sinit_lock_acquire>:
 8008428:	4801      	ldr	r0, [pc, #4]	; (8008430 <__sinit_lock_acquire+0x8>)
 800842a:	f000 b8a7 	b.w	800857c <__retarget_lock_acquire_recursive>
 800842e:	bf00      	nop
 8008430:	20000576 	.word	0x20000576

08008434 <__sinit_lock_release>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__sinit_lock_release+0x8>)
 8008436:	f000 b8a2 	b.w	800857e <__retarget_lock_release_recursive>
 800843a:	bf00      	nop
 800843c:	20000576 	.word	0x20000576

08008440 <__sinit>:
 8008440:	b510      	push	{r4, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	f7ff fff0 	bl	8008428 <__sinit_lock_acquire>
 8008448:	69a3      	ldr	r3, [r4, #24]
 800844a:	b11b      	cbz	r3, 8008454 <__sinit+0x14>
 800844c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008450:	f7ff bff0 	b.w	8008434 <__sinit_lock_release>
 8008454:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008458:	6523      	str	r3, [r4, #80]	; 0x50
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <__sinit+0x68>)
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <__sinit+0x6c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	62a2      	str	r2, [r4, #40]	; 0x28
 8008462:	42a3      	cmp	r3, r4
 8008464:	bf04      	itt	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	61a3      	streq	r3, [r4, #24]
 800846a:	4620      	mov	r0, r4
 800846c:	f000 f820 	bl	80084b0 <__sfp>
 8008470:	6060      	str	r0, [r4, #4]
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f81c 	bl	80084b0 <__sfp>
 8008478:	60a0      	str	r0, [r4, #8]
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f818 	bl	80084b0 <__sfp>
 8008480:	2200      	movs	r2, #0
 8008482:	60e0      	str	r0, [r4, #12]
 8008484:	2104      	movs	r1, #4
 8008486:	6860      	ldr	r0, [r4, #4]
 8008488:	f7ff ff82 	bl	8008390 <std>
 800848c:	68a0      	ldr	r0, [r4, #8]
 800848e:	2201      	movs	r2, #1
 8008490:	2109      	movs	r1, #9
 8008492:	f7ff ff7d 	bl	8008390 <std>
 8008496:	68e0      	ldr	r0, [r4, #12]
 8008498:	2202      	movs	r2, #2
 800849a:	2112      	movs	r1, #18
 800849c:	f7ff ff78 	bl	8008390 <std>
 80084a0:	2301      	movs	r3, #1
 80084a2:	61a3      	str	r3, [r4, #24]
 80084a4:	e7d2      	b.n	800844c <__sinit+0xc>
 80084a6:	bf00      	nop
 80084a8:	080090b0 	.word	0x080090b0
 80084ac:	080083d9 	.word	0x080083d9

080084b0 <__sfp>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	4607      	mov	r7, r0
 80084b4:	f7ff ffac 	bl	8008410 <__sfp_lock_acquire>
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <__sfp+0x84>)
 80084ba:	681e      	ldr	r6, [r3, #0]
 80084bc:	69b3      	ldr	r3, [r6, #24]
 80084be:	b913      	cbnz	r3, 80084c6 <__sfp+0x16>
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7ff ffbd 	bl	8008440 <__sinit>
 80084c6:	3648      	adds	r6, #72	; 0x48
 80084c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	d503      	bpl.n	80084d8 <__sfp+0x28>
 80084d0:	6833      	ldr	r3, [r6, #0]
 80084d2:	b30b      	cbz	r3, 8008518 <__sfp+0x68>
 80084d4:	6836      	ldr	r6, [r6, #0]
 80084d6:	e7f7      	b.n	80084c8 <__sfp+0x18>
 80084d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084dc:	b9d5      	cbnz	r5, 8008514 <__sfp+0x64>
 80084de:	4b16      	ldr	r3, [pc, #88]	; (8008538 <__sfp+0x88>)
 80084e0:	60e3      	str	r3, [r4, #12]
 80084e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084e6:	6665      	str	r5, [r4, #100]	; 0x64
 80084e8:	f000 f847 	bl	800857a <__retarget_lock_init_recursive>
 80084ec:	f7ff ff96 	bl	800841c <__sfp_lock_release>
 80084f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084f8:	6025      	str	r5, [r4, #0]
 80084fa:	61a5      	str	r5, [r4, #24]
 80084fc:	2208      	movs	r2, #8
 80084fe:	4629      	mov	r1, r5
 8008500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008504:	f7ff fd24 	bl	8007f50 <memset>
 8008508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800850c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008510:	4620      	mov	r0, r4
 8008512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008514:	3468      	adds	r4, #104	; 0x68
 8008516:	e7d9      	b.n	80084cc <__sfp+0x1c>
 8008518:	2104      	movs	r1, #4
 800851a:	4638      	mov	r0, r7
 800851c:	f7ff ff62 	bl	80083e4 <__sfmoreglue>
 8008520:	4604      	mov	r4, r0
 8008522:	6030      	str	r0, [r6, #0]
 8008524:	2800      	cmp	r0, #0
 8008526:	d1d5      	bne.n	80084d4 <__sfp+0x24>
 8008528:	f7ff ff78 	bl	800841c <__sfp_lock_release>
 800852c:	230c      	movs	r3, #12
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	e7ee      	b.n	8008510 <__sfp+0x60>
 8008532:	bf00      	nop
 8008534:	080090b0 	.word	0x080090b0
 8008538:	ffff0001 	.word	0xffff0001

0800853c <_fwalk_reent>:
 800853c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008540:	4606      	mov	r6, r0
 8008542:	4688      	mov	r8, r1
 8008544:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008548:	2700      	movs	r7, #0
 800854a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800854e:	f1b9 0901 	subs.w	r9, r9, #1
 8008552:	d505      	bpl.n	8008560 <_fwalk_reent+0x24>
 8008554:	6824      	ldr	r4, [r4, #0]
 8008556:	2c00      	cmp	r4, #0
 8008558:	d1f7      	bne.n	800854a <_fwalk_reent+0xe>
 800855a:	4638      	mov	r0, r7
 800855c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008560:	89ab      	ldrh	r3, [r5, #12]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d907      	bls.n	8008576 <_fwalk_reent+0x3a>
 8008566:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800856a:	3301      	adds	r3, #1
 800856c:	d003      	beq.n	8008576 <_fwalk_reent+0x3a>
 800856e:	4629      	mov	r1, r5
 8008570:	4630      	mov	r0, r6
 8008572:	47c0      	blx	r8
 8008574:	4307      	orrs	r7, r0
 8008576:	3568      	adds	r5, #104	; 0x68
 8008578:	e7e9      	b.n	800854e <_fwalk_reent+0x12>

0800857a <__retarget_lock_init_recursive>:
 800857a:	4770      	bx	lr

0800857c <__retarget_lock_acquire_recursive>:
 800857c:	4770      	bx	lr

0800857e <__retarget_lock_release_recursive>:
 800857e:	4770      	bx	lr

08008580 <__swhatbuf_r>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	460e      	mov	r6, r1
 8008584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008588:	2900      	cmp	r1, #0
 800858a:	b096      	sub	sp, #88	; 0x58
 800858c:	4614      	mov	r4, r2
 800858e:	461d      	mov	r5, r3
 8008590:	da08      	bge.n	80085a4 <__swhatbuf_r+0x24>
 8008592:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	602a      	str	r2, [r5, #0]
 800859a:	061a      	lsls	r2, r3, #24
 800859c:	d410      	bmi.n	80085c0 <__swhatbuf_r+0x40>
 800859e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a2:	e00e      	b.n	80085c2 <__swhatbuf_r+0x42>
 80085a4:	466a      	mov	r2, sp
 80085a6:	f000 fc95 	bl	8008ed4 <_fstat_r>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	dbf1      	blt.n	8008592 <__swhatbuf_r+0x12>
 80085ae:	9a01      	ldr	r2, [sp, #4]
 80085b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085b8:	425a      	negs	r2, r3
 80085ba:	415a      	adcs	r2, r3
 80085bc:	602a      	str	r2, [r5, #0]
 80085be:	e7ee      	b.n	800859e <__swhatbuf_r+0x1e>
 80085c0:	2340      	movs	r3, #64	; 0x40
 80085c2:	2000      	movs	r0, #0
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	b016      	add	sp, #88	; 0x58
 80085c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080085cc <__smakebuf_r>:
 80085cc:	898b      	ldrh	r3, [r1, #12]
 80085ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d0:	079d      	lsls	r5, r3, #30
 80085d2:	4606      	mov	r6, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	d507      	bpl.n	80085e8 <__smakebuf_r+0x1c>
 80085d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	2301      	movs	r3, #1
 80085e2:	6163      	str	r3, [r4, #20]
 80085e4:	b002      	add	sp, #8
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	ab01      	add	r3, sp, #4
 80085ea:	466a      	mov	r2, sp
 80085ec:	f7ff ffc8 	bl	8008580 <__swhatbuf_r>
 80085f0:	9900      	ldr	r1, [sp, #0]
 80085f2:	4605      	mov	r5, r0
 80085f4:	4630      	mov	r0, r6
 80085f6:	f000 f895 	bl	8008724 <_malloc_r>
 80085fa:	b948      	cbnz	r0, 8008610 <__smakebuf_r+0x44>
 80085fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008600:	059a      	lsls	r2, r3, #22
 8008602:	d4ef      	bmi.n	80085e4 <__smakebuf_r+0x18>
 8008604:	f023 0303 	bic.w	r3, r3, #3
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	81a3      	strh	r3, [r4, #12]
 800860e:	e7e3      	b.n	80085d8 <__smakebuf_r+0xc>
 8008610:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <__smakebuf_r+0x7c>)
 8008612:	62b3      	str	r3, [r6, #40]	; 0x28
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	6020      	str	r0, [r4, #0]
 8008618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	6163      	str	r3, [r4, #20]
 8008622:	9b01      	ldr	r3, [sp, #4]
 8008624:	6120      	str	r0, [r4, #16]
 8008626:	b15b      	cbz	r3, 8008640 <__smakebuf_r+0x74>
 8008628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800862c:	4630      	mov	r0, r6
 800862e:	f000 fc63 	bl	8008ef8 <_isatty_r>
 8008632:	b128      	cbz	r0, 8008640 <__smakebuf_r+0x74>
 8008634:	89a3      	ldrh	r3, [r4, #12]
 8008636:	f023 0303 	bic.w	r3, r3, #3
 800863a:	f043 0301 	orr.w	r3, r3, #1
 800863e:	81a3      	strh	r3, [r4, #12]
 8008640:	89a0      	ldrh	r0, [r4, #12]
 8008642:	4305      	orrs	r5, r0
 8008644:	81a5      	strh	r5, [r4, #12]
 8008646:	e7cd      	b.n	80085e4 <__smakebuf_r+0x18>
 8008648:	080083d9 	.word	0x080083d9

0800864c <_free_r>:
 800864c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800864e:	2900      	cmp	r1, #0
 8008650:	d044      	beq.n	80086dc <_free_r+0x90>
 8008652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008656:	9001      	str	r0, [sp, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f1a1 0404 	sub.w	r4, r1, #4
 800865e:	bfb8      	it	lt
 8008660:	18e4      	addlt	r4, r4, r3
 8008662:	f000 fc6b 	bl	8008f3c <__malloc_lock>
 8008666:	4a1e      	ldr	r2, [pc, #120]	; (80086e0 <_free_r+0x94>)
 8008668:	9801      	ldr	r0, [sp, #4]
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	b933      	cbnz	r3, 800867c <_free_r+0x30>
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	6014      	str	r4, [r2, #0]
 8008672:	b003      	add	sp, #12
 8008674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008678:	f000 bc66 	b.w	8008f48 <__malloc_unlock>
 800867c:	42a3      	cmp	r3, r4
 800867e:	d908      	bls.n	8008692 <_free_r+0x46>
 8008680:	6825      	ldr	r5, [r4, #0]
 8008682:	1961      	adds	r1, r4, r5
 8008684:	428b      	cmp	r3, r1
 8008686:	bf01      	itttt	eq
 8008688:	6819      	ldreq	r1, [r3, #0]
 800868a:	685b      	ldreq	r3, [r3, #4]
 800868c:	1949      	addeq	r1, r1, r5
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	e7ed      	b.n	800866e <_free_r+0x22>
 8008692:	461a      	mov	r2, r3
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b10b      	cbz	r3, 800869c <_free_r+0x50>
 8008698:	42a3      	cmp	r3, r4
 800869a:	d9fa      	bls.n	8008692 <_free_r+0x46>
 800869c:	6811      	ldr	r1, [r2, #0]
 800869e:	1855      	adds	r5, r2, r1
 80086a0:	42a5      	cmp	r5, r4
 80086a2:	d10b      	bne.n	80086bc <_free_r+0x70>
 80086a4:	6824      	ldr	r4, [r4, #0]
 80086a6:	4421      	add	r1, r4
 80086a8:	1854      	adds	r4, r2, r1
 80086aa:	42a3      	cmp	r3, r4
 80086ac:	6011      	str	r1, [r2, #0]
 80086ae:	d1e0      	bne.n	8008672 <_free_r+0x26>
 80086b0:	681c      	ldr	r4, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	6053      	str	r3, [r2, #4]
 80086b6:	4421      	add	r1, r4
 80086b8:	6011      	str	r1, [r2, #0]
 80086ba:	e7da      	b.n	8008672 <_free_r+0x26>
 80086bc:	d902      	bls.n	80086c4 <_free_r+0x78>
 80086be:	230c      	movs	r3, #12
 80086c0:	6003      	str	r3, [r0, #0]
 80086c2:	e7d6      	b.n	8008672 <_free_r+0x26>
 80086c4:	6825      	ldr	r5, [r4, #0]
 80086c6:	1961      	adds	r1, r4, r5
 80086c8:	428b      	cmp	r3, r1
 80086ca:	bf04      	itt	eq
 80086cc:	6819      	ldreq	r1, [r3, #0]
 80086ce:	685b      	ldreq	r3, [r3, #4]
 80086d0:	6063      	str	r3, [r4, #4]
 80086d2:	bf04      	itt	eq
 80086d4:	1949      	addeq	r1, r1, r5
 80086d6:	6021      	streq	r1, [r4, #0]
 80086d8:	6054      	str	r4, [r2, #4]
 80086da:	e7ca      	b.n	8008672 <_free_r+0x26>
 80086dc:	b003      	add	sp, #12
 80086de:	bd30      	pop	{r4, r5, pc}
 80086e0:	20000578 	.word	0x20000578

080086e4 <sbrk_aligned>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	4e0e      	ldr	r6, [pc, #56]	; (8008720 <sbrk_aligned+0x3c>)
 80086e8:	460c      	mov	r4, r1
 80086ea:	6831      	ldr	r1, [r6, #0]
 80086ec:	4605      	mov	r5, r0
 80086ee:	b911      	cbnz	r1, 80086f6 <sbrk_aligned+0x12>
 80086f0:	f000 fb7a 	bl	8008de8 <_sbrk_r>
 80086f4:	6030      	str	r0, [r6, #0]
 80086f6:	4621      	mov	r1, r4
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 fb75 	bl	8008de8 <_sbrk_r>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d00a      	beq.n	8008718 <sbrk_aligned+0x34>
 8008702:	1cc4      	adds	r4, r0, #3
 8008704:	f024 0403 	bic.w	r4, r4, #3
 8008708:	42a0      	cmp	r0, r4
 800870a:	d007      	beq.n	800871c <sbrk_aligned+0x38>
 800870c:	1a21      	subs	r1, r4, r0
 800870e:	4628      	mov	r0, r5
 8008710:	f000 fb6a 	bl	8008de8 <_sbrk_r>
 8008714:	3001      	adds	r0, #1
 8008716:	d101      	bne.n	800871c <sbrk_aligned+0x38>
 8008718:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800871c:	4620      	mov	r0, r4
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	2000057c 	.word	0x2000057c

08008724 <_malloc_r>:
 8008724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008728:	1ccd      	adds	r5, r1, #3
 800872a:	f025 0503 	bic.w	r5, r5, #3
 800872e:	3508      	adds	r5, #8
 8008730:	2d0c      	cmp	r5, #12
 8008732:	bf38      	it	cc
 8008734:	250c      	movcc	r5, #12
 8008736:	2d00      	cmp	r5, #0
 8008738:	4607      	mov	r7, r0
 800873a:	db01      	blt.n	8008740 <_malloc_r+0x1c>
 800873c:	42a9      	cmp	r1, r5
 800873e:	d905      	bls.n	800874c <_malloc_r+0x28>
 8008740:	230c      	movs	r3, #12
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	2600      	movs	r6, #0
 8008746:	4630      	mov	r0, r6
 8008748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874c:	4e2e      	ldr	r6, [pc, #184]	; (8008808 <_malloc_r+0xe4>)
 800874e:	f000 fbf5 	bl	8008f3c <__malloc_lock>
 8008752:	6833      	ldr	r3, [r6, #0]
 8008754:	461c      	mov	r4, r3
 8008756:	bb34      	cbnz	r4, 80087a6 <_malloc_r+0x82>
 8008758:	4629      	mov	r1, r5
 800875a:	4638      	mov	r0, r7
 800875c:	f7ff ffc2 	bl	80086e4 <sbrk_aligned>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	4604      	mov	r4, r0
 8008764:	d14d      	bne.n	8008802 <_malloc_r+0xde>
 8008766:	6834      	ldr	r4, [r6, #0]
 8008768:	4626      	mov	r6, r4
 800876a:	2e00      	cmp	r6, #0
 800876c:	d140      	bne.n	80087f0 <_malloc_r+0xcc>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	4631      	mov	r1, r6
 8008772:	4638      	mov	r0, r7
 8008774:	eb04 0803 	add.w	r8, r4, r3
 8008778:	f000 fb36 	bl	8008de8 <_sbrk_r>
 800877c:	4580      	cmp	r8, r0
 800877e:	d13a      	bne.n	80087f6 <_malloc_r+0xd2>
 8008780:	6821      	ldr	r1, [r4, #0]
 8008782:	3503      	adds	r5, #3
 8008784:	1a6d      	subs	r5, r5, r1
 8008786:	f025 0503 	bic.w	r5, r5, #3
 800878a:	3508      	adds	r5, #8
 800878c:	2d0c      	cmp	r5, #12
 800878e:	bf38      	it	cc
 8008790:	250c      	movcc	r5, #12
 8008792:	4629      	mov	r1, r5
 8008794:	4638      	mov	r0, r7
 8008796:	f7ff ffa5 	bl	80086e4 <sbrk_aligned>
 800879a:	3001      	adds	r0, #1
 800879c:	d02b      	beq.n	80087f6 <_malloc_r+0xd2>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	442b      	add	r3, r5
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	e00e      	b.n	80087c4 <_malloc_r+0xa0>
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	1b52      	subs	r2, r2, r5
 80087aa:	d41e      	bmi.n	80087ea <_malloc_r+0xc6>
 80087ac:	2a0b      	cmp	r2, #11
 80087ae:	d916      	bls.n	80087de <_malloc_r+0xba>
 80087b0:	1961      	adds	r1, r4, r5
 80087b2:	42a3      	cmp	r3, r4
 80087b4:	6025      	str	r5, [r4, #0]
 80087b6:	bf18      	it	ne
 80087b8:	6059      	strne	r1, [r3, #4]
 80087ba:	6863      	ldr	r3, [r4, #4]
 80087bc:	bf08      	it	eq
 80087be:	6031      	streq	r1, [r6, #0]
 80087c0:	5162      	str	r2, [r4, r5]
 80087c2:	604b      	str	r3, [r1, #4]
 80087c4:	4638      	mov	r0, r7
 80087c6:	f104 060b 	add.w	r6, r4, #11
 80087ca:	f000 fbbd 	bl	8008f48 <__malloc_unlock>
 80087ce:	f026 0607 	bic.w	r6, r6, #7
 80087d2:	1d23      	adds	r3, r4, #4
 80087d4:	1af2      	subs	r2, r6, r3
 80087d6:	d0b6      	beq.n	8008746 <_malloc_r+0x22>
 80087d8:	1b9b      	subs	r3, r3, r6
 80087da:	50a3      	str	r3, [r4, r2]
 80087dc:	e7b3      	b.n	8008746 <_malloc_r+0x22>
 80087de:	6862      	ldr	r2, [r4, #4]
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	bf0c      	ite	eq
 80087e4:	6032      	streq	r2, [r6, #0]
 80087e6:	605a      	strne	r2, [r3, #4]
 80087e8:	e7ec      	b.n	80087c4 <_malloc_r+0xa0>
 80087ea:	4623      	mov	r3, r4
 80087ec:	6864      	ldr	r4, [r4, #4]
 80087ee:	e7b2      	b.n	8008756 <_malloc_r+0x32>
 80087f0:	4634      	mov	r4, r6
 80087f2:	6876      	ldr	r6, [r6, #4]
 80087f4:	e7b9      	b.n	800876a <_malloc_r+0x46>
 80087f6:	230c      	movs	r3, #12
 80087f8:	603b      	str	r3, [r7, #0]
 80087fa:	4638      	mov	r0, r7
 80087fc:	f000 fba4 	bl	8008f48 <__malloc_unlock>
 8008800:	e7a1      	b.n	8008746 <_malloc_r+0x22>
 8008802:	6025      	str	r5, [r4, #0]
 8008804:	e7de      	b.n	80087c4 <_malloc_r+0xa0>
 8008806:	bf00      	nop
 8008808:	20000578 	.word	0x20000578

0800880c <__sfputc_r>:
 800880c:	6893      	ldr	r3, [r2, #8]
 800880e:	3b01      	subs	r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	b410      	push	{r4}
 8008814:	6093      	str	r3, [r2, #8]
 8008816:	da08      	bge.n	800882a <__sfputc_r+0x1e>
 8008818:	6994      	ldr	r4, [r2, #24]
 800881a:	42a3      	cmp	r3, r4
 800881c:	db01      	blt.n	8008822 <__sfputc_r+0x16>
 800881e:	290a      	cmp	r1, #10
 8008820:	d103      	bne.n	800882a <__sfputc_r+0x1e>
 8008822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008826:	f7ff bc31 	b.w	800808c <__swbuf_r>
 800882a:	6813      	ldr	r3, [r2, #0]
 800882c:	1c58      	adds	r0, r3, #1
 800882e:	6010      	str	r0, [r2, #0]
 8008830:	7019      	strb	r1, [r3, #0]
 8008832:	4608      	mov	r0, r1
 8008834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008838:	4770      	bx	lr

0800883a <__sfputs_r>:
 800883a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	4614      	mov	r4, r2
 8008842:	18d5      	adds	r5, r2, r3
 8008844:	42ac      	cmp	r4, r5
 8008846:	d101      	bne.n	800884c <__sfputs_r+0x12>
 8008848:	2000      	movs	r0, #0
 800884a:	e007      	b.n	800885c <__sfputs_r+0x22>
 800884c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008850:	463a      	mov	r2, r7
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ffda 	bl	800880c <__sfputc_r>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d1f3      	bne.n	8008844 <__sfputs_r+0xa>
 800885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008860 <_vfiprintf_r>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	460d      	mov	r5, r1
 8008866:	b09d      	sub	sp, #116	; 0x74
 8008868:	4614      	mov	r4, r2
 800886a:	4698      	mov	r8, r3
 800886c:	4606      	mov	r6, r0
 800886e:	b118      	cbz	r0, 8008878 <_vfiprintf_r+0x18>
 8008870:	6983      	ldr	r3, [r0, #24]
 8008872:	b90b      	cbnz	r3, 8008878 <_vfiprintf_r+0x18>
 8008874:	f7ff fde4 	bl	8008440 <__sinit>
 8008878:	4b89      	ldr	r3, [pc, #548]	; (8008aa0 <_vfiprintf_r+0x240>)
 800887a:	429d      	cmp	r5, r3
 800887c:	d11b      	bne.n	80088b6 <_vfiprintf_r+0x56>
 800887e:	6875      	ldr	r5, [r6, #4]
 8008880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008882:	07d9      	lsls	r1, r3, #31
 8008884:	d405      	bmi.n	8008892 <_vfiprintf_r+0x32>
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	059a      	lsls	r2, r3, #22
 800888a:	d402      	bmi.n	8008892 <_vfiprintf_r+0x32>
 800888c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800888e:	f7ff fe75 	bl	800857c <__retarget_lock_acquire_recursive>
 8008892:	89ab      	ldrh	r3, [r5, #12]
 8008894:	071b      	lsls	r3, r3, #28
 8008896:	d501      	bpl.n	800889c <_vfiprintf_r+0x3c>
 8008898:	692b      	ldr	r3, [r5, #16]
 800889a:	b9eb      	cbnz	r3, 80088d8 <_vfiprintf_r+0x78>
 800889c:	4629      	mov	r1, r5
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff fc46 	bl	8008130 <__swsetup_r>
 80088a4:	b1c0      	cbz	r0, 80088d8 <_vfiprintf_r+0x78>
 80088a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088a8:	07dc      	lsls	r4, r3, #31
 80088aa:	d50e      	bpl.n	80088ca <_vfiprintf_r+0x6a>
 80088ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088b0:	b01d      	add	sp, #116	; 0x74
 80088b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b6:	4b7b      	ldr	r3, [pc, #492]	; (8008aa4 <_vfiprintf_r+0x244>)
 80088b8:	429d      	cmp	r5, r3
 80088ba:	d101      	bne.n	80088c0 <_vfiprintf_r+0x60>
 80088bc:	68b5      	ldr	r5, [r6, #8]
 80088be:	e7df      	b.n	8008880 <_vfiprintf_r+0x20>
 80088c0:	4b79      	ldr	r3, [pc, #484]	; (8008aa8 <_vfiprintf_r+0x248>)
 80088c2:	429d      	cmp	r5, r3
 80088c4:	bf08      	it	eq
 80088c6:	68f5      	ldreq	r5, [r6, #12]
 80088c8:	e7da      	b.n	8008880 <_vfiprintf_r+0x20>
 80088ca:	89ab      	ldrh	r3, [r5, #12]
 80088cc:	0598      	lsls	r0, r3, #22
 80088ce:	d4ed      	bmi.n	80088ac <_vfiprintf_r+0x4c>
 80088d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088d2:	f7ff fe54 	bl	800857e <__retarget_lock_release_recursive>
 80088d6:	e7e9      	b.n	80088ac <_vfiprintf_r+0x4c>
 80088d8:	2300      	movs	r3, #0
 80088da:	9309      	str	r3, [sp, #36]	; 0x24
 80088dc:	2320      	movs	r3, #32
 80088de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e6:	2330      	movs	r3, #48	; 0x30
 80088e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008aac <_vfiprintf_r+0x24c>
 80088ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088f0:	f04f 0901 	mov.w	r9, #1
 80088f4:	4623      	mov	r3, r4
 80088f6:	469a      	mov	sl, r3
 80088f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088fc:	b10a      	cbz	r2, 8008902 <_vfiprintf_r+0xa2>
 80088fe:	2a25      	cmp	r2, #37	; 0x25
 8008900:	d1f9      	bne.n	80088f6 <_vfiprintf_r+0x96>
 8008902:	ebba 0b04 	subs.w	fp, sl, r4
 8008906:	d00b      	beq.n	8008920 <_vfiprintf_r+0xc0>
 8008908:	465b      	mov	r3, fp
 800890a:	4622      	mov	r2, r4
 800890c:	4629      	mov	r1, r5
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff ff93 	bl	800883a <__sfputs_r>
 8008914:	3001      	adds	r0, #1
 8008916:	f000 80aa 	beq.w	8008a6e <_vfiprintf_r+0x20e>
 800891a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800891c:	445a      	add	r2, fp
 800891e:	9209      	str	r2, [sp, #36]	; 0x24
 8008920:	f89a 3000 	ldrb.w	r3, [sl]
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 80a2 	beq.w	8008a6e <_vfiprintf_r+0x20e>
 800892a:	2300      	movs	r3, #0
 800892c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008934:	f10a 0a01 	add.w	sl, sl, #1
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	9307      	str	r3, [sp, #28]
 800893c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008940:	931a      	str	r3, [sp, #104]	; 0x68
 8008942:	4654      	mov	r4, sl
 8008944:	2205      	movs	r2, #5
 8008946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894a:	4858      	ldr	r0, [pc, #352]	; (8008aac <_vfiprintf_r+0x24c>)
 800894c:	f7f7 fc40 	bl	80001d0 <memchr>
 8008950:	9a04      	ldr	r2, [sp, #16]
 8008952:	b9d8      	cbnz	r0, 800898c <_vfiprintf_r+0x12c>
 8008954:	06d1      	lsls	r1, r2, #27
 8008956:	bf44      	itt	mi
 8008958:	2320      	movmi	r3, #32
 800895a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800895e:	0713      	lsls	r3, r2, #28
 8008960:	bf44      	itt	mi
 8008962:	232b      	movmi	r3, #43	; 0x2b
 8008964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008968:	f89a 3000 	ldrb.w	r3, [sl]
 800896c:	2b2a      	cmp	r3, #42	; 0x2a
 800896e:	d015      	beq.n	800899c <_vfiprintf_r+0x13c>
 8008970:	9a07      	ldr	r2, [sp, #28]
 8008972:	4654      	mov	r4, sl
 8008974:	2000      	movs	r0, #0
 8008976:	f04f 0c0a 	mov.w	ip, #10
 800897a:	4621      	mov	r1, r4
 800897c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008980:	3b30      	subs	r3, #48	; 0x30
 8008982:	2b09      	cmp	r3, #9
 8008984:	d94e      	bls.n	8008a24 <_vfiprintf_r+0x1c4>
 8008986:	b1b0      	cbz	r0, 80089b6 <_vfiprintf_r+0x156>
 8008988:	9207      	str	r2, [sp, #28]
 800898a:	e014      	b.n	80089b6 <_vfiprintf_r+0x156>
 800898c:	eba0 0308 	sub.w	r3, r0, r8
 8008990:	fa09 f303 	lsl.w	r3, r9, r3
 8008994:	4313      	orrs	r3, r2
 8008996:	9304      	str	r3, [sp, #16]
 8008998:	46a2      	mov	sl, r4
 800899a:	e7d2      	b.n	8008942 <_vfiprintf_r+0xe2>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1d19      	adds	r1, r3, #4
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	9103      	str	r1, [sp, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bfbb      	ittet	lt
 80089a8:	425b      	neglt	r3, r3
 80089aa:	f042 0202 	orrlt.w	r2, r2, #2
 80089ae:	9307      	strge	r3, [sp, #28]
 80089b0:	9307      	strlt	r3, [sp, #28]
 80089b2:	bfb8      	it	lt
 80089b4:	9204      	strlt	r2, [sp, #16]
 80089b6:	7823      	ldrb	r3, [r4, #0]
 80089b8:	2b2e      	cmp	r3, #46	; 0x2e
 80089ba:	d10c      	bne.n	80089d6 <_vfiprintf_r+0x176>
 80089bc:	7863      	ldrb	r3, [r4, #1]
 80089be:	2b2a      	cmp	r3, #42	; 0x2a
 80089c0:	d135      	bne.n	8008a2e <_vfiprintf_r+0x1ce>
 80089c2:	9b03      	ldr	r3, [sp, #12]
 80089c4:	1d1a      	adds	r2, r3, #4
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	9203      	str	r2, [sp, #12]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bfb8      	it	lt
 80089ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089d2:	3402      	adds	r4, #2
 80089d4:	9305      	str	r3, [sp, #20]
 80089d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008abc <_vfiprintf_r+0x25c>
 80089da:	7821      	ldrb	r1, [r4, #0]
 80089dc:	2203      	movs	r2, #3
 80089de:	4650      	mov	r0, sl
 80089e0:	f7f7 fbf6 	bl	80001d0 <memchr>
 80089e4:	b140      	cbz	r0, 80089f8 <_vfiprintf_r+0x198>
 80089e6:	2340      	movs	r3, #64	; 0x40
 80089e8:	eba0 000a 	sub.w	r0, r0, sl
 80089ec:	fa03 f000 	lsl.w	r0, r3, r0
 80089f0:	9b04      	ldr	r3, [sp, #16]
 80089f2:	4303      	orrs	r3, r0
 80089f4:	3401      	adds	r4, #1
 80089f6:	9304      	str	r3, [sp, #16]
 80089f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089fc:	482c      	ldr	r0, [pc, #176]	; (8008ab0 <_vfiprintf_r+0x250>)
 80089fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a02:	2206      	movs	r2, #6
 8008a04:	f7f7 fbe4 	bl	80001d0 <memchr>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d03f      	beq.n	8008a8c <_vfiprintf_r+0x22c>
 8008a0c:	4b29      	ldr	r3, [pc, #164]	; (8008ab4 <_vfiprintf_r+0x254>)
 8008a0e:	bb1b      	cbnz	r3, 8008a58 <_vfiprintf_r+0x1f8>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	3307      	adds	r3, #7
 8008a14:	f023 0307 	bic.w	r3, r3, #7
 8008a18:	3308      	adds	r3, #8
 8008a1a:	9303      	str	r3, [sp, #12]
 8008a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a1e:	443b      	add	r3, r7
 8008a20:	9309      	str	r3, [sp, #36]	; 0x24
 8008a22:	e767      	b.n	80088f4 <_vfiprintf_r+0x94>
 8008a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a28:	460c      	mov	r4, r1
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	e7a5      	b.n	800897a <_vfiprintf_r+0x11a>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	3401      	adds	r4, #1
 8008a32:	9305      	str	r3, [sp, #20]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f04f 0c0a 	mov.w	ip, #10
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a40:	3a30      	subs	r2, #48	; 0x30
 8008a42:	2a09      	cmp	r2, #9
 8008a44:	d903      	bls.n	8008a4e <_vfiprintf_r+0x1ee>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0c5      	beq.n	80089d6 <_vfiprintf_r+0x176>
 8008a4a:	9105      	str	r1, [sp, #20]
 8008a4c:	e7c3      	b.n	80089d6 <_vfiprintf_r+0x176>
 8008a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a52:	4604      	mov	r4, r0
 8008a54:	2301      	movs	r3, #1
 8008a56:	e7f0      	b.n	8008a3a <_vfiprintf_r+0x1da>
 8008a58:	ab03      	add	r3, sp, #12
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	462a      	mov	r2, r5
 8008a5e:	4b16      	ldr	r3, [pc, #88]	; (8008ab8 <_vfiprintf_r+0x258>)
 8008a60:	a904      	add	r1, sp, #16
 8008a62:	4630      	mov	r0, r6
 8008a64:	f3af 8000 	nop.w
 8008a68:	4607      	mov	r7, r0
 8008a6a:	1c78      	adds	r0, r7, #1
 8008a6c:	d1d6      	bne.n	8008a1c <_vfiprintf_r+0x1bc>
 8008a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a70:	07d9      	lsls	r1, r3, #31
 8008a72:	d405      	bmi.n	8008a80 <_vfiprintf_r+0x220>
 8008a74:	89ab      	ldrh	r3, [r5, #12]
 8008a76:	059a      	lsls	r2, r3, #22
 8008a78:	d402      	bmi.n	8008a80 <_vfiprintf_r+0x220>
 8008a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a7c:	f7ff fd7f 	bl	800857e <__retarget_lock_release_recursive>
 8008a80:	89ab      	ldrh	r3, [r5, #12]
 8008a82:	065b      	lsls	r3, r3, #25
 8008a84:	f53f af12 	bmi.w	80088ac <_vfiprintf_r+0x4c>
 8008a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a8a:	e711      	b.n	80088b0 <_vfiprintf_r+0x50>
 8008a8c:	ab03      	add	r3, sp, #12
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	462a      	mov	r2, r5
 8008a92:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <_vfiprintf_r+0x258>)
 8008a94:	a904      	add	r1, sp, #16
 8008a96:	4630      	mov	r0, r6
 8008a98:	f000 f880 	bl	8008b9c <_printf_i>
 8008a9c:	e7e4      	b.n	8008a68 <_vfiprintf_r+0x208>
 8008a9e:	bf00      	nop
 8008aa0:	080090d4 	.word	0x080090d4
 8008aa4:	080090f4 	.word	0x080090f4
 8008aa8:	080090b4 	.word	0x080090b4
 8008aac:	08009114 	.word	0x08009114
 8008ab0:	0800911e 	.word	0x0800911e
 8008ab4:	00000000 	.word	0x00000000
 8008ab8:	0800883b 	.word	0x0800883b
 8008abc:	0800911a 	.word	0x0800911a

08008ac0 <_printf_common>:
 8008ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	4699      	mov	r9, r3
 8008ac8:	688a      	ldr	r2, [r1, #8]
 8008aca:	690b      	ldr	r3, [r1, #16]
 8008acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	bfb8      	it	lt
 8008ad4:	4613      	movlt	r3, r2
 8008ad6:	6033      	str	r3, [r6, #0]
 8008ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008adc:	4607      	mov	r7, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	b10a      	cbz	r2, 8008ae6 <_printf_common+0x26>
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	6033      	str	r3, [r6, #0]
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	0699      	lsls	r1, r3, #26
 8008aea:	bf42      	ittt	mi
 8008aec:	6833      	ldrmi	r3, [r6, #0]
 8008aee:	3302      	addmi	r3, #2
 8008af0:	6033      	strmi	r3, [r6, #0]
 8008af2:	6825      	ldr	r5, [r4, #0]
 8008af4:	f015 0506 	ands.w	r5, r5, #6
 8008af8:	d106      	bne.n	8008b08 <_printf_common+0x48>
 8008afa:	f104 0a19 	add.w	sl, r4, #25
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	6832      	ldr	r2, [r6, #0]
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dc26      	bgt.n	8008b56 <_printf_common+0x96>
 8008b08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b0c:	1e13      	subs	r3, r2, #0
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	bf18      	it	ne
 8008b12:	2301      	movne	r3, #1
 8008b14:	0692      	lsls	r2, r2, #26
 8008b16:	d42b      	bmi.n	8008b70 <_printf_common+0xb0>
 8008b18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c0      	blx	r8
 8008b22:	3001      	adds	r0, #1
 8008b24:	d01e      	beq.n	8008b64 <_printf_common+0xa4>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	68e5      	ldr	r5, [r4, #12]
 8008b2a:	6832      	ldr	r2, [r6, #0]
 8008b2c:	f003 0306 	and.w	r3, r3, #6
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	bf08      	it	eq
 8008b34:	1aad      	subeq	r5, r5, r2
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	6922      	ldr	r2, [r4, #16]
 8008b3a:	bf0c      	ite	eq
 8008b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b40:	2500      	movne	r5, #0
 8008b42:	4293      	cmp	r3, r2
 8008b44:	bfc4      	itt	gt
 8008b46:	1a9b      	subgt	r3, r3, r2
 8008b48:	18ed      	addgt	r5, r5, r3
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	341a      	adds	r4, #26
 8008b4e:	42b5      	cmp	r5, r6
 8008b50:	d11a      	bne.n	8008b88 <_printf_common+0xc8>
 8008b52:	2000      	movs	r0, #0
 8008b54:	e008      	b.n	8008b68 <_printf_common+0xa8>
 8008b56:	2301      	movs	r3, #1
 8008b58:	4652      	mov	r2, sl
 8008b5a:	4649      	mov	r1, r9
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	47c0      	blx	r8
 8008b60:	3001      	adds	r0, #1
 8008b62:	d103      	bne.n	8008b6c <_printf_common+0xac>
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	e7c6      	b.n	8008afe <_printf_common+0x3e>
 8008b70:	18e1      	adds	r1, r4, r3
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	2030      	movs	r0, #48	; 0x30
 8008b76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b7a:	4422      	add	r2, r4
 8008b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b84:	3302      	adds	r3, #2
 8008b86:	e7c7      	b.n	8008b18 <_printf_common+0x58>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	4638      	mov	r0, r7
 8008b90:	47c0      	blx	r8
 8008b92:	3001      	adds	r0, #1
 8008b94:	d0e6      	beq.n	8008b64 <_printf_common+0xa4>
 8008b96:	3601      	adds	r6, #1
 8008b98:	e7d9      	b.n	8008b4e <_printf_common+0x8e>
	...

08008b9c <_printf_i>:
 8008b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba0:	7e0f      	ldrb	r7, [r1, #24]
 8008ba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ba4:	2f78      	cmp	r7, #120	; 0x78
 8008ba6:	4691      	mov	r9, r2
 8008ba8:	4680      	mov	r8, r0
 8008baa:	460c      	mov	r4, r1
 8008bac:	469a      	mov	sl, r3
 8008bae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bb2:	d807      	bhi.n	8008bc4 <_printf_i+0x28>
 8008bb4:	2f62      	cmp	r7, #98	; 0x62
 8008bb6:	d80a      	bhi.n	8008bce <_printf_i+0x32>
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	f000 80d8 	beq.w	8008d6e <_printf_i+0x1d2>
 8008bbe:	2f58      	cmp	r7, #88	; 0x58
 8008bc0:	f000 80a3 	beq.w	8008d0a <_printf_i+0x16e>
 8008bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bcc:	e03a      	b.n	8008c44 <_printf_i+0xa8>
 8008bce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bd2:	2b15      	cmp	r3, #21
 8008bd4:	d8f6      	bhi.n	8008bc4 <_printf_i+0x28>
 8008bd6:	a101      	add	r1, pc, #4	; (adr r1, 8008bdc <_printf_i+0x40>)
 8008bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bdc:	08008c35 	.word	0x08008c35
 8008be0:	08008c49 	.word	0x08008c49
 8008be4:	08008bc5 	.word	0x08008bc5
 8008be8:	08008bc5 	.word	0x08008bc5
 8008bec:	08008bc5 	.word	0x08008bc5
 8008bf0:	08008bc5 	.word	0x08008bc5
 8008bf4:	08008c49 	.word	0x08008c49
 8008bf8:	08008bc5 	.word	0x08008bc5
 8008bfc:	08008bc5 	.word	0x08008bc5
 8008c00:	08008bc5 	.word	0x08008bc5
 8008c04:	08008bc5 	.word	0x08008bc5
 8008c08:	08008d55 	.word	0x08008d55
 8008c0c:	08008c79 	.word	0x08008c79
 8008c10:	08008d37 	.word	0x08008d37
 8008c14:	08008bc5 	.word	0x08008bc5
 8008c18:	08008bc5 	.word	0x08008bc5
 8008c1c:	08008d77 	.word	0x08008d77
 8008c20:	08008bc5 	.word	0x08008bc5
 8008c24:	08008c79 	.word	0x08008c79
 8008c28:	08008bc5 	.word	0x08008bc5
 8008c2c:	08008bc5 	.word	0x08008bc5
 8008c30:	08008d3f 	.word	0x08008d3f
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	1d1a      	adds	r2, r3, #4
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	602a      	str	r2, [r5, #0]
 8008c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0a3      	b.n	8008d90 <_printf_i+0x1f4>
 8008c48:	6820      	ldr	r0, [r4, #0]
 8008c4a:	6829      	ldr	r1, [r5, #0]
 8008c4c:	0606      	lsls	r6, r0, #24
 8008c4e:	f101 0304 	add.w	r3, r1, #4
 8008c52:	d50a      	bpl.n	8008c6a <_printf_i+0xce>
 8008c54:	680e      	ldr	r6, [r1, #0]
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	2e00      	cmp	r6, #0
 8008c5a:	da03      	bge.n	8008c64 <_printf_i+0xc8>
 8008c5c:	232d      	movs	r3, #45	; 0x2d
 8008c5e:	4276      	negs	r6, r6
 8008c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c64:	485e      	ldr	r0, [pc, #376]	; (8008de0 <_printf_i+0x244>)
 8008c66:	230a      	movs	r3, #10
 8008c68:	e019      	b.n	8008c9e <_printf_i+0x102>
 8008c6a:	680e      	ldr	r6, [r1, #0]
 8008c6c:	602b      	str	r3, [r5, #0]
 8008c6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c72:	bf18      	it	ne
 8008c74:	b236      	sxthne	r6, r6
 8008c76:	e7ef      	b.n	8008c58 <_printf_i+0xbc>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	6820      	ldr	r0, [r4, #0]
 8008c7c:	1d19      	adds	r1, r3, #4
 8008c7e:	6029      	str	r1, [r5, #0]
 8008c80:	0601      	lsls	r1, r0, #24
 8008c82:	d501      	bpl.n	8008c88 <_printf_i+0xec>
 8008c84:	681e      	ldr	r6, [r3, #0]
 8008c86:	e002      	b.n	8008c8e <_printf_i+0xf2>
 8008c88:	0646      	lsls	r6, r0, #25
 8008c8a:	d5fb      	bpl.n	8008c84 <_printf_i+0xe8>
 8008c8c:	881e      	ldrh	r6, [r3, #0]
 8008c8e:	4854      	ldr	r0, [pc, #336]	; (8008de0 <_printf_i+0x244>)
 8008c90:	2f6f      	cmp	r7, #111	; 0x6f
 8008c92:	bf0c      	ite	eq
 8008c94:	2308      	moveq	r3, #8
 8008c96:	230a      	movne	r3, #10
 8008c98:	2100      	movs	r1, #0
 8008c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c9e:	6865      	ldr	r5, [r4, #4]
 8008ca0:	60a5      	str	r5, [r4, #8]
 8008ca2:	2d00      	cmp	r5, #0
 8008ca4:	bfa2      	ittt	ge
 8008ca6:	6821      	ldrge	r1, [r4, #0]
 8008ca8:	f021 0104 	bicge.w	r1, r1, #4
 8008cac:	6021      	strge	r1, [r4, #0]
 8008cae:	b90e      	cbnz	r6, 8008cb4 <_printf_i+0x118>
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	d04d      	beq.n	8008d50 <_printf_i+0x1b4>
 8008cb4:	4615      	mov	r5, r2
 8008cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cba:	fb03 6711 	mls	r7, r3, r1, r6
 8008cbe:	5dc7      	ldrb	r7, [r0, r7]
 8008cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cc4:	4637      	mov	r7, r6
 8008cc6:	42bb      	cmp	r3, r7
 8008cc8:	460e      	mov	r6, r1
 8008cca:	d9f4      	bls.n	8008cb6 <_printf_i+0x11a>
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	d10b      	bne.n	8008ce8 <_printf_i+0x14c>
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	07de      	lsls	r6, r3, #31
 8008cd4:	d508      	bpl.n	8008ce8 <_printf_i+0x14c>
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	6861      	ldr	r1, [r4, #4]
 8008cda:	4299      	cmp	r1, r3
 8008cdc:	bfde      	ittt	le
 8008cde:	2330      	movle	r3, #48	; 0x30
 8008ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ce4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008ce8:	1b52      	subs	r2, r2, r5
 8008cea:	6122      	str	r2, [r4, #16]
 8008cec:	f8cd a000 	str.w	sl, [sp]
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	aa03      	add	r2, sp, #12
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	f7ff fee2 	bl	8008ac0 <_printf_common>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d14c      	bne.n	8008d9a <_printf_i+0x1fe>
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d04:	b004      	add	sp, #16
 8008d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0a:	4835      	ldr	r0, [pc, #212]	; (8008de0 <_printf_i+0x244>)
 8008d0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d10:	6829      	ldr	r1, [r5, #0]
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d18:	6029      	str	r1, [r5, #0]
 8008d1a:	061d      	lsls	r5, r3, #24
 8008d1c:	d514      	bpl.n	8008d48 <_printf_i+0x1ac>
 8008d1e:	07df      	lsls	r7, r3, #31
 8008d20:	bf44      	itt	mi
 8008d22:	f043 0320 	orrmi.w	r3, r3, #32
 8008d26:	6023      	strmi	r3, [r4, #0]
 8008d28:	b91e      	cbnz	r6, 8008d32 <_printf_i+0x196>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f023 0320 	bic.w	r3, r3, #32
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	2310      	movs	r3, #16
 8008d34:	e7b0      	b.n	8008c98 <_printf_i+0xfc>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	f043 0320 	orr.w	r3, r3, #32
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	2378      	movs	r3, #120	; 0x78
 8008d40:	4828      	ldr	r0, [pc, #160]	; (8008de4 <_printf_i+0x248>)
 8008d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d46:	e7e3      	b.n	8008d10 <_printf_i+0x174>
 8008d48:	0659      	lsls	r1, r3, #25
 8008d4a:	bf48      	it	mi
 8008d4c:	b2b6      	uxthmi	r6, r6
 8008d4e:	e7e6      	b.n	8008d1e <_printf_i+0x182>
 8008d50:	4615      	mov	r5, r2
 8008d52:	e7bb      	b.n	8008ccc <_printf_i+0x130>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	6826      	ldr	r6, [r4, #0]
 8008d58:	6961      	ldr	r1, [r4, #20]
 8008d5a:	1d18      	adds	r0, r3, #4
 8008d5c:	6028      	str	r0, [r5, #0]
 8008d5e:	0635      	lsls	r5, r6, #24
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	d501      	bpl.n	8008d68 <_printf_i+0x1cc>
 8008d64:	6019      	str	r1, [r3, #0]
 8008d66:	e002      	b.n	8008d6e <_printf_i+0x1d2>
 8008d68:	0670      	lsls	r0, r6, #25
 8008d6a:	d5fb      	bpl.n	8008d64 <_printf_i+0x1c8>
 8008d6c:	8019      	strh	r1, [r3, #0]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	4615      	mov	r5, r2
 8008d74:	e7ba      	b.n	8008cec <_printf_i+0x150>
 8008d76:	682b      	ldr	r3, [r5, #0]
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	602a      	str	r2, [r5, #0]
 8008d7c:	681d      	ldr	r5, [r3, #0]
 8008d7e:	6862      	ldr	r2, [r4, #4]
 8008d80:	2100      	movs	r1, #0
 8008d82:	4628      	mov	r0, r5
 8008d84:	f7f7 fa24 	bl	80001d0 <memchr>
 8008d88:	b108      	cbz	r0, 8008d8e <_printf_i+0x1f2>
 8008d8a:	1b40      	subs	r0, r0, r5
 8008d8c:	6060      	str	r0, [r4, #4]
 8008d8e:	6863      	ldr	r3, [r4, #4]
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	2300      	movs	r3, #0
 8008d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d98:	e7a8      	b.n	8008cec <_printf_i+0x150>
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4649      	mov	r1, r9
 8008da0:	4640      	mov	r0, r8
 8008da2:	47d0      	blx	sl
 8008da4:	3001      	adds	r0, #1
 8008da6:	d0ab      	beq.n	8008d00 <_printf_i+0x164>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	079b      	lsls	r3, r3, #30
 8008dac:	d413      	bmi.n	8008dd6 <_printf_i+0x23a>
 8008dae:	68e0      	ldr	r0, [r4, #12]
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	4298      	cmp	r0, r3
 8008db4:	bfb8      	it	lt
 8008db6:	4618      	movlt	r0, r3
 8008db8:	e7a4      	b.n	8008d04 <_printf_i+0x168>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	4632      	mov	r2, r6
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	47d0      	blx	sl
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d09b      	beq.n	8008d00 <_printf_i+0x164>
 8008dc8:	3501      	adds	r5, #1
 8008dca:	68e3      	ldr	r3, [r4, #12]
 8008dcc:	9903      	ldr	r1, [sp, #12]
 8008dce:	1a5b      	subs	r3, r3, r1
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	dcf2      	bgt.n	8008dba <_printf_i+0x21e>
 8008dd4:	e7eb      	b.n	8008dae <_printf_i+0x212>
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	f104 0619 	add.w	r6, r4, #25
 8008ddc:	e7f5      	b.n	8008dca <_printf_i+0x22e>
 8008dde:	bf00      	nop
 8008de0:	08009125 	.word	0x08009125
 8008de4:	08009136 	.word	0x08009136

08008de8 <_sbrk_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4d06      	ldr	r5, [pc, #24]	; (8008e04 <_sbrk_r+0x1c>)
 8008dec:	2300      	movs	r3, #0
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	f7f7 fd18 	bl	8000828 <_sbrk>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_sbrk_r+0x1a>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_sbrk_r+0x1a>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20000580 	.word	0x20000580

08008e08 <__sread>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e10:	f000 f8a0 	bl	8008f54 <_read_r>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	bfab      	itete	ge
 8008e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8008e1c:	181b      	addge	r3, r3, r0
 8008e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e22:	bfac      	ite	ge
 8008e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e26:	81a3      	strhlt	r3, [r4, #12]
 8008e28:	bd10      	pop	{r4, pc}

08008e2a <__swrite>:
 8008e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2e:	461f      	mov	r7, r3
 8008e30:	898b      	ldrh	r3, [r1, #12]
 8008e32:	05db      	lsls	r3, r3, #23
 8008e34:	4605      	mov	r5, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	4616      	mov	r6, r2
 8008e3a:	d505      	bpl.n	8008e48 <__swrite+0x1e>
 8008e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e40:	2302      	movs	r3, #2
 8008e42:	2200      	movs	r2, #0
 8008e44:	f000 f868 	bl	8008f18 <_lseek_r>
 8008e48:	89a3      	ldrh	r3, [r4, #12]
 8008e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	4632      	mov	r2, r6
 8008e56:	463b      	mov	r3, r7
 8008e58:	4628      	mov	r0, r5
 8008e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5e:	f000 b817 	b.w	8008e90 <_write_r>

08008e62 <__sseek>:
 8008e62:	b510      	push	{r4, lr}
 8008e64:	460c      	mov	r4, r1
 8008e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6a:	f000 f855 	bl	8008f18 <_lseek_r>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	bf15      	itete	ne
 8008e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e7e:	81a3      	strheq	r3, [r4, #12]
 8008e80:	bf18      	it	ne
 8008e82:	81a3      	strhne	r3, [r4, #12]
 8008e84:	bd10      	pop	{r4, pc}

08008e86 <__sclose>:
 8008e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8a:	f000 b813 	b.w	8008eb4 <_close_r>
	...

08008e90 <_write_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d07      	ldr	r5, [pc, #28]	; (8008eb0 <_write_r+0x20>)
 8008e94:	4604      	mov	r4, r0
 8008e96:	4608      	mov	r0, r1
 8008e98:	4611      	mov	r1, r2
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	602a      	str	r2, [r5, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f7f7 fc71 	bl	8000786 <_write>
 8008ea4:	1c43      	adds	r3, r0, #1
 8008ea6:	d102      	bne.n	8008eae <_write_r+0x1e>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	b103      	cbz	r3, 8008eae <_write_r+0x1e>
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	bd38      	pop	{r3, r4, r5, pc}
 8008eb0:	20000580 	.word	0x20000580

08008eb4 <_close_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d06      	ldr	r5, [pc, #24]	; (8008ed0 <_close_r+0x1c>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	f7f7 fc7d 	bl	80007be <_close>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_close_r+0x1a>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_close_r+0x1a>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	20000580 	.word	0x20000580

08008ed4 <_fstat_r>:
 8008ed4:	b538      	push	{r3, r4, r5, lr}
 8008ed6:	4d07      	ldr	r5, [pc, #28]	; (8008ef4 <_fstat_r+0x20>)
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4604      	mov	r4, r0
 8008edc:	4608      	mov	r0, r1
 8008ede:	4611      	mov	r1, r2
 8008ee0:	602b      	str	r3, [r5, #0]
 8008ee2:	f7f7 fc78 	bl	80007d6 <_fstat>
 8008ee6:	1c43      	adds	r3, r0, #1
 8008ee8:	d102      	bne.n	8008ef0 <_fstat_r+0x1c>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	b103      	cbz	r3, 8008ef0 <_fstat_r+0x1c>
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	bd38      	pop	{r3, r4, r5, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20000580 	.word	0x20000580

08008ef8 <_isatty_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d06      	ldr	r5, [pc, #24]	; (8008f14 <_isatty_r+0x1c>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7f7 fc77 	bl	80007f6 <_isatty>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_isatty_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_isatty_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20000580 	.word	0x20000580

08008f18 <_lseek_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	; (8008f38 <_lseek_r+0x20>)
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7f7 fc70 	bl	800080c <_lseek>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_lseek_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_lseek_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20000580 	.word	0x20000580

08008f3c <__malloc_lock>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	; (8008f44 <__malloc_lock+0x8>)
 8008f3e:	f7ff bb1d 	b.w	800857c <__retarget_lock_acquire_recursive>
 8008f42:	bf00      	nop
 8008f44:	20000574 	.word	0x20000574

08008f48 <__malloc_unlock>:
 8008f48:	4801      	ldr	r0, [pc, #4]	; (8008f50 <__malloc_unlock+0x8>)
 8008f4a:	f7ff bb18 	b.w	800857e <__retarget_lock_release_recursive>
 8008f4e:	bf00      	nop
 8008f50:	20000574 	.word	0x20000574

08008f54 <_read_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d07      	ldr	r5, [pc, #28]	; (8008f74 <_read_r+0x20>)
 8008f58:	4604      	mov	r4, r0
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f7f7 fbf2 	bl	800074c <_read>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_read_r+0x1e>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_read_r+0x1e>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20000580 	.word	0x20000580

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
